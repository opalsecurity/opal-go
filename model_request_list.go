/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// checks if the RequestList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestList{}

// RequestList # Request List ### Description The `RequestList` object is used to represent a list of requests.  ### Usage Example Returned from the `GET Requests` endpoint.
type RequestList struct {
	// The list of requests.
	Requests []Request `json:"requests,omitempty"`
	// The cursor to use in the next request to get the next page of results.
	Cursor *string `json:"cursor,omitempty"`
}

// NewRequestList instantiates a new RequestList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestList() *RequestList {
	this := RequestList{}
	return &this
}

// NewRequestListWithDefaults instantiates a new RequestList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestListWithDefaults() *RequestList {
	this := RequestList{}
	return &this
}

// GetRequests returns the Requests field value if set, zero value otherwise.
func (o *RequestList) GetRequests() []Request {
	if o == nil || IsNil(o.Requests) {
		var ret []Request
		return ret
	}
	return o.Requests
}

// GetRequestsOk returns a tuple with the Requests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestList) GetRequestsOk() ([]Request, bool) {
	if o == nil || IsNil(o.Requests) {
		return nil, false
	}
	return o.Requests, true
}

// HasRequests returns a boolean if a field has been set.
func (o *RequestList) HasRequests() bool {
	if o != nil && !IsNil(o.Requests) {
		return true
	}

	return false
}

// SetRequests gets a reference to the given []Request and assigns it to the Requests field.
func (o *RequestList) SetRequests(v []Request) {
	o.Requests = v
}

// GetCursor returns the Cursor field value if set, zero value otherwise.
func (o *RequestList) GetCursor() string {
	if o == nil || IsNil(o.Cursor) {
		var ret string
		return ret
	}
	return *o.Cursor
}

// GetCursorOk returns a tuple with the Cursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestList) GetCursorOk() (*string, bool) {
	if o == nil || IsNil(o.Cursor) {
		return nil, false
	}
	return o.Cursor, true
}

// HasCursor returns a boolean if a field has been set.
func (o *RequestList) HasCursor() bool {
	if o != nil && !IsNil(o.Cursor) {
		return true
	}

	return false
}

// SetCursor gets a reference to the given string and assigns it to the Cursor field.
func (o *RequestList) SetCursor(v string) {
	o.Cursor = &v
}

func (o RequestList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Requests) {
		toSerialize["requests"] = o.Requests
	}
	if !IsNil(o.Cursor) {
		toSerialize["cursor"] = o.Cursor
	}
	return toSerialize, nil
}

type NullableRequestList struct {
	value *RequestList
	isSet bool
}

func (v NullableRequestList) Get() *RequestList {
	return v.value
}

func (v *NullableRequestList) Set(val *RequestList) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestList) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestList(val *RequestList) *NullableRequestList {
	return &NullableRequestList{value: val, isSet: true}
}

func (v NullableRequestList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


