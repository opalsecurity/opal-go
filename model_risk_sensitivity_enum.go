/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// RiskSensitivityEnum Indicates the level of potential impact misuse or unauthorized access may incur.
type RiskSensitivityEnum string

// List of RiskSensitivityEnum
const (
	RISKSENSITIVITYENUM_UNKNOWN RiskSensitivityEnum = "UNKNOWN"
	RISKSENSITIVITYENUM_CRITICAL RiskSensitivityEnum = "CRITICAL"
	RISKSENSITIVITYENUM_HIGH RiskSensitivityEnum = "HIGH"
	RISKSENSITIVITYENUM_MEDIUM RiskSensitivityEnum = "MEDIUM"
	RISKSENSITIVITYENUM_LOW RiskSensitivityEnum = "LOW"
	RISKSENSITIVITYENUM_NONE RiskSensitivityEnum = "NONE"
)

// All allowed values of RiskSensitivityEnum enum
var AllowedRiskSensitivityEnumEnumValues = []RiskSensitivityEnum{
	"UNKNOWN",
	"CRITICAL",
	"HIGH",
	"MEDIUM",
	"LOW",
	"NONE",
}

func (v *RiskSensitivityEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RiskSensitivityEnum(value)
	for _, existing := range AllowedRiskSensitivityEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RiskSensitivityEnum", value)
}

// NewRiskSensitivityEnumFromValue returns a pointer to a valid RiskSensitivityEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRiskSensitivityEnumFromValue(v string) (*RiskSensitivityEnum, error) {
	ev := RiskSensitivityEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RiskSensitivityEnum: valid values are %v", v, AllowedRiskSensitivityEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RiskSensitivityEnum) IsValid() bool {
	for _, existing := range AllowedRiskSensitivityEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RiskSensitivityEnum value
func (v RiskSensitivityEnum) Ptr() *RiskSensitivityEnum {
	return &v
}

type NullableRiskSensitivityEnum struct {
	value *RiskSensitivityEnum
	isSet bool
}

func (v NullableRiskSensitivityEnum) Get() *RiskSensitivityEnum {
	return v.value
}

func (v *NullableRiskSensitivityEnum) Set(val *RiskSensitivityEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskSensitivityEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskSensitivityEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskSensitivityEnum(val *RiskSensitivityEnum) *NullableRiskSensitivityEnum {
	return &NullableRiskSensitivityEnum{value: val, isSet: true}
}

func (v NullableRiskSensitivityEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskSensitivityEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

