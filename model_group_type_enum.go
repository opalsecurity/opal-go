/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// GroupTypeEnum The type of the group.
type GroupTypeEnum string

// List of GroupTypeEnum
const (
	GROUPTYPEENUM_ACTIVE_DIRECTORY_GROUP GroupTypeEnum = "ACTIVE_DIRECTORY_GROUP"
	GROUPTYPEENUM_DUO_GROUP GroupTypeEnum = "DUO_GROUP"
	GROUPTYPEENUM_GIT_HUB_TEAM GroupTypeEnum = "GIT_HUB_TEAM"
	GROUPTYPEENUM_GOOGLE_GROUPS_GROUP GroupTypeEnum = "GOOGLE_GROUPS_GROUP"
	GROUPTYPEENUM_LDAP_GROUP GroupTypeEnum = "LDAP_GROUP"
	GROUPTYPEENUM_OKTA_GROUP GroupTypeEnum = "OKTA_GROUP"
	GROUPTYPEENUM_OPAL_GROUP GroupTypeEnum = "OPAL_GROUP"
)

// All allowed values of GroupTypeEnum enum
var AllowedGroupTypeEnumEnumValues = []GroupTypeEnum{
	"ACTIVE_DIRECTORY_GROUP",
	"DUO_GROUP",
	"GIT_HUB_TEAM",
	"GOOGLE_GROUPS_GROUP",
	"LDAP_GROUP",
	"OKTA_GROUP",
	"OPAL_GROUP",
}

func (v *GroupTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupTypeEnum(value)
	for _, existing := range AllowedGroupTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupTypeEnum", value)
}

// NewGroupTypeEnumFromValue returns a pointer to a valid GroupTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupTypeEnumFromValue(v string) (*GroupTypeEnum, error) {
	ev := GroupTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupTypeEnum: valid values are %v", v, AllowedGroupTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupTypeEnum) IsValid() bool {
	for _, existing := range AllowedGroupTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupTypeEnum value
func (v GroupTypeEnum) Ptr() *GroupTypeEnum {
	return &v
}

type NullableGroupTypeEnum struct {
	value *GroupTypeEnum
	isSet bool
}

func (v NullableGroupTypeEnum) Get() *GroupTypeEnum {
	return v.value
}

func (v *NullableGroupTypeEnum) Set(val *GroupTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupTypeEnum(val *GroupTypeEnum) *NullableGroupTypeEnum {
	return &NullableGroupTypeEnum{value: val, isSet: true}
}

func (v NullableGroupTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

