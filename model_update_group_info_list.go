/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateGroupInfoList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateGroupInfoList{}

// UpdateGroupInfoList struct for UpdateGroupInfoList
type UpdateGroupInfoList struct {
	// A list of groups with information to update.
	Groups []UpdateGroupInfo `json:"groups"`
}

type _UpdateGroupInfoList UpdateGroupInfoList

// NewUpdateGroupInfoList instantiates a new UpdateGroupInfoList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGroupInfoList(groups []UpdateGroupInfo) *UpdateGroupInfoList {
	this := UpdateGroupInfoList{}
	this.Groups = groups
	return &this
}

// NewUpdateGroupInfoListWithDefaults instantiates a new UpdateGroupInfoList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGroupInfoListWithDefaults() *UpdateGroupInfoList {
	this := UpdateGroupInfoList{}
	return &this
}

// GetGroups returns the Groups field value
func (o *UpdateGroupInfoList) GetGroups() []UpdateGroupInfo {
	if o == nil {
		var ret []UpdateGroupInfo
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *UpdateGroupInfoList) GetGroupsOk() ([]UpdateGroupInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *UpdateGroupInfoList) SetGroups(v []UpdateGroupInfo) {
	o.Groups = v
}

func (o UpdateGroupInfoList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateGroupInfoList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groups"] = o.Groups
	return toSerialize, nil
}

func (o *UpdateGroupInfoList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateGroupInfoList := _UpdateGroupInfoList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateGroupInfoList)

	if err != nil {
		return err
	}

	*o = UpdateGroupInfoList(varUpdateGroupInfoList)

	return err
}

type NullableUpdateGroupInfoList struct {
	value *UpdateGroupInfoList
	isSet bool
}

func (v NullableUpdateGroupInfoList) Get() *UpdateGroupInfoList {
	return v.value
}

func (v *NullableUpdateGroupInfoList) Set(val *UpdateGroupInfoList) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGroupInfoList) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGroupInfoList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGroupInfoList(val *UpdateGroupInfoList) *NullableUpdateGroupInfoList {
	return &NullableUpdateGroupInfoList{value: val, isSet: true}
}

func (v NullableUpdateGroupInfoList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGroupInfoList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


