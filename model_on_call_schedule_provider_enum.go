/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// OnCallScheduleProviderEnum The third party provider of the on call schedule.
type OnCallScheduleProviderEnum string

// List of OnCallScheduleProviderEnum
const (
	ONCALLSCHEDULEPROVIDERENUM_OPSGENIE OnCallScheduleProviderEnum = "OPSGENIE"
	ONCALLSCHEDULEPROVIDERENUM_PAGER_DUTY OnCallScheduleProviderEnum = "PAGER_DUTY"
)

// All allowed values of OnCallScheduleProviderEnum enum
var AllowedOnCallScheduleProviderEnumEnumValues = []OnCallScheduleProviderEnum{
	"OPSGENIE",
	"PAGER_DUTY",
}

func (v *OnCallScheduleProviderEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OnCallScheduleProviderEnum(value)
	for _, existing := range AllowedOnCallScheduleProviderEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OnCallScheduleProviderEnum", value)
}

// NewOnCallScheduleProviderEnumFromValue returns a pointer to a valid OnCallScheduleProviderEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOnCallScheduleProviderEnumFromValue(v string) (*OnCallScheduleProviderEnum, error) {
	ev := OnCallScheduleProviderEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OnCallScheduleProviderEnum: valid values are %v", v, AllowedOnCallScheduleProviderEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OnCallScheduleProviderEnum) IsValid() bool {
	for _, existing := range AllowedOnCallScheduleProviderEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OnCallScheduleProviderEnum value
func (v OnCallScheduleProviderEnum) Ptr() *OnCallScheduleProviderEnum {
	return &v
}

type NullableOnCallScheduleProviderEnum struct {
	value *OnCallScheduleProviderEnum
	isSet bool
}

func (v NullableOnCallScheduleProviderEnum) Get() *OnCallScheduleProviderEnum {
	return v.value
}

func (v *NullableOnCallScheduleProviderEnum) Set(val *OnCallScheduleProviderEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableOnCallScheduleProviderEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableOnCallScheduleProviderEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnCallScheduleProviderEnum(val *OnCallScheduleProviderEnum) *NullableOnCallScheduleProviderEnum {
	return &NullableOnCallScheduleProviderEnum{value: val, isSet: true}
}

func (v NullableOnCallScheduleProviderEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnCallScheduleProviderEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

