/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// checks if the PaginatedConfigurationTemplateList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedConfigurationTemplateList{}

// PaginatedConfigurationTemplateList # PaginatedConfigurationTemplateList Object ### Description The `PaginatedConfigurationTemplateList` object is used to store a list of configuration templates.  ### Usage Example Returned from the `GET Configuration Templates` endpoint.
type PaginatedConfigurationTemplateList struct {
	Results []ConfigurationTemplate `json:"results,omitempty"`
}

// NewPaginatedConfigurationTemplateList instantiates a new PaginatedConfigurationTemplateList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedConfigurationTemplateList() *PaginatedConfigurationTemplateList {
	this := PaginatedConfigurationTemplateList{}
	return &this
}

// NewPaginatedConfigurationTemplateListWithDefaults instantiates a new PaginatedConfigurationTemplateList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedConfigurationTemplateListWithDefaults() *PaginatedConfigurationTemplateList {
	this := PaginatedConfigurationTemplateList{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *PaginatedConfigurationTemplateList) GetResults() []ConfigurationTemplate {
	if o == nil || IsNil(o.Results) {
		var ret []ConfigurationTemplate
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedConfigurationTemplateList) GetResultsOk() ([]ConfigurationTemplate, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *PaginatedConfigurationTemplateList) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []ConfigurationTemplate and assigns it to the Results field.
func (o *PaginatedConfigurationTemplateList) SetResults(v []ConfigurationTemplate) {
	o.Results = v
}

func (o PaginatedConfigurationTemplateList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedConfigurationTemplateList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullablePaginatedConfigurationTemplateList struct {
	value *PaginatedConfigurationTemplateList
	isSet bool
}

func (v NullablePaginatedConfigurationTemplateList) Get() *PaginatedConfigurationTemplateList {
	return v.value
}

func (v *NullablePaginatedConfigurationTemplateList) Set(val *PaginatedConfigurationTemplateList) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedConfigurationTemplateList) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedConfigurationTemplateList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedConfigurationTemplateList(val *PaginatedConfigurationTemplateList) *NullablePaginatedConfigurationTemplateList {
	return &NullablePaginatedConfigurationTemplateList{value: val, isSet: true}
}

func (v NullablePaginatedConfigurationTemplateList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedConfigurationTemplateList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


