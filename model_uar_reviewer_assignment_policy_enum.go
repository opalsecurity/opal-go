/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// UARReviewerAssignmentPolicyEnum A policy for auto-assigning reviewers. If auto-assignment is on, specific assignments can still be manually adjusted after the access review is started. Default is Manually.
type UARReviewerAssignmentPolicyEnum string

// List of UARReviewerAssignmentPolicyEnum
const (
	UARREVIEWERASSIGNMENTPOLICYENUM_MANUALLY UARReviewerAssignmentPolicyEnum = "MANUALLY"
	UARREVIEWERASSIGNMENTPOLICYENUM_BY_OWNING_TEAM_ADMIN UARReviewerAssignmentPolicyEnum = "BY_OWNING_TEAM_ADMIN"
	UARREVIEWERASSIGNMENTPOLICYENUM_BY_MANAGER UARReviewerAssignmentPolicyEnum = "BY_MANAGER"
)

// All allowed values of UARReviewerAssignmentPolicyEnum enum
var AllowedUARReviewerAssignmentPolicyEnumEnumValues = []UARReviewerAssignmentPolicyEnum{
	"MANUALLY",
	"BY_OWNING_TEAM_ADMIN",
	"BY_MANAGER",
}

func (v *UARReviewerAssignmentPolicyEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UARReviewerAssignmentPolicyEnum(value)
	for _, existing := range AllowedUARReviewerAssignmentPolicyEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UARReviewerAssignmentPolicyEnum", value)
}

// NewUARReviewerAssignmentPolicyEnumFromValue returns a pointer to a valid UARReviewerAssignmentPolicyEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUARReviewerAssignmentPolicyEnumFromValue(v string) (*UARReviewerAssignmentPolicyEnum, error) {
	ev := UARReviewerAssignmentPolicyEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UARReviewerAssignmentPolicyEnum: valid values are %v", v, AllowedUARReviewerAssignmentPolicyEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UARReviewerAssignmentPolicyEnum) IsValid() bool {
	for _, existing := range AllowedUARReviewerAssignmentPolicyEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UARReviewerAssignmentPolicyEnum value
func (v UARReviewerAssignmentPolicyEnum) Ptr() *UARReviewerAssignmentPolicyEnum {
	return &v
}

type NullableUARReviewerAssignmentPolicyEnum struct {
	value *UARReviewerAssignmentPolicyEnum
	isSet bool
}

func (v NullableUARReviewerAssignmentPolicyEnum) Get() *UARReviewerAssignmentPolicyEnum {
	return v.value
}

func (v *NullableUARReviewerAssignmentPolicyEnum) Set(val *UARReviewerAssignmentPolicyEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableUARReviewerAssignmentPolicyEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableUARReviewerAssignmentPolicyEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUARReviewerAssignmentPolicyEnum(val *UARReviewerAssignmentPolicyEnum) *NullableUARReviewerAssignmentPolicyEnum {
	return &NullableUARReviewerAssignmentPolicyEnum{value: val, isSet: true}
}

func (v NullableUARReviewerAssignmentPolicyEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUARReviewerAssignmentPolicyEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

