/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
)

// ResourceAccessUser # Resource Access User Object ### Description The `ResourceAccessUser` object is used to represent a user with access to a resource, either directly or indirectly through group(s).  ### Usage Example Fetch from the `LIST ResourceUsers` endpoint.
type ResourceAccessUser struct {
	// The ID of the resource.
	ResourceId string `json:"resource_id"`
	// The ID of the user.
	UserId string `json:"user_id"`
	AccessLevel ResourceAccessLevel `json:"access_level"`
	// The user's full name.
	FullName string `json:"full_name"`
	// The user's email.
	Email string `json:"email"`
	// The day and time the user's access will expire.
	ExpirationDate NullableTime `json:"expiration_date"`
	// The user has direct access to this resources (vs. indirectly, like through a group).
	HasDirectAccess bool `json:"has_direct_access"`
	// The number of ways in which the user has access through this resource (directly and indirectly).
	NumAccessPaths int32 `json:"num_access_paths"`
}

// NewResourceAccessUser instantiates a new ResourceAccessUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceAccessUser(resourceId string, userId string, accessLevel ResourceAccessLevel, fullName string, email string, expirationDate NullableTime, hasDirectAccess bool, numAccessPaths int32) *ResourceAccessUser {
	this := ResourceAccessUser{}
	this.ResourceId = resourceId
	this.UserId = userId
	this.AccessLevel = accessLevel
	this.FullName = fullName
	this.Email = email
	this.ExpirationDate = expirationDate
	this.HasDirectAccess = hasDirectAccess
	this.NumAccessPaths = numAccessPaths
	return &this
}

// NewResourceAccessUserWithDefaults instantiates a new ResourceAccessUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceAccessUserWithDefaults() *ResourceAccessUser {
	this := ResourceAccessUser{}
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *ResourceAccessUser) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *ResourceAccessUser) SetResourceId(v string) {
	o.ResourceId = v
}

// GetUserId returns the UserId field value
func (o *ResourceAccessUser) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ResourceAccessUser) SetUserId(v string) {
	o.UserId = v
}

// GetAccessLevel returns the AccessLevel field value
func (o *ResourceAccessUser) GetAccessLevel() ResourceAccessLevel {
	if o == nil {
		var ret ResourceAccessLevel
		return ret
	}

	return o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetAccessLevelOk() (*ResourceAccessLevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessLevel, true
}

// SetAccessLevel sets field value
func (o *ResourceAccessUser) SetAccessLevel(v ResourceAccessLevel) {
	o.AccessLevel = v
}

// GetFullName returns the FullName field value
func (o *ResourceAccessUser) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *ResourceAccessUser) SetFullName(v string) {
	o.FullName = v
}

// GetEmail returns the Email field value
func (o *ResourceAccessUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *ResourceAccessUser) SetEmail(v string) {
	o.Email = v
}

// GetExpirationDate returns the ExpirationDate field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ResourceAccessUser) GetExpirationDate() time.Time {
	if o == nil || o.ExpirationDate.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.ExpirationDate.Get()
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceAccessUser) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationDate.Get(), o.ExpirationDate.IsSet()
}

// SetExpirationDate sets field value
func (o *ResourceAccessUser) SetExpirationDate(v time.Time) {
	o.ExpirationDate.Set(&v)
}

// GetHasDirectAccess returns the HasDirectAccess field value
func (o *ResourceAccessUser) GetHasDirectAccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasDirectAccess
}

// GetHasDirectAccessOk returns a tuple with the HasDirectAccess field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetHasDirectAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasDirectAccess, true
}

// SetHasDirectAccess sets field value
func (o *ResourceAccessUser) SetHasDirectAccess(v bool) {
	o.HasDirectAccess = v
}

// GetNumAccessPaths returns the NumAccessPaths field value
func (o *ResourceAccessUser) GetNumAccessPaths() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumAccessPaths
}

// GetNumAccessPathsOk returns a tuple with the NumAccessPaths field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetNumAccessPathsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumAccessPaths, true
}

// SetNumAccessPaths sets field value
func (o *ResourceAccessUser) SetNumAccessPaths(v int32) {
	o.NumAccessPaths = v
}

func (o ResourceAccessUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resource_id"] = o.ResourceId
	}
	if true {
		toSerialize["user_id"] = o.UserId
	}
	if true {
		toSerialize["access_level"] = o.AccessLevel
	}
	if true {
		toSerialize["full_name"] = o.FullName
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["expiration_date"] = o.ExpirationDate.Get()
	}
	if true {
		toSerialize["has_direct_access"] = o.HasDirectAccess
	}
	if true {
		toSerialize["num_access_paths"] = o.NumAccessPaths
	}
	return json.Marshal(toSerialize)
}

type NullableResourceAccessUser struct {
	value *ResourceAccessUser
	isSet bool
}

func (v NullableResourceAccessUser) Get() *ResourceAccessUser {
	return v.value
}

func (v *NullableResourceAccessUser) Set(val *ResourceAccessUser) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceAccessUser) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceAccessUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceAccessUser(val *ResourceAccessUser) *NullableResourceAccessUser {
	return &NullableResourceAccessUser{value: val, isSet: true}
}

func (v NullableResourceAccessUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceAccessUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


