/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ResourceAccessUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceAccessUser{}

// ResourceAccessUser # Resource Access User Object ### Description The `ResourceAccessUser` object is used to represent a user with access to a resource, either directly or indirectly through group(s).  ### Usage Example Fetch from the `LIST ResourceUsers` endpoint.
type ResourceAccessUser struct {
	// The ID of the resource.
	ResourceId string `json:"resource_id"`
	// The ID of the user.
	UserId string `json:"user_id"`
	AccessLevel ResourceAccessLevel `json:"access_level"`
	// The user's full name.
	FullName string `json:"full_name"`
	// The user's email.
	Email string `json:"email"`
	// The day and time the user's access will expire.
	ExpirationDate *time.Time `json:"expiration_date,omitempty"`
	// The user has direct access to this resources (vs. indirectly, like through a group).
	HasDirectAccess bool `json:"has_direct_access"`
	// The number of ways in which the user has access through this resource (directly and indirectly).
	NumAccessPaths int32 `json:"num_access_paths"`
	PropagationStatus *PropagationStatus `json:"propagation_status,omitempty"`
}

type _ResourceAccessUser ResourceAccessUser

// NewResourceAccessUser instantiates a new ResourceAccessUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceAccessUser(resourceId string, userId string, accessLevel ResourceAccessLevel, fullName string, email string, hasDirectAccess bool, numAccessPaths int32) *ResourceAccessUser {
	this := ResourceAccessUser{}
	this.ResourceId = resourceId
	this.UserId = userId
	this.AccessLevel = accessLevel
	this.FullName = fullName
	this.Email = email
	this.HasDirectAccess = hasDirectAccess
	this.NumAccessPaths = numAccessPaths
	return &this
}

// NewResourceAccessUserWithDefaults instantiates a new ResourceAccessUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceAccessUserWithDefaults() *ResourceAccessUser {
	this := ResourceAccessUser{}
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *ResourceAccessUser) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *ResourceAccessUser) SetResourceId(v string) {
	o.ResourceId = v
}

// GetUserId returns the UserId field value
func (o *ResourceAccessUser) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ResourceAccessUser) SetUserId(v string) {
	o.UserId = v
}

// GetAccessLevel returns the AccessLevel field value
func (o *ResourceAccessUser) GetAccessLevel() ResourceAccessLevel {
	if o == nil {
		var ret ResourceAccessLevel
		return ret
	}

	return o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetAccessLevelOk() (*ResourceAccessLevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessLevel, true
}

// SetAccessLevel sets field value
func (o *ResourceAccessUser) SetAccessLevel(v ResourceAccessLevel) {
	o.AccessLevel = v
}

// GetFullName returns the FullName field value
func (o *ResourceAccessUser) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *ResourceAccessUser) SetFullName(v string) {
	o.FullName = v
}

// GetEmail returns the Email field value
func (o *ResourceAccessUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *ResourceAccessUser) SetEmail(v string) {
	o.Email = v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *ResourceAccessUser) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *ResourceAccessUser) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *ResourceAccessUser) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetHasDirectAccess returns the HasDirectAccess field value
func (o *ResourceAccessUser) GetHasDirectAccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasDirectAccess
}

// GetHasDirectAccessOk returns a tuple with the HasDirectAccess field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetHasDirectAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasDirectAccess, true
}

// SetHasDirectAccess sets field value
func (o *ResourceAccessUser) SetHasDirectAccess(v bool) {
	o.HasDirectAccess = v
}

// GetNumAccessPaths returns the NumAccessPaths field value
func (o *ResourceAccessUser) GetNumAccessPaths() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumAccessPaths
}

// GetNumAccessPathsOk returns a tuple with the NumAccessPaths field value
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetNumAccessPathsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumAccessPaths, true
}

// SetNumAccessPaths sets field value
func (o *ResourceAccessUser) SetNumAccessPaths(v int32) {
	o.NumAccessPaths = v
}

// GetPropagationStatus returns the PropagationStatus field value if set, zero value otherwise.
func (o *ResourceAccessUser) GetPropagationStatus() PropagationStatus {
	if o == nil || IsNil(o.PropagationStatus) {
		var ret PropagationStatus
		return ret
	}
	return *o.PropagationStatus
}

// GetPropagationStatusOk returns a tuple with the PropagationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAccessUser) GetPropagationStatusOk() (*PropagationStatus, bool) {
	if o == nil || IsNil(o.PropagationStatus) {
		return nil, false
	}
	return o.PropagationStatus, true
}

// HasPropagationStatus returns a boolean if a field has been set.
func (o *ResourceAccessUser) HasPropagationStatus() bool {
	if o != nil && !IsNil(o.PropagationStatus) {
		return true
	}

	return false
}

// SetPropagationStatus gets a reference to the given PropagationStatus and assigns it to the PropagationStatus field.
func (o *ResourceAccessUser) SetPropagationStatus(v PropagationStatus) {
	o.PropagationStatus = &v
}

func (o ResourceAccessUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceAccessUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["user_id"] = o.UserId
	toSerialize["access_level"] = o.AccessLevel
	toSerialize["full_name"] = o.FullName
	toSerialize["email"] = o.Email
	if !IsNil(o.ExpirationDate) {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	toSerialize["has_direct_access"] = o.HasDirectAccess
	toSerialize["num_access_paths"] = o.NumAccessPaths
	if !IsNil(o.PropagationStatus) {
		toSerialize["propagation_status"] = o.PropagationStatus
	}
	return toSerialize, nil
}

func (o *ResourceAccessUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resource_id",
		"user_id",
		"access_level",
		"full_name",
		"email",
		"has_direct_access",
		"num_access_paths",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceAccessUser := _ResourceAccessUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceAccessUser)

	if err != nil {
		return err
	}

	*o = ResourceAccessUser(varResourceAccessUser)

	return err
}

type NullableResourceAccessUser struct {
	value *ResourceAccessUser
	isSet bool
}

func (v NullableResourceAccessUser) Get() *ResourceAccessUser {
	return v.value
}

func (v *NullableResourceAccessUser) Set(val *ResourceAccessUser) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceAccessUser) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceAccessUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceAccessUser(val *ResourceAccessUser) *NullableResourceAccessUser {
	return &NullableResourceAccessUser{value: val, isSet: true}
}

func (v NullableResourceAccessUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceAccessUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


