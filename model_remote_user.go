/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the RemoteUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteUser{}

// RemoteUser # RemoteUser Object ### Description The `RemoteUser` object is used to represent a remote user.
type RemoteUser struct {
	// The ID of the user.
	UserId string `json:"user_id"`
	// The ID of the remote user.
	RemoteId string `json:"remote_id"`
	// The third party provider of the remote user.
	ThirdPartyProvider ThirdPartyProviderEnum `json:"third_party_provider"`
	AdditionalProperties map[string]interface{}
}

type _RemoteUser RemoteUser

// NewRemoteUser instantiates a new RemoteUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteUser(userId string, remoteId string, thirdPartyProvider ThirdPartyProviderEnum) *RemoteUser {
	this := RemoteUser{}
	this.UserId = userId
	this.RemoteId = remoteId
	this.ThirdPartyProvider = thirdPartyProvider
	return &this
}

// NewRemoteUserWithDefaults instantiates a new RemoteUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteUserWithDefaults() *RemoteUser {
	this := RemoteUser{}
	return &this
}

// GetUserId returns the UserId field value
func (o *RemoteUser) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *RemoteUser) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *RemoteUser) SetUserId(v string) {
	o.UserId = v
}

// GetRemoteId returns the RemoteId field value
func (o *RemoteUser) GetRemoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteId
}

// GetRemoteIdOk returns a tuple with the RemoteId field value
// and a boolean to check if the value has been set.
func (o *RemoteUser) GetRemoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteId, true
}

// SetRemoteId sets field value
func (o *RemoteUser) SetRemoteId(v string) {
	o.RemoteId = v
}

// GetThirdPartyProvider returns the ThirdPartyProvider field value
func (o *RemoteUser) GetThirdPartyProvider() ThirdPartyProviderEnum {
	if o == nil {
		var ret ThirdPartyProviderEnum
		return ret
	}

	return o.ThirdPartyProvider
}

// GetThirdPartyProviderOk returns a tuple with the ThirdPartyProvider field value
// and a boolean to check if the value has been set.
func (o *RemoteUser) GetThirdPartyProviderOk() (*ThirdPartyProviderEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThirdPartyProvider, true
}

// SetThirdPartyProvider sets field value
func (o *RemoteUser) SetThirdPartyProvider(v ThirdPartyProviderEnum) {
	o.ThirdPartyProvider = v
}

func (o RemoteUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user_id"] = o.UserId
	toSerialize["remote_id"] = o.RemoteId
	toSerialize["third_party_provider"] = o.ThirdPartyProvider

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RemoteUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_id",
		"remote_id",
		"third_party_provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRemoteUser := _RemoteUser{}

	err = json.Unmarshal(data, &varRemoteUser)

	if err != nil {
		return err
	}

	*o = RemoteUser(varRemoteUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "remote_id")
		delete(additionalProperties, "third_party_provider")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRemoteUser struct {
	value *RemoteUser
	isSet bool
}

func (v NullableRemoteUser) Get() *RemoteUser {
	return v.value
}

func (v *NullableRemoteUser) Set(val *RemoteUser) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteUser) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteUser(val *RemoteUser) *NullableRemoteUser {
	return &NullableRemoteUser{value: val, isSet: true}
}

func (v NullableRemoteUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


