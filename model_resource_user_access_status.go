/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
)

// checks if the ResourceUserAccessStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceUserAccessStatus{}

// ResourceUserAccessStatus # AccessStatus Object ### Description The `AccessStatus` object is used to represent the user's access to the resource.  ### Usage Example View the `AccessStatus` for a resource/user pair to determine if the user has access to the resource.
type ResourceUserAccessStatus struct {
	// The ID of the resource.
	ResourceId string `json:"resource_id"`
	// The ID of the user.
	UserId string `json:"user_id"`
	AccessLevel *ResourceAccessLevel `json:"access_level,omitempty"`
	Status ResourceUserAccessStatusEnum `json:"status"`
	// The day and time the user's access will expire.
	ExpirationDate NullableTime `json:"expiration_date"`
}

// NewResourceUserAccessStatus instantiates a new ResourceUserAccessStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceUserAccessStatus(resourceId string, userId string, status ResourceUserAccessStatusEnum, expirationDate NullableTime) *ResourceUserAccessStatus {
	this := ResourceUserAccessStatus{}
	this.ResourceId = resourceId
	this.UserId = userId
	this.Status = status
	this.ExpirationDate = expirationDate
	return &this
}

// NewResourceUserAccessStatusWithDefaults instantiates a new ResourceUserAccessStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceUserAccessStatusWithDefaults() *ResourceUserAccessStatus {
	this := ResourceUserAccessStatus{}
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *ResourceUserAccessStatus) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceUserAccessStatus) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *ResourceUserAccessStatus) SetResourceId(v string) {
	o.ResourceId = v
}

// GetUserId returns the UserId field value
func (o *ResourceUserAccessStatus) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ResourceUserAccessStatus) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ResourceUserAccessStatus) SetUserId(v string) {
	o.UserId = v
}

// GetAccessLevel returns the AccessLevel field value if set, zero value otherwise.
func (o *ResourceUserAccessStatus) GetAccessLevel() ResourceAccessLevel {
	if o == nil || IsNil(o.AccessLevel) {
		var ret ResourceAccessLevel
		return ret
	}
	return *o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUserAccessStatus) GetAccessLevelOk() (*ResourceAccessLevel, bool) {
	if o == nil || IsNil(o.AccessLevel) {
		return nil, false
	}
	return o.AccessLevel, true
}

// HasAccessLevel returns a boolean if a field has been set.
func (o *ResourceUserAccessStatus) HasAccessLevel() bool {
	if o != nil && !IsNil(o.AccessLevel) {
		return true
	}

	return false
}

// SetAccessLevel gets a reference to the given ResourceAccessLevel and assigns it to the AccessLevel field.
func (o *ResourceUserAccessStatus) SetAccessLevel(v ResourceAccessLevel) {
	o.AccessLevel = &v
}

// GetStatus returns the Status field value
func (o *ResourceUserAccessStatus) GetStatus() ResourceUserAccessStatusEnum {
	if o == nil {
		var ret ResourceUserAccessStatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ResourceUserAccessStatus) GetStatusOk() (*ResourceUserAccessStatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ResourceUserAccessStatus) SetStatus(v ResourceUserAccessStatusEnum) {
	o.Status = v
}

// GetExpirationDate returns the ExpirationDate field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ResourceUserAccessStatus) GetExpirationDate() time.Time {
	if o == nil || o.ExpirationDate.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.ExpirationDate.Get()
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceUserAccessStatus) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationDate.Get(), o.ExpirationDate.IsSet()
}

// SetExpirationDate sets field value
func (o *ResourceUserAccessStatus) SetExpirationDate(v time.Time) {
	o.ExpirationDate.Set(&v)
}

func (o ResourceUserAccessStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceUserAccessStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["user_id"] = o.UserId
	if !IsNil(o.AccessLevel) {
		toSerialize["access_level"] = o.AccessLevel
	}
	toSerialize["status"] = o.Status
	toSerialize["expiration_date"] = o.ExpirationDate.Get()
	return toSerialize, nil
}

type NullableResourceUserAccessStatus struct {
	value *ResourceUserAccessStatus
	isSet bool
}

func (v NullableResourceUserAccessStatus) Get() *ResourceUserAccessStatus {
	return v.value
}

func (v *NullableResourceUserAccessStatus) Set(val *ResourceUserAccessStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceUserAccessStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceUserAccessStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceUserAccessStatus(val *ResourceUserAccessStatus) *NullableResourceUserAccessStatus {
	return &NullableResourceUserAccessStatus{value: val, isSet: true}
}

func (v NullableResourceUserAccessStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceUserAccessStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


