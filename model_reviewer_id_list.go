/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the ReviewerIDList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReviewerIDList{}

// ReviewerIDList A list of reviewer IDs.
type ReviewerIDList struct {
	ReviewerIds []string `json:"reviewer_ids"`
	AdditionalProperties map[string]interface{}
}

type _ReviewerIDList ReviewerIDList

// NewReviewerIDList instantiates a new ReviewerIDList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewerIDList(reviewerIds []string) *ReviewerIDList {
	this := ReviewerIDList{}
	this.ReviewerIds = reviewerIds
	return &this
}

// NewReviewerIDListWithDefaults instantiates a new ReviewerIDList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewerIDListWithDefaults() *ReviewerIDList {
	this := ReviewerIDList{}
	return &this
}

// GetReviewerIds returns the ReviewerIds field value
func (o *ReviewerIDList) GetReviewerIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ReviewerIds
}

// GetReviewerIdsOk returns a tuple with the ReviewerIds field value
// and a boolean to check if the value has been set.
func (o *ReviewerIDList) GetReviewerIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReviewerIds, true
}

// SetReviewerIds sets field value
func (o *ReviewerIDList) SetReviewerIds(v []string) {
	o.ReviewerIds = v
}

func (o ReviewerIDList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReviewerIDList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reviewer_ids"] = o.ReviewerIds

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReviewerIDList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reviewer_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReviewerIDList := _ReviewerIDList{}

	err = json.Unmarshal(data, &varReviewerIDList)

	if err != nil {
		return err
	}

	*o = ReviewerIDList(varReviewerIDList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "reviewer_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReviewerIDList struct {
	value *ReviewerIDList
	isSet bool
}

func (v NullableReviewerIDList) Get() *ReviewerIDList {
	return v.value
}

func (v *NullableReviewerIDList) Set(val *ReviewerIDList) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewerIDList) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewerIDList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewerIDList(val *ReviewerIDList) *NullableReviewerIDList {
	return &NullableReviewerIDList{value: val, isSet: true}
}

func (v NullableReviewerIDList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewerIDList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


