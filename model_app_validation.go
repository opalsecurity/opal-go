/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AppValidation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppValidation{}

// AppValidation # App validation object ### Description The `AppValidation` object is used to represent a validation check of an apps' configuration and permissions.  ### Usage Example List from the `GET Apps` endpoint.
type AppValidation struct {
	// The key of the app validation. These are not unique IDs between runs.
	Key string `json:"key"`
	Name interface{} `json:"name"`
	// The reason for needing the validation.
	UsageReason *string `json:"usage_reason,omitempty"`
	// Extra details regarding the validation. Could be an error message or restrictions on permissions.
	Details *string `json:"details,omitempty"`
	Severity AppValidationSeverityEnum `json:"severity"`
	Status AppValidationStatusEnum `json:"status"`
	// The date and time the app validation was last run.
	UpdatedAt time.Time `json:"updated_at"`
}

type _AppValidation AppValidation

// NewAppValidation instantiates a new AppValidation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppValidation(key string, name interface{}, severity AppValidationSeverityEnum, status AppValidationStatusEnum, updatedAt time.Time) *AppValidation {
	this := AppValidation{}
	this.Key = key
	this.Name = name
	this.Severity = severity
	this.Status = status
	this.UpdatedAt = updatedAt
	return &this
}

// NewAppValidationWithDefaults instantiates a new AppValidation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppValidationWithDefaults() *AppValidation {
	this := AppValidation{}
	return &this
}

// GetKey returns the Key field value
func (o *AppValidation) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *AppValidation) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *AppValidation) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *AppValidation) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppValidation) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppValidation) SetName(v interface{}) {
	o.Name = v
}

// GetUsageReason returns the UsageReason field value if set, zero value otherwise.
func (o *AppValidation) GetUsageReason() string {
	if o == nil || IsNil(o.UsageReason) {
		var ret string
		return ret
	}
	return *o.UsageReason
}

// GetUsageReasonOk returns a tuple with the UsageReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppValidation) GetUsageReasonOk() (*string, bool) {
	if o == nil || IsNil(o.UsageReason) {
		return nil, false
	}
	return o.UsageReason, true
}

// HasUsageReason returns a boolean if a field has been set.
func (o *AppValidation) HasUsageReason() bool {
	if o != nil && !IsNil(o.UsageReason) {
		return true
	}

	return false
}

// SetUsageReason gets a reference to the given string and assigns it to the UsageReason field.
func (o *AppValidation) SetUsageReason(v string) {
	o.UsageReason = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *AppValidation) GetDetails() string {
	if o == nil || IsNil(o.Details) {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppValidation) GetDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *AppValidation) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *AppValidation) SetDetails(v string) {
	o.Details = &v
}

// GetSeverity returns the Severity field value
func (o *AppValidation) GetSeverity() AppValidationSeverityEnum {
	if o == nil {
		var ret AppValidationSeverityEnum
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *AppValidation) GetSeverityOk() (*AppValidationSeverityEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *AppValidation) SetSeverity(v AppValidationSeverityEnum) {
	o.Severity = v
}

// GetStatus returns the Status field value
func (o *AppValidation) GetStatus() AppValidationStatusEnum {
	if o == nil {
		var ret AppValidationStatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AppValidation) GetStatusOk() (*AppValidationStatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AppValidation) SetStatus(v AppValidationStatusEnum) {
	o.Status = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *AppValidation) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *AppValidation) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *AppValidation) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o AppValidation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppValidation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.UsageReason) {
		toSerialize["usage_reason"] = o.UsageReason
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	toSerialize["severity"] = o.Severity
	toSerialize["status"] = o.Status
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *AppValidation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"name",
		"severity",
		"status",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppValidation := _AppValidation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppValidation)

	if err != nil {
		return err
	}

	*o = AppValidation(varAppValidation)

	return err
}

type NullableAppValidation struct {
	value *AppValidation
	isSet bool
}

func (v NullableAppValidation) Get() *AppValidation {
	return v.value
}

func (v *NullableAppValidation) Set(val *AppValidation) {
	v.value = val
	v.isSet = true
}

func (v NullableAppValidation) IsSet() bool {
	return v.isSet
}

func (v *NullableAppValidation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppValidation(val *AppValidation) *NullableAppValidation {
	return &NullableAppValidation{value: val, isSet: true}
}

func (v NullableAppValidation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppValidation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


