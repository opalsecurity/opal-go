/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ScopedRolePermissionsAPIService ScopedRolePermissionsAPI service
type ScopedRolePermissionsAPIService service

type ApiGetResourceScopedRolePermissionsRequest struct {
	ctx context.Context
	ApiService *ScopedRolePermissionsAPIService
	resourceId string
}

func (r ApiGetResourceScopedRolePermissionsRequest) Execute() (*ScopedRolePermissionList, *http.Response, error) {
	return r.ApiService.GetResourceScopedRolePermissionsExecute(r)
}

/*
GetResourceScopedRolePermissions Method for GetResourceScopedRolePermissions

Returns all the scoped role permissions that apply to the given resource. Only OPAL_SCOPED_ROLE resource type supports this field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourceId The ID of the resource whose scoped role permissions belong to.
 @return ApiGetResourceScopedRolePermissionsRequest
*/
func (a *ScopedRolePermissionsAPIService) GetResourceScopedRolePermissions(ctx context.Context, resourceId string) ApiGetResourceScopedRolePermissionsRequest {
	return ApiGetResourceScopedRolePermissionsRequest{
		ApiService: a,
		ctx: ctx,
		resourceId: resourceId,
	}
}

// Execute executes the request
//  @return ScopedRolePermissionList
func (a *ScopedRolePermissionsAPIService) GetResourceScopedRolePermissionsExecute(r ApiGetResourceScopedRolePermissionsRequest) (*ScopedRolePermissionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScopedRolePermissionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScopedRolePermissionsAPIService.GetResourceScopedRolePermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resources/{resource_id}/scoped-role-permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetResourceScopedRolePermissionsRequest struct {
	ctx context.Context
	ApiService *ScopedRolePermissionsAPIService
	resourceId string
	scopedRolePermissionList *ScopedRolePermissionList
}

func (r ApiSetResourceScopedRolePermissionsRequest) ScopedRolePermissionList(scopedRolePermissionList ScopedRolePermissionList) ApiSetResourceScopedRolePermissionsRequest {
	r.scopedRolePermissionList = &scopedRolePermissionList
	return r
}

func (r ApiSetResourceScopedRolePermissionsRequest) Execute() (*ScopedRolePermissionList, *http.Response, error) {
	return r.ApiService.SetResourceScopedRolePermissionsExecute(r)
}

/*
SetResourceScopedRolePermissions Method for SetResourceScopedRolePermissions

Sets all the scoped role permissions on an OPAL_SCOPED_ROLE resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourceId The ID of the resource whose scoped role permissions belong to. Must be of OPAL_SCOPED_ROLE resource type.
 @return ApiSetResourceScopedRolePermissionsRequest
*/
func (a *ScopedRolePermissionsAPIService) SetResourceScopedRolePermissions(ctx context.Context, resourceId string) ApiSetResourceScopedRolePermissionsRequest {
	return ApiSetResourceScopedRolePermissionsRequest{
		ApiService: a,
		ctx: ctx,
		resourceId: resourceId,
	}
}

// Execute executes the request
//  @return ScopedRolePermissionList
func (a *ScopedRolePermissionsAPIService) SetResourceScopedRolePermissionsExecute(r ApiSetResourceScopedRolePermissionsRequest) (*ScopedRolePermissionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScopedRolePermissionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScopedRolePermissionsAPIService.SetResourceScopedRolePermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resources/{resource_id}/scoped-role-permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.scopedRolePermissionList == nil {
		return localVarReturnValue, nil, reportError("scopedRolePermissionList is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.scopedRolePermissionList
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
