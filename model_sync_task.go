/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SyncTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncTask{}

// SyncTask Represents a sync task that has been completed, either successfully or with errors.
type SyncTask struct {
	// The ID of the sync task.
	Id string `json:"id"`
	// The time when the sync task was completed.
	CompletedAt time.Time `json:"completed_at"`
}

type _SyncTask SyncTask

// NewSyncTask instantiates a new SyncTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncTask(id string, completedAt time.Time) *SyncTask {
	this := SyncTask{}
	this.Id = id
	this.CompletedAt = completedAt
	return &this
}

// NewSyncTaskWithDefaults instantiates a new SyncTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncTaskWithDefaults() *SyncTask {
	this := SyncTask{}
	return &this
}

// GetId returns the Id field value
func (o *SyncTask) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SyncTask) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SyncTask) SetId(v string) {
	o.Id = v
}

// GetCompletedAt returns the CompletedAt field value
func (o *SyncTask) GetCompletedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value
// and a boolean to check if the value has been set.
func (o *SyncTask) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompletedAt, true
}

// SetCompletedAt sets field value
func (o *SyncTask) SetCompletedAt(v time.Time) {
	o.CompletedAt = v
}

func (o SyncTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["completed_at"] = o.CompletedAt
	return toSerialize, nil
}

func (o *SyncTask) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"completed_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSyncTask := _SyncTask{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSyncTask)

	if err != nil {
		return err
	}

	*o = SyncTask(varSyncTask)

	return err
}

type NullableSyncTask struct {
	value *SyncTask
	isSet bool
}

func (v NullableSyncTask) Get() *SyncTask {
	return v.value
}

func (v *NullableSyncTask) Set(val *SyncTask) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncTask) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncTask(val *SyncTask) *NullableSyncTask {
	return &NullableSyncTask{value: val, isSet: true}
}

func (v NullableSyncTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


