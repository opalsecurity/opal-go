/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// ReviewerStage A reviewer stage.
type ReviewerStage struct {
	// Whether this reviewer stage should require manager approval.
	RequireManagerApproval bool `json:"require_manager_approval"`
	// The operator of the reviewer stage.
	Operator string `json:"operator"`
	OwnerIds []string `json:"owner_ids"`
}

// NewReviewerStage instantiates a new ReviewerStage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewerStage(requireManagerApproval bool, operator string, ownerIds []string) *ReviewerStage {
	this := ReviewerStage{}
	this.RequireManagerApproval = requireManagerApproval
	this.Operator = operator
	this.OwnerIds = ownerIds
	return &this
}

// NewReviewerStageWithDefaults instantiates a new ReviewerStage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewerStageWithDefaults() *ReviewerStage {
	this := ReviewerStage{}
	return &this
}

// GetRequireManagerApproval returns the RequireManagerApproval field value
func (o *ReviewerStage) GetRequireManagerApproval() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RequireManagerApproval
}

// GetRequireManagerApprovalOk returns a tuple with the RequireManagerApproval field value
// and a boolean to check if the value has been set.
func (o *ReviewerStage) GetRequireManagerApprovalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequireManagerApproval, true
}

// SetRequireManagerApproval sets field value
func (o *ReviewerStage) SetRequireManagerApproval(v bool) {
	o.RequireManagerApproval = v
}

// GetOperator returns the Operator field value
func (o *ReviewerStage) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *ReviewerStage) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *ReviewerStage) SetOperator(v string) {
	o.Operator = v
}

// GetOwnerIds returns the OwnerIds field value
func (o *ReviewerStage) GetOwnerIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OwnerIds
}

// GetOwnerIdsOk returns a tuple with the OwnerIds field value
// and a boolean to check if the value has been set.
func (o *ReviewerStage) GetOwnerIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerIds, true
}

// SetOwnerIds sets field value
func (o *ReviewerStage) SetOwnerIds(v []string) {
	o.OwnerIds = v
}

func (o ReviewerStage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["require_manager_approval"] = o.RequireManagerApproval
	}
	if true {
		toSerialize["operator"] = o.Operator
	}
	if true {
		toSerialize["owner_ids"] = o.OwnerIds
	}
	return json.Marshal(toSerialize)
}

type NullableReviewerStage struct {
	value *ReviewerStage
	isSet bool
}

func (v NullableReviewerStage) Get() *ReviewerStage {
	return v.value
}

func (v *NullableReviewerStage) Set(val *ReviewerStage) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewerStage) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewerStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewerStage(val *ReviewerStage) *NullableReviewerStage {
	return &NullableReviewerStage{value: val, isSet: true}
}

func (v NullableReviewerStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewerStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


