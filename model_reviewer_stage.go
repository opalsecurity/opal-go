/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReviewerStage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReviewerStage{}

// ReviewerStage A reviewer stage.
type ReviewerStage struct {
	// Whether this reviewer stage should require manager approval.
	RequireManagerApproval bool `json:"require_manager_approval"`
	// Whether this reviewer stage should require admin approval.
	RequireAdminApproval *bool `json:"require_admin_approval,omitempty"`
	// The operator of the reviewer stage. Admin and manager approval are also treated as reviewers.
	Operator string `json:"operator"`
	OwnerIds []string `json:"owner_ids"`
}

type _ReviewerStage ReviewerStage

// NewReviewerStage instantiates a new ReviewerStage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewerStage(requireManagerApproval bool, operator string, ownerIds []string) *ReviewerStage {
	this := ReviewerStage{}
	this.RequireManagerApproval = requireManagerApproval
	this.Operator = operator
	this.OwnerIds = ownerIds
	return &this
}

// NewReviewerStageWithDefaults instantiates a new ReviewerStage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewerStageWithDefaults() *ReviewerStage {
	this := ReviewerStage{}
	return &this
}

// GetRequireManagerApproval returns the RequireManagerApproval field value
func (o *ReviewerStage) GetRequireManagerApproval() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RequireManagerApproval
}

// GetRequireManagerApprovalOk returns a tuple with the RequireManagerApproval field value
// and a boolean to check if the value has been set.
func (o *ReviewerStage) GetRequireManagerApprovalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequireManagerApproval, true
}

// SetRequireManagerApproval sets field value
func (o *ReviewerStage) SetRequireManagerApproval(v bool) {
	o.RequireManagerApproval = v
}

// GetRequireAdminApproval returns the RequireAdminApproval field value if set, zero value otherwise.
func (o *ReviewerStage) GetRequireAdminApproval() bool {
	if o == nil || IsNil(o.RequireAdminApproval) {
		var ret bool
		return ret
	}
	return *o.RequireAdminApproval
}

// GetRequireAdminApprovalOk returns a tuple with the RequireAdminApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewerStage) GetRequireAdminApprovalOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireAdminApproval) {
		return nil, false
	}
	return o.RequireAdminApproval, true
}

// HasRequireAdminApproval returns a boolean if a field has been set.
func (o *ReviewerStage) HasRequireAdminApproval() bool {
	if o != nil && !IsNil(o.RequireAdminApproval) {
		return true
	}

	return false
}

// SetRequireAdminApproval gets a reference to the given bool and assigns it to the RequireAdminApproval field.
func (o *ReviewerStage) SetRequireAdminApproval(v bool) {
	o.RequireAdminApproval = &v
}

// GetOperator returns the Operator field value
func (o *ReviewerStage) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *ReviewerStage) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *ReviewerStage) SetOperator(v string) {
	o.Operator = v
}

// GetOwnerIds returns the OwnerIds field value
func (o *ReviewerStage) GetOwnerIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OwnerIds
}

// GetOwnerIdsOk returns a tuple with the OwnerIds field value
// and a boolean to check if the value has been set.
func (o *ReviewerStage) GetOwnerIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerIds, true
}

// SetOwnerIds sets field value
func (o *ReviewerStage) SetOwnerIds(v []string) {
	o.OwnerIds = v
}

func (o ReviewerStage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReviewerStage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["require_manager_approval"] = o.RequireManagerApproval
	if !IsNil(o.RequireAdminApproval) {
		toSerialize["require_admin_approval"] = o.RequireAdminApproval
	}
	toSerialize["operator"] = o.Operator
	toSerialize["owner_ids"] = o.OwnerIds
	return toSerialize, nil
}

func (o *ReviewerStage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"require_manager_approval",
		"operator",
		"owner_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReviewerStage := _ReviewerStage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReviewerStage)

	if err != nil {
		return err
	}

	*o = ReviewerStage(varReviewerStage)

	return err
}

type NullableReviewerStage struct {
	value *ReviewerStage
	isSet bool
}

func (v NullableReviewerStage) Get() *ReviewerStage {
	return v.value
}

func (v *NullableReviewerStage) Set(val *ReviewerStage) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewerStage) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewerStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewerStage(val *ReviewerStage) *NullableReviewerStage {
	return &NullableReviewerStage{value: val, isSet: true}
}

func (v NullableReviewerStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewerStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


