/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// RolePermissionTargetTypeEnum The type of the target for the role permission.
type RolePermissionTargetTypeEnum string

// List of RolePermissionTargetTypeEnum
const (
	ROLEPERMISSIONTARGETTYPEENUM_RESOURCE RolePermissionTargetTypeEnum = "RESOURCE"
	ROLEPERMISSIONTARGETTYPEENUM_CONNECTION RolePermissionTargetTypeEnum = "CONNECTION"
	ROLEPERMISSIONTARGETTYPEENUM_GROUP RolePermissionTargetTypeEnum = "GROUP"
	ROLEPERMISSIONTARGETTYPEENUM_BUNDLE RolePermissionTargetTypeEnum = "BUNDLE"
	ROLEPERMISSIONTARGETTYPEENUM_USER RolePermissionTargetTypeEnum = "USER"
	ROLEPERMISSIONTARGETTYPEENUM_ACCESS_REVIEW RolePermissionTargetTypeEnum = "ACCESS_REVIEW"
)

// All allowed values of RolePermissionTargetTypeEnum enum
var AllowedRolePermissionTargetTypeEnumEnumValues = []RolePermissionTargetTypeEnum{
	"RESOURCE",
	"CONNECTION",
	"GROUP",
	"BUNDLE",
	"USER",
	"ACCESS_REVIEW",
}

func (v *RolePermissionTargetTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RolePermissionTargetTypeEnum(value)
	for _, existing := range AllowedRolePermissionTargetTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RolePermissionTargetTypeEnum", value)
}

// NewRolePermissionTargetTypeEnumFromValue returns a pointer to a valid RolePermissionTargetTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRolePermissionTargetTypeEnumFromValue(v string) (*RolePermissionTargetTypeEnum, error) {
	ev := RolePermissionTargetTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RolePermissionTargetTypeEnum: valid values are %v", v, AllowedRolePermissionTargetTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RolePermissionTargetTypeEnum) IsValid() bool {
	for _, existing := range AllowedRolePermissionTargetTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RolePermissionTargetTypeEnum value
func (v RolePermissionTargetTypeEnum) Ptr() *RolePermissionTargetTypeEnum {
	return &v
}

type NullableRolePermissionTargetTypeEnum struct {
	value *RolePermissionTargetTypeEnum
	isSet bool
}

func (v NullableRolePermissionTargetTypeEnum) Get() *RolePermissionTargetTypeEnum {
	return v.value
}

func (v *NullableRolePermissionTargetTypeEnum) Set(val *RolePermissionTargetTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRolePermissionTargetTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRolePermissionTargetTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolePermissionTargetTypeEnum(val *RolePermissionTargetTypeEnum) *NullableRolePermissionTargetTypeEnum {
	return &NullableRolePermissionTargetTypeEnum{value: val, isSet: true}
}

func (v NullableRolePermissionTargetTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolePermissionTargetTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

