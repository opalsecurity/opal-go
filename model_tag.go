/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
)

// Tag # Tag Object ### Description The `Tag` object is used to represent a tag.  ### Usage Example Get tags from the `GET Tag` endpoint.
type Tag struct {
	// The ID of the tag.
	TagId string `json:"tag_id"`
	// The date the tag was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date the tag was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The ID of the user that created the tag.
	UserCreatorId *string `json:"user_creator_id,omitempty"`
	// The ID of the team that owns the tag.
	OwnerTeamId *string `json:"owner_team_id,omitempty"`
	// The key of the tag.
	Key *string `json:"key,omitempty"`
	// The value of the tag.
	Value *string `json:"value,omitempty"`
}

// NewTag instantiates a new Tag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTag(tagId string) *Tag {
	this := Tag{}
	this.TagId = tagId
	return &this
}

// NewTagWithDefaults instantiates a new Tag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagWithDefaults() *Tag {
	this := Tag{}
	return &this
}

// GetTagId returns the TagId field value
func (o *Tag) GetTagId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TagId
}

// GetTagIdOk returns a tuple with the TagId field value
// and a boolean to check if the value has been set.
func (o *Tag) GetTagIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TagId, true
}

// SetTagId sets field value
func (o *Tag) SetTagId(v string) {
	o.TagId = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Tag) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Tag) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Tag) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Tag) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Tag) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Tag) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUserCreatorId returns the UserCreatorId field value if set, zero value otherwise.
func (o *Tag) GetUserCreatorId() string {
	if o == nil || o.UserCreatorId == nil {
		var ret string
		return ret
	}
	return *o.UserCreatorId
}

// GetUserCreatorIdOk returns a tuple with the UserCreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetUserCreatorIdOk() (*string, bool) {
	if o == nil || o.UserCreatorId == nil {
		return nil, false
	}
	return o.UserCreatorId, true
}

// HasUserCreatorId returns a boolean if a field has been set.
func (o *Tag) HasUserCreatorId() bool {
	if o != nil && o.UserCreatorId != nil {
		return true
	}

	return false
}

// SetUserCreatorId gets a reference to the given string and assigns it to the UserCreatorId field.
func (o *Tag) SetUserCreatorId(v string) {
	o.UserCreatorId = &v
}

// GetOwnerTeamId returns the OwnerTeamId field value if set, zero value otherwise.
func (o *Tag) GetOwnerTeamId() string {
	if o == nil || o.OwnerTeamId == nil {
		var ret string
		return ret
	}
	return *o.OwnerTeamId
}

// GetOwnerTeamIdOk returns a tuple with the OwnerTeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetOwnerTeamIdOk() (*string, bool) {
	if o == nil || o.OwnerTeamId == nil {
		return nil, false
	}
	return o.OwnerTeamId, true
}

// HasOwnerTeamId returns a boolean if a field has been set.
func (o *Tag) HasOwnerTeamId() bool {
	if o != nil && o.OwnerTeamId != nil {
		return true
	}

	return false
}

// SetOwnerTeamId gets a reference to the given string and assigns it to the OwnerTeamId field.
func (o *Tag) SetOwnerTeamId(v string) {
	o.OwnerTeamId = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Tag) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Tag) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Tag) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Tag) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Tag) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Tag) SetValue(v string) {
	o.Value = &v
}

func (o Tag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tag_id"] = o.TagId
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.UserCreatorId != nil {
		toSerialize["user_creator_id"] = o.UserCreatorId
	}
	if o.OwnerTeamId != nil {
		toSerialize["owner_team_id"] = o.OwnerTeamId
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableTag struct {
	value *Tag
	isSet bool
}

func (v NullableTag) Get() *Tag {
	return v.value
}

func (v *NullableTag) Set(val *Tag) {
	v.value = val
	v.isSet = true
}

func (v NullableTag) IsSet() bool {
	return v.isSet
}

func (v *NullableTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTag(val *Tag) *NullableTag {
	return &NullableTag{value: val, isSet: true}
}

func (v NullableTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


