/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccessRuleCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessRuleCondition{}

// AccessRuleCondition # Access Rule Config Object ### Description The `AccessRuleConfig` object is used to represent an access rule configuration.  ### Usage Example Get access rule configurations from the `GET Access Rule Configs` endpoint.
type AccessRuleCondition struct {
	// The status of the access rule.
	Status string `json:"status"`
	RuleClauses RuleClauses `json:"ruleClauses"`
}

type _AccessRuleCondition AccessRuleCondition

// NewAccessRuleCondition instantiates a new AccessRuleCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessRuleCondition(status string, ruleClauses RuleClauses) *AccessRuleCondition {
	this := AccessRuleCondition{}
	this.Status = status
	this.RuleClauses = ruleClauses
	return &this
}

// NewAccessRuleConditionWithDefaults instantiates a new AccessRuleCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessRuleConditionWithDefaults() *AccessRuleCondition {
	this := AccessRuleCondition{}
	return &this
}

// GetStatus returns the Status field value
func (o *AccessRuleCondition) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AccessRuleCondition) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AccessRuleCondition) SetStatus(v string) {
	o.Status = v
}

// GetRuleClauses returns the RuleClauses field value
func (o *AccessRuleCondition) GetRuleClauses() RuleClauses {
	if o == nil {
		var ret RuleClauses
		return ret
	}

	return o.RuleClauses
}

// GetRuleClausesOk returns a tuple with the RuleClauses field value
// and a boolean to check if the value has been set.
func (o *AccessRuleCondition) GetRuleClausesOk() (*RuleClauses, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleClauses, true
}

// SetRuleClauses sets field value
func (o *AccessRuleCondition) SetRuleClauses(v RuleClauses) {
	o.RuleClauses = v
}

func (o AccessRuleCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessRuleCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["ruleClauses"] = o.RuleClauses
	return toSerialize, nil
}

func (o *AccessRuleCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"ruleClauses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessRuleCondition := _AccessRuleCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccessRuleCondition)

	if err != nil {
		return err
	}

	*o = AccessRuleCondition(varAccessRuleCondition)

	return err
}

type NullableAccessRuleCondition struct {
	value *AccessRuleCondition
	isSet bool
}

func (v NullableAccessRuleCondition) Get() *AccessRuleCondition {
	return v.value
}

func (v *NullableAccessRuleCondition) Set(val *AccessRuleCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessRuleCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessRuleCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessRuleCondition(val *AccessRuleCondition) *NullableAccessRuleCondition {
	return &NullableAccessRuleCondition{value: val, isSet: true}
}

func (v NullableAccessRuleCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessRuleCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


