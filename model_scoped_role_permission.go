/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the ScopedRolePermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopedRolePermission{}

// ScopedRolePermission struct for ScopedRolePermission
type ScopedRolePermission struct {
	// The IDs of the entities that this permission applies to. If empty of missing, the permission will have untargeted scope.
	TargetIds []string `json:"target_ids,omitempty"`
	TargetType RolePermissionTargetTypeEnum `json:"target_type"`
	PermissionName RolePermissionNameEnum `json:"permission_name"`
	AllowAll bool `json:"allow_all"`
	AdditionalProperties map[string]interface{}
}

type _ScopedRolePermission ScopedRolePermission

// NewScopedRolePermission instantiates a new ScopedRolePermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopedRolePermission(targetType RolePermissionTargetTypeEnum, permissionName RolePermissionNameEnum, allowAll bool) *ScopedRolePermission {
	this := ScopedRolePermission{}
	this.TargetType = targetType
	this.PermissionName = permissionName
	this.AllowAll = allowAll
	return &this
}

// NewScopedRolePermissionWithDefaults instantiates a new ScopedRolePermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopedRolePermissionWithDefaults() *ScopedRolePermission {
	this := ScopedRolePermission{}
	return &this
}

// GetTargetIds returns the TargetIds field value if set, zero value otherwise.
func (o *ScopedRolePermission) GetTargetIds() []string {
	if o == nil || IsNil(o.TargetIds) {
		var ret []string
		return ret
	}
	return o.TargetIds
}

// GetTargetIdsOk returns a tuple with the TargetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopedRolePermission) GetTargetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TargetIds) {
		return nil, false
	}
	return o.TargetIds, true
}

// HasTargetIds returns a boolean if a field has been set.
func (o *ScopedRolePermission) HasTargetIds() bool {
	if o != nil && !IsNil(o.TargetIds) {
		return true
	}

	return false
}

// SetTargetIds gets a reference to the given []string and assigns it to the TargetIds field.
func (o *ScopedRolePermission) SetTargetIds(v []string) {
	o.TargetIds = v
}

// GetTargetType returns the TargetType field value
func (o *ScopedRolePermission) GetTargetType() RolePermissionTargetTypeEnum {
	if o == nil {
		var ret RolePermissionTargetTypeEnum
		return ret
	}

	return o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value
// and a boolean to check if the value has been set.
func (o *ScopedRolePermission) GetTargetTypeOk() (*RolePermissionTargetTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetType, true
}

// SetTargetType sets field value
func (o *ScopedRolePermission) SetTargetType(v RolePermissionTargetTypeEnum) {
	o.TargetType = v
}

// GetPermissionName returns the PermissionName field value
func (o *ScopedRolePermission) GetPermissionName() RolePermissionNameEnum {
	if o == nil {
		var ret RolePermissionNameEnum
		return ret
	}

	return o.PermissionName
}

// GetPermissionNameOk returns a tuple with the PermissionName field value
// and a boolean to check if the value has been set.
func (o *ScopedRolePermission) GetPermissionNameOk() (*RolePermissionNameEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermissionName, true
}

// SetPermissionName sets field value
func (o *ScopedRolePermission) SetPermissionName(v RolePermissionNameEnum) {
	o.PermissionName = v
}

// GetAllowAll returns the AllowAll field value
func (o *ScopedRolePermission) GetAllowAll() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowAll
}

// GetAllowAllOk returns a tuple with the AllowAll field value
// and a boolean to check if the value has been set.
func (o *ScopedRolePermission) GetAllowAllOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowAll, true
}

// SetAllowAll sets field value
func (o *ScopedRolePermission) SetAllowAll(v bool) {
	o.AllowAll = v
}

func (o ScopedRolePermission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopedRolePermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TargetIds) {
		toSerialize["target_ids"] = o.TargetIds
	}
	toSerialize["target_type"] = o.TargetType
	toSerialize["permission_name"] = o.PermissionName
	toSerialize["allow_all"] = o.AllowAll

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScopedRolePermission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"target_type",
		"permission_name",
		"allow_all",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScopedRolePermission := _ScopedRolePermission{}

	err = json.Unmarshal(data, &varScopedRolePermission)

	if err != nil {
		return err
	}

	*o = ScopedRolePermission(varScopedRolePermission)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "target_ids")
		delete(additionalProperties, "target_type")
		delete(additionalProperties, "permission_name")
		delete(additionalProperties, "allow_all")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScopedRolePermission struct {
	value *ScopedRolePermission
	isSet bool
}

func (v NullableScopedRolePermission) Get() *ScopedRolePermission {
	return v.value
}

func (v *NullableScopedRolePermission) Set(val *ScopedRolePermission) {
	v.value = val
	v.isSet = true
}

func (v NullableScopedRolePermission) IsSet() bool {
	return v.isSet
}

func (v *NullableScopedRolePermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopedRolePermission(val *ScopedRolePermission) *NullableScopedRolePermission {
	return &NullableScopedRolePermission{value: val, isSet: true}
}

func (v NullableScopedRolePermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopedRolePermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


