/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateGroupBindingInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateGroupBindingInfo{}

// UpdateGroupBindingInfo # UpdateGroupBindingInfo Object ### Description The `UpdateGroupBindingInfo` object is used as an input to the UpdateGroupBinding API.
type UpdateGroupBindingInfo struct {
	// The ID of the group binding.
	GroupBindingId string `json:"group_binding_id"`
	// The ID of the source group.
	SourceGroupId string `json:"source_group_id"`
	// The list of groups.
	Groups []CreateGroupBindingInfoGroupsInner `json:"groups"`
}

type _UpdateGroupBindingInfo UpdateGroupBindingInfo

// NewUpdateGroupBindingInfo instantiates a new UpdateGroupBindingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGroupBindingInfo(groupBindingId string, sourceGroupId string, groups []CreateGroupBindingInfoGroupsInner) *UpdateGroupBindingInfo {
	this := UpdateGroupBindingInfo{}
	this.GroupBindingId = groupBindingId
	this.SourceGroupId = sourceGroupId
	this.Groups = groups
	return &this
}

// NewUpdateGroupBindingInfoWithDefaults instantiates a new UpdateGroupBindingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGroupBindingInfoWithDefaults() *UpdateGroupBindingInfo {
	this := UpdateGroupBindingInfo{}
	return &this
}

// GetGroupBindingId returns the GroupBindingId field value
func (o *UpdateGroupBindingInfo) GetGroupBindingId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupBindingId
}

// GetGroupBindingIdOk returns a tuple with the GroupBindingId field value
// and a boolean to check if the value has been set.
func (o *UpdateGroupBindingInfo) GetGroupBindingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupBindingId, true
}

// SetGroupBindingId sets field value
func (o *UpdateGroupBindingInfo) SetGroupBindingId(v string) {
	o.GroupBindingId = v
}

// GetSourceGroupId returns the SourceGroupId field value
func (o *UpdateGroupBindingInfo) GetSourceGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceGroupId
}

// GetSourceGroupIdOk returns a tuple with the SourceGroupId field value
// and a boolean to check if the value has been set.
func (o *UpdateGroupBindingInfo) GetSourceGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceGroupId, true
}

// SetSourceGroupId sets field value
func (o *UpdateGroupBindingInfo) SetSourceGroupId(v string) {
	o.SourceGroupId = v
}

// GetGroups returns the Groups field value
func (o *UpdateGroupBindingInfo) GetGroups() []CreateGroupBindingInfoGroupsInner {
	if o == nil {
		var ret []CreateGroupBindingInfoGroupsInner
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *UpdateGroupBindingInfo) GetGroupsOk() ([]CreateGroupBindingInfoGroupsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *UpdateGroupBindingInfo) SetGroups(v []CreateGroupBindingInfoGroupsInner) {
	o.Groups = v
}

func (o UpdateGroupBindingInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateGroupBindingInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group_binding_id"] = o.GroupBindingId
	toSerialize["source_group_id"] = o.SourceGroupId
	toSerialize["groups"] = o.Groups
	return toSerialize, nil
}

func (o *UpdateGroupBindingInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group_binding_id",
		"source_group_id",
		"groups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateGroupBindingInfo := _UpdateGroupBindingInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateGroupBindingInfo)

	if err != nil {
		return err
	}

	*o = UpdateGroupBindingInfo(varUpdateGroupBindingInfo)

	return err
}

type NullableUpdateGroupBindingInfo struct {
	value *UpdateGroupBindingInfo
	isSet bool
}

func (v NullableUpdateGroupBindingInfo) Get() *UpdateGroupBindingInfo {
	return v.value
}

func (v *NullableUpdateGroupBindingInfo) Set(val *UpdateGroupBindingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGroupBindingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGroupBindingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGroupBindingInfo(val *UpdateGroupBindingInfo) *NullableUpdateGroupBindingInfo {
	return &NullableUpdateGroupBindingInfo{value: val, isSet: true}
}

func (v NullableUpdateGroupBindingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGroupBindingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


