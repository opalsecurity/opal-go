/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageChannel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageChannel{}

// MessageChannel # MessageChannel Object ### Description The `MessageChannel` object is used to represent a message channel.  ### Usage Example Update a groups message channel from the `UPDATE Groups` endpoint.
type MessageChannel struct {
	// The ID of the message channel.
	MessageChannelId string `json:"message_channel_id"`
	ThirdPartyProvider *MessageChannelProviderEnum `json:"third_party_provider,omitempty"`
	// The remote ID of the message channel
	RemoteId *string `json:"remote_id,omitempty"`
	// The name of the message channel.
	Name *string `json:"name,omitempty"`
	// A bool representing whether or not the message channel is private.
	IsPrivate *bool `json:"is_private,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MessageChannel MessageChannel

// NewMessageChannel instantiates a new MessageChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageChannel(messageChannelId string) *MessageChannel {
	this := MessageChannel{}
	this.MessageChannelId = messageChannelId
	return &this
}

// NewMessageChannelWithDefaults instantiates a new MessageChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageChannelWithDefaults() *MessageChannel {
	this := MessageChannel{}
	return &this
}

// GetMessageChannelId returns the MessageChannelId field value
func (o *MessageChannel) GetMessageChannelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageChannelId
}

// GetMessageChannelIdOk returns a tuple with the MessageChannelId field value
// and a boolean to check if the value has been set.
func (o *MessageChannel) GetMessageChannelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageChannelId, true
}

// SetMessageChannelId sets field value
func (o *MessageChannel) SetMessageChannelId(v string) {
	o.MessageChannelId = v
}

// GetThirdPartyProvider returns the ThirdPartyProvider field value if set, zero value otherwise.
func (o *MessageChannel) GetThirdPartyProvider() MessageChannelProviderEnum {
	if o == nil || IsNil(o.ThirdPartyProvider) {
		var ret MessageChannelProviderEnum
		return ret
	}
	return *o.ThirdPartyProvider
}

// GetThirdPartyProviderOk returns a tuple with the ThirdPartyProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageChannel) GetThirdPartyProviderOk() (*MessageChannelProviderEnum, bool) {
	if o == nil || IsNil(o.ThirdPartyProvider) {
		return nil, false
	}
	return o.ThirdPartyProvider, true
}

// HasThirdPartyProvider returns a boolean if a field has been set.
func (o *MessageChannel) HasThirdPartyProvider() bool {
	if o != nil && !IsNil(o.ThirdPartyProvider) {
		return true
	}

	return false
}

// SetThirdPartyProvider gets a reference to the given MessageChannelProviderEnum and assigns it to the ThirdPartyProvider field.
func (o *MessageChannel) SetThirdPartyProvider(v MessageChannelProviderEnum) {
	o.ThirdPartyProvider = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise.
func (o *MessageChannel) GetRemoteId() string {
	if o == nil || IsNil(o.RemoteId) {
		var ret string
		return ret
	}
	return *o.RemoteId
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageChannel) GetRemoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteId) {
		return nil, false
	}
	return o.RemoteId, true
}

// HasRemoteId returns a boolean if a field has been set.
func (o *MessageChannel) HasRemoteId() bool {
	if o != nil && !IsNil(o.RemoteId) {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given string and assigns it to the RemoteId field.
func (o *MessageChannel) SetRemoteId(v string) {
	o.RemoteId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MessageChannel) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageChannel) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MessageChannel) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MessageChannel) SetName(v string) {
	o.Name = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *MessageChannel) GetIsPrivate() bool {
	if o == nil || IsNil(o.IsPrivate) {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageChannel) GetIsPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrivate) {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *MessageChannel) HasIsPrivate() bool {
	if o != nil && !IsNil(o.IsPrivate) {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *MessageChannel) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

func (o MessageChannel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageChannel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message_channel_id"] = o.MessageChannelId
	if !IsNil(o.ThirdPartyProvider) {
		toSerialize["third_party_provider"] = o.ThirdPartyProvider
	}
	if !IsNil(o.RemoteId) {
		toSerialize["remote_id"] = o.RemoteId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsPrivate) {
		toSerialize["is_private"] = o.IsPrivate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageChannel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message_channel_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageChannel := _MessageChannel{}

	err = json.Unmarshal(data, &varMessageChannel)

	if err != nil {
		return err
	}

	*o = MessageChannel(varMessageChannel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message_channel_id")
		delete(additionalProperties, "third_party_provider")
		delete(additionalProperties, "remote_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "is_private")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageChannel struct {
	value *MessageChannel
	isSet bool
}

func (v NullableMessageChannel) Get() *MessageChannel {
	return v.value
}

func (v *NullableMessageChannel) Set(val *MessageChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageChannel(val *MessageChannel) *NullableMessageChannel {
	return &NullableMessageChannel{value: val, isSet: true}
}

func (v NullableMessageChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


