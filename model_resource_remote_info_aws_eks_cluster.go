/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResourceRemoteInfoAwsEksCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceRemoteInfoAwsEksCluster{}

// ResourceRemoteInfoAwsEksCluster Remote info for AWS EKS cluster.
type ResourceRemoteInfoAwsEksCluster struct {
	// The ARN of the EKS cluster.
	Arn string `json:"arn"`
	// The id of the AWS account. Required for AWS Organizations.
	AccountId *string `json:"account_id,omitempty"`
}

type _ResourceRemoteInfoAwsEksCluster ResourceRemoteInfoAwsEksCluster

// NewResourceRemoteInfoAwsEksCluster instantiates a new ResourceRemoteInfoAwsEksCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceRemoteInfoAwsEksCluster(arn string) *ResourceRemoteInfoAwsEksCluster {
	this := ResourceRemoteInfoAwsEksCluster{}
	this.Arn = arn
	return &this
}

// NewResourceRemoteInfoAwsEksClusterWithDefaults instantiates a new ResourceRemoteInfoAwsEksCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceRemoteInfoAwsEksClusterWithDefaults() *ResourceRemoteInfoAwsEksCluster {
	this := ResourceRemoteInfoAwsEksCluster{}
	return &this
}

// GetArn returns the Arn field value
func (o *ResourceRemoteInfoAwsEksCluster) GetArn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Arn
}

// GetArnOk returns a tuple with the Arn field value
// and a boolean to check if the value has been set.
func (o *ResourceRemoteInfoAwsEksCluster) GetArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Arn, true
}

// SetArn sets field value
func (o *ResourceRemoteInfoAwsEksCluster) SetArn(v string) {
	o.Arn = v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *ResourceRemoteInfoAwsEksCluster) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRemoteInfoAwsEksCluster) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *ResourceRemoteInfoAwsEksCluster) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *ResourceRemoteInfoAwsEksCluster) SetAccountId(v string) {
	o.AccountId = &v
}

func (o ResourceRemoteInfoAwsEksCluster) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceRemoteInfoAwsEksCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["arn"] = o.Arn
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	return toSerialize, nil
}

func (o *ResourceRemoteInfoAwsEksCluster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"arn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceRemoteInfoAwsEksCluster := _ResourceRemoteInfoAwsEksCluster{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceRemoteInfoAwsEksCluster)

	if err != nil {
		return err
	}

	*o = ResourceRemoteInfoAwsEksCluster(varResourceRemoteInfoAwsEksCluster)

	return err
}

type NullableResourceRemoteInfoAwsEksCluster struct {
	value *ResourceRemoteInfoAwsEksCluster
	isSet bool
}

func (v NullableResourceRemoteInfoAwsEksCluster) Get() *ResourceRemoteInfoAwsEksCluster {
	return v.value
}

func (v *NullableResourceRemoteInfoAwsEksCluster) Set(val *ResourceRemoteInfoAwsEksCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceRemoteInfoAwsEksCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceRemoteInfoAwsEksCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceRemoteInfoAwsEksCluster(val *ResourceRemoteInfoAwsEksCluster) *NullableResourceRemoteInfoAwsEksCluster {
	return &NullableResourceRemoteInfoAwsEksCluster{value: val, isSet: true}
}

func (v NullableResourceRemoteInfoAwsEksCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceRemoteInfoAwsEksCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


