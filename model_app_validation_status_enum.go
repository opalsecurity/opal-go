/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// AppValidationStatusEnum The status of an app validation.
type AppValidationStatusEnum string

// List of AppValidationStatusEnum
const (
	APPVALIDATIONSTATUSENUM_SUCCESS AppValidationStatusEnum = "SUCCESS"
	APPVALIDATIONSTATUSENUM_FAILED AppValidationStatusEnum = "FAILED"
)

// All allowed values of AppValidationStatusEnum enum
var AllowedAppValidationStatusEnumEnumValues = []AppValidationStatusEnum{
	"SUCCESS",
	"FAILED",
}

func (v *AppValidationStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppValidationStatusEnum(value)
	for _, existing := range AllowedAppValidationStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppValidationStatusEnum", value)
}

// NewAppValidationStatusEnumFromValue returns a pointer to a valid AppValidationStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppValidationStatusEnumFromValue(v string) (*AppValidationStatusEnum, error) {
	ev := AppValidationStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppValidationStatusEnum: valid values are %v", v, AllowedAppValidationStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppValidationStatusEnum) IsValid() bool {
	for _, existing := range AllowedAppValidationStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppValidationStatusEnum value
func (v AppValidationStatusEnum) Ptr() *AppValidationStatusEnum {
	return &v
}

type NullableAppValidationStatusEnum struct {
	value *AppValidationStatusEnum
	isSet bool
}

func (v NullableAppValidationStatusEnum) Get() *AppValidationStatusEnum {
	return v.value
}

func (v *NullableAppValidationStatusEnum) Set(val *AppValidationStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAppValidationStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAppValidationStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppValidationStatusEnum(val *AppValidationStatusEnum) *NullableAppValidationStatusEnum {
	return &NullableAppValidationStatusEnum{value: val, isSet: true}
}

func (v NullableAppValidationStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppValidationStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

