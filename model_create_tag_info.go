/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateTagInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTagInfo{}

// CreateTagInfo # CreateTagInfo Object ### Description The `CreateTagInfo` object is used to represent configuration for a new tag.  ### Usage Example Use in the `POST Tag` endpoint.
type CreateTagInfo struct {
	// The key of the tag to create.
	TagKey string `json:"tag_key"`
	// The value of the tag to create.
	TagValue *string `json:"tag_value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateTagInfo CreateTagInfo

// NewCreateTagInfo instantiates a new CreateTagInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTagInfo(tagKey string) *CreateTagInfo {
	this := CreateTagInfo{}
	this.TagKey = tagKey
	return &this
}

// NewCreateTagInfoWithDefaults instantiates a new CreateTagInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTagInfoWithDefaults() *CreateTagInfo {
	this := CreateTagInfo{}
	return &this
}

// GetTagKey returns the TagKey field value
func (o *CreateTagInfo) GetTagKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TagKey
}

// GetTagKeyOk returns a tuple with the TagKey field value
// and a boolean to check if the value has been set.
func (o *CreateTagInfo) GetTagKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TagKey, true
}

// SetTagKey sets field value
func (o *CreateTagInfo) SetTagKey(v string) {
	o.TagKey = v
}

// GetTagValue returns the TagValue field value if set, zero value otherwise.
func (o *CreateTagInfo) GetTagValue() string {
	if o == nil || IsNil(o.TagValue) {
		var ret string
		return ret
	}
	return *o.TagValue
}

// GetTagValueOk returns a tuple with the TagValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTagInfo) GetTagValueOk() (*string, bool) {
	if o == nil || IsNil(o.TagValue) {
		return nil, false
	}
	return o.TagValue, true
}

// HasTagValue returns a boolean if a field has been set.
func (o *CreateTagInfo) HasTagValue() bool {
	if o != nil && !IsNil(o.TagValue) {
		return true
	}

	return false
}

// SetTagValue gets a reference to the given string and assigns it to the TagValue field.
func (o *CreateTagInfo) SetTagValue(v string) {
	o.TagValue = &v
}

func (o CreateTagInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTagInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tag_key"] = o.TagKey
	if !IsNil(o.TagValue) {
		toSerialize["tag_value"] = o.TagValue
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateTagInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tag_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTagInfo := _CreateTagInfo{}

	err = json.Unmarshal(data, &varCreateTagInfo)

	if err != nil {
		return err
	}

	*o = CreateTagInfo(varCreateTagInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tag_key")
		delete(additionalProperties, "tag_value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateTagInfo struct {
	value *CreateTagInfo
	isSet bool
}

func (v NullableCreateTagInfo) Get() *CreateTagInfo {
	return v.value
}

func (v *NullableCreateTagInfo) Set(val *CreateTagInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTagInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTagInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTagInfo(val *CreateTagInfo) *NullableCreateTagInfo {
	return &NullableCreateTagInfo{value: val, isSet: true}
}

func (v NullableCreateTagInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTagInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


