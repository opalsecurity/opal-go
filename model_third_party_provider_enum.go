/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// ThirdPartyProviderEnum The third party provider of the remote user.
type ThirdPartyProviderEnum string

// List of ThirdPartyProviderEnum
const (
	THIRDPARTYPROVIDERENUM_AUTH0 ThirdPartyProviderEnum = "AUTH0"
	THIRDPARTYPROVIDERENUM_SLACK ThirdPartyProviderEnum = "SLACK"
	THIRDPARTYPROVIDERENUM_GOOGLE_CHAT ThirdPartyProviderEnum = "GOOGLE_CHAT"
	THIRDPARTYPROVIDERENUM_JIRA ThirdPartyProviderEnum = "JIRA"
	THIRDPARTYPROVIDERENUM_LINEAR ThirdPartyProviderEnum = "LINEAR"
	THIRDPARTYPROVIDERENUM_SERVICE_NOW ThirdPartyProviderEnum = "SERVICE_NOW"
	THIRDPARTYPROVIDERENUM_PAGER_DUTY ThirdPartyProviderEnum = "PAGER_DUTY"
	THIRDPARTYPROVIDERENUM_OPSGENIE ThirdPartyProviderEnum = "OPSGENIE"
	THIRDPARTYPROVIDERENUM_GIT_HUB ThirdPartyProviderEnum = "GIT_HUB"
	THIRDPARTYPROVIDERENUM_GIT_LAB ThirdPartyProviderEnum = "GIT_LAB"
	THIRDPARTYPROVIDERENUM_GIT_LAB_CONNECTION ThirdPartyProviderEnum = "GIT_LAB_CONNECTION"
	THIRDPARTYPROVIDERENUM_TELEPORT ThirdPartyProviderEnum = "TELEPORT"
)

// All allowed values of ThirdPartyProviderEnum enum
var AllowedThirdPartyProviderEnumEnumValues = []ThirdPartyProviderEnum{
	"AUTH0",
	"SLACK",
	"GOOGLE_CHAT",
	"JIRA",
	"LINEAR",
	"SERVICE_NOW",
	"PAGER_DUTY",
	"OPSGENIE",
	"GIT_HUB",
	"GIT_LAB",
	"GIT_LAB_CONNECTION",
	"TELEPORT",
}

func (v *ThirdPartyProviderEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ThirdPartyProviderEnum(value)
	for _, existing := range AllowedThirdPartyProviderEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ThirdPartyProviderEnum", value)
}

// NewThirdPartyProviderEnumFromValue returns a pointer to a valid ThirdPartyProviderEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewThirdPartyProviderEnumFromValue(v string) (*ThirdPartyProviderEnum, error) {
	ev := ThirdPartyProviderEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ThirdPartyProviderEnum: valid values are %v", v, AllowedThirdPartyProviderEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ThirdPartyProviderEnum) IsValid() bool {
	for _, existing := range AllowedThirdPartyProviderEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ThirdPartyProviderEnum value
func (v ThirdPartyProviderEnum) Ptr() *ThirdPartyProviderEnum {
	return &v
}

type NullableThirdPartyProviderEnum struct {
	value *ThirdPartyProviderEnum
	isSet bool
}

func (v NullableThirdPartyProviderEnum) Get() *ThirdPartyProviderEnum {
	return v.value
}

func (v *NullableThirdPartyProviderEnum) Set(val *ThirdPartyProviderEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableThirdPartyProviderEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableThirdPartyProviderEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThirdPartyProviderEnum(val *ThirdPartyProviderEnum) *NullableThirdPartyProviderEnum {
	return &NullableThirdPartyProviderEnum{value: val, isSet: true}
}

func (v NullableThirdPartyProviderEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThirdPartyProviderEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

