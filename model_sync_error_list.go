/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SyncErrorList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncErrorList{}

// SyncErrorList struct for SyncErrorList
type SyncErrorList struct {
	SyncErrors []SyncError `json:"sync_errors"`
}

type _SyncErrorList SyncErrorList

// NewSyncErrorList instantiates a new SyncErrorList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncErrorList(syncErrors []SyncError) *SyncErrorList {
	this := SyncErrorList{}
	this.SyncErrors = syncErrors
	return &this
}

// NewSyncErrorListWithDefaults instantiates a new SyncErrorList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncErrorListWithDefaults() *SyncErrorList {
	this := SyncErrorList{}
	return &this
}

// GetSyncErrors returns the SyncErrors field value
func (o *SyncErrorList) GetSyncErrors() []SyncError {
	if o == nil {
		var ret []SyncError
		return ret
	}

	return o.SyncErrors
}

// GetSyncErrorsOk returns a tuple with the SyncErrors field value
// and a boolean to check if the value has been set.
func (o *SyncErrorList) GetSyncErrorsOk() ([]SyncError, bool) {
	if o == nil {
		return nil, false
	}
	return o.SyncErrors, true
}

// SetSyncErrors sets field value
func (o *SyncErrorList) SetSyncErrors(v []SyncError) {
	o.SyncErrors = v
}

func (o SyncErrorList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncErrorList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sync_errors"] = o.SyncErrors
	return toSerialize, nil
}

func (o *SyncErrorList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sync_errors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSyncErrorList := _SyncErrorList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSyncErrorList)

	if err != nil {
		return err
	}

	*o = SyncErrorList(varSyncErrorList)

	return err
}

type NullableSyncErrorList struct {
	value *SyncErrorList
	isSet bool
}

func (v NullableSyncErrorList) Get() *SyncErrorList {
	return v.value
}

func (v *NullableSyncErrorList) Set(val *SyncErrorList) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncErrorList) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncErrorList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncErrorList(val *SyncErrorList) *NullableSyncErrorList {
	return &NullableSyncErrorList{value: val, isSet: true}
}

func (v NullableSyncErrorList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncErrorList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


