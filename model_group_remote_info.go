/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// GroupRemoteInfo Remote info that is required for the creation of remote groups. Providing this will allow you to omit deprecated remote_id and metadata fields.
type GroupRemoteInfo struct {
	ActiveDirectoryGroup *GroupRemoteInfoActiveDirectoryGroup `json:"active_directory_group,omitempty"`
	GithubTeam *GroupRemoteInfoGithubTeam `json:"github_team,omitempty"`
	GoogleGroup *GroupRemoteInfoGoogleGroup `json:"google_group,omitempty"`
	LdapGroup *GroupRemoteInfoLdapGroup `json:"ldap_group,omitempty"`
	OktaGroup *GroupRemoteInfoOktaGroup `json:"okta_group,omitempty"`
	DuoGroup *GroupRemoteInfoDuoGroup `json:"duo_group,omitempty"`
}

// NewGroupRemoteInfo instantiates a new GroupRemoteInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupRemoteInfo() *GroupRemoteInfo {
	this := GroupRemoteInfo{}
	return &this
}

// NewGroupRemoteInfoWithDefaults instantiates a new GroupRemoteInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupRemoteInfoWithDefaults() *GroupRemoteInfo {
	this := GroupRemoteInfo{}
	return &this
}

// GetActiveDirectoryGroup returns the ActiveDirectoryGroup field value if set, zero value otherwise.
func (o *GroupRemoteInfo) GetActiveDirectoryGroup() GroupRemoteInfoActiveDirectoryGroup {
	if o == nil || isNil(o.ActiveDirectoryGroup) {
		var ret GroupRemoteInfoActiveDirectoryGroup
		return ret
	}
	return *o.ActiveDirectoryGroup
}

// GetActiveDirectoryGroupOk returns a tuple with the ActiveDirectoryGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRemoteInfo) GetActiveDirectoryGroupOk() (*GroupRemoteInfoActiveDirectoryGroup, bool) {
	if o == nil || isNil(o.ActiveDirectoryGroup) {
    return nil, false
	}
	return o.ActiveDirectoryGroup, true
}

// HasActiveDirectoryGroup returns a boolean if a field has been set.
func (o *GroupRemoteInfo) HasActiveDirectoryGroup() bool {
	if o != nil && !isNil(o.ActiveDirectoryGroup) {
		return true
	}

	return false
}

// SetActiveDirectoryGroup gets a reference to the given GroupRemoteInfoActiveDirectoryGroup and assigns it to the ActiveDirectoryGroup field.
func (o *GroupRemoteInfo) SetActiveDirectoryGroup(v GroupRemoteInfoActiveDirectoryGroup) {
	o.ActiveDirectoryGroup = &v
}

// GetGithubTeam returns the GithubTeam field value if set, zero value otherwise.
func (o *GroupRemoteInfo) GetGithubTeam() GroupRemoteInfoGithubTeam {
	if o == nil || isNil(o.GithubTeam) {
		var ret GroupRemoteInfoGithubTeam
		return ret
	}
	return *o.GithubTeam
}

// GetGithubTeamOk returns a tuple with the GithubTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRemoteInfo) GetGithubTeamOk() (*GroupRemoteInfoGithubTeam, bool) {
	if o == nil || isNil(o.GithubTeam) {
    return nil, false
	}
	return o.GithubTeam, true
}

// HasGithubTeam returns a boolean if a field has been set.
func (o *GroupRemoteInfo) HasGithubTeam() bool {
	if o != nil && !isNil(o.GithubTeam) {
		return true
	}

	return false
}

// SetGithubTeam gets a reference to the given GroupRemoteInfoGithubTeam and assigns it to the GithubTeam field.
func (o *GroupRemoteInfo) SetGithubTeam(v GroupRemoteInfoGithubTeam) {
	o.GithubTeam = &v
}

// GetGoogleGroup returns the GoogleGroup field value if set, zero value otherwise.
func (o *GroupRemoteInfo) GetGoogleGroup() GroupRemoteInfoGoogleGroup {
	if o == nil || isNil(o.GoogleGroup) {
		var ret GroupRemoteInfoGoogleGroup
		return ret
	}
	return *o.GoogleGroup
}

// GetGoogleGroupOk returns a tuple with the GoogleGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRemoteInfo) GetGoogleGroupOk() (*GroupRemoteInfoGoogleGroup, bool) {
	if o == nil || isNil(o.GoogleGroup) {
    return nil, false
	}
	return o.GoogleGroup, true
}

// HasGoogleGroup returns a boolean if a field has been set.
func (o *GroupRemoteInfo) HasGoogleGroup() bool {
	if o != nil && !isNil(o.GoogleGroup) {
		return true
	}

	return false
}

// SetGoogleGroup gets a reference to the given GroupRemoteInfoGoogleGroup and assigns it to the GoogleGroup field.
func (o *GroupRemoteInfo) SetGoogleGroup(v GroupRemoteInfoGoogleGroup) {
	o.GoogleGroup = &v
}

// GetLdapGroup returns the LdapGroup field value if set, zero value otherwise.
func (o *GroupRemoteInfo) GetLdapGroup() GroupRemoteInfoLdapGroup {
	if o == nil || isNil(o.LdapGroup) {
		var ret GroupRemoteInfoLdapGroup
		return ret
	}
	return *o.LdapGroup
}

// GetLdapGroupOk returns a tuple with the LdapGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRemoteInfo) GetLdapGroupOk() (*GroupRemoteInfoLdapGroup, bool) {
	if o == nil || isNil(o.LdapGroup) {
    return nil, false
	}
	return o.LdapGroup, true
}

// HasLdapGroup returns a boolean if a field has been set.
func (o *GroupRemoteInfo) HasLdapGroup() bool {
	if o != nil && !isNil(o.LdapGroup) {
		return true
	}

	return false
}

// SetLdapGroup gets a reference to the given GroupRemoteInfoLdapGroup and assigns it to the LdapGroup field.
func (o *GroupRemoteInfo) SetLdapGroup(v GroupRemoteInfoLdapGroup) {
	o.LdapGroup = &v
}

// GetOktaGroup returns the OktaGroup field value if set, zero value otherwise.
func (o *GroupRemoteInfo) GetOktaGroup() GroupRemoteInfoOktaGroup {
	if o == nil || isNil(o.OktaGroup) {
		var ret GroupRemoteInfoOktaGroup
		return ret
	}
	return *o.OktaGroup
}

// GetOktaGroupOk returns a tuple with the OktaGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRemoteInfo) GetOktaGroupOk() (*GroupRemoteInfoOktaGroup, bool) {
	if o == nil || isNil(o.OktaGroup) {
    return nil, false
	}
	return o.OktaGroup, true
}

// HasOktaGroup returns a boolean if a field has been set.
func (o *GroupRemoteInfo) HasOktaGroup() bool {
	if o != nil && !isNil(o.OktaGroup) {
		return true
	}

	return false
}

// SetOktaGroup gets a reference to the given GroupRemoteInfoOktaGroup and assigns it to the OktaGroup field.
func (o *GroupRemoteInfo) SetOktaGroup(v GroupRemoteInfoOktaGroup) {
	o.OktaGroup = &v
}

// GetDuoGroup returns the DuoGroup field value if set, zero value otherwise.
func (o *GroupRemoteInfo) GetDuoGroup() GroupRemoteInfoDuoGroup {
	if o == nil || isNil(o.DuoGroup) {
		var ret GroupRemoteInfoDuoGroup
		return ret
	}
	return *o.DuoGroup
}

// GetDuoGroupOk returns a tuple with the DuoGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupRemoteInfo) GetDuoGroupOk() (*GroupRemoteInfoDuoGroup, bool) {
	if o == nil || isNil(o.DuoGroup) {
    return nil, false
	}
	return o.DuoGroup, true
}

// HasDuoGroup returns a boolean if a field has been set.
func (o *GroupRemoteInfo) HasDuoGroup() bool {
	if o != nil && !isNil(o.DuoGroup) {
		return true
	}

	return false
}

// SetDuoGroup gets a reference to the given GroupRemoteInfoDuoGroup and assigns it to the DuoGroup field.
func (o *GroupRemoteInfo) SetDuoGroup(v GroupRemoteInfoDuoGroup) {
	o.DuoGroup = &v
}

func (o GroupRemoteInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ActiveDirectoryGroup) {
		toSerialize["active_directory_group"] = o.ActiveDirectoryGroup
	}
	if !isNil(o.GithubTeam) {
		toSerialize["github_team"] = o.GithubTeam
	}
	if !isNil(o.GoogleGroup) {
		toSerialize["google_group"] = o.GoogleGroup
	}
	if !isNil(o.LdapGroup) {
		toSerialize["ldap_group"] = o.LdapGroup
	}
	if !isNil(o.OktaGroup) {
		toSerialize["okta_group"] = o.OktaGroup
	}
	if !isNil(o.DuoGroup) {
		toSerialize["duo_group"] = o.DuoGroup
	}
	return json.Marshal(toSerialize)
}

type NullableGroupRemoteInfo struct {
	value *GroupRemoteInfo
	isSet bool
}

func (v NullableGroupRemoteInfo) Get() *GroupRemoteInfo {
	return v.value
}

func (v *NullableGroupRemoteInfo) Set(val *GroupRemoteInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupRemoteInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupRemoteInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupRemoteInfo(val *GroupRemoteInfo) *NullableGroupRemoteInfo {
	return &NullableGroupRemoteInfo{value: val, isSet: true}
}

func (v NullableGroupRemoteInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupRemoteInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


