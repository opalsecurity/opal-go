/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// App # App Object ### Description The `App` object is used to represent an app to an application.  ### Usage Example List from the `GET Apps` endpoint.
type App struct {
	// The ID of the app.
	AppId string `json:"app_id"`
	// The name of the app.
	Name string `json:"name"`
	// A description of the app.
	Description string `json:"description"`
	// The ID of the owner of the app.
	AdminOwnerId string `json:"admin_owner_id"`
	AppType AppTypeEnum `json:"app_type"`
}

// NewApp instantiates a new App object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApp(appId string, name string, description string, adminOwnerId string, appType AppTypeEnum) *App {
	this := App{}
	this.AppId = appId
	this.Name = name
	this.Description = description
	this.AdminOwnerId = adminOwnerId
	this.AppType = appType
	return &this
}

// NewAppWithDefaults instantiates a new App object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppWithDefaults() *App {
	this := App{}
	return &this
}

// GetAppId returns the AppId field value
func (o *App) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *App) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *App) SetAppId(v string) {
	o.AppId = v
}

// GetName returns the Name field value
func (o *App) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *App) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *App) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *App) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *App) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *App) SetDescription(v string) {
	o.Description = v
}

// GetAdminOwnerId returns the AdminOwnerId field value
func (o *App) GetAdminOwnerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminOwnerId
}

// GetAdminOwnerIdOk returns a tuple with the AdminOwnerId field value
// and a boolean to check if the value has been set.
func (o *App) GetAdminOwnerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminOwnerId, true
}

// SetAdminOwnerId sets field value
func (o *App) SetAdminOwnerId(v string) {
	o.AdminOwnerId = v
}

// GetAppType returns the AppType field value
func (o *App) GetAppType() AppTypeEnum {
	if o == nil {
		var ret AppTypeEnum
		return ret
	}

	return o.AppType
}

// GetAppTypeOk returns a tuple with the AppType field value
// and a boolean to check if the value has been set.
func (o *App) GetAppTypeOk() (*AppTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppType, true
}

// SetAppType sets field value
func (o *App) SetAppType(v AppTypeEnum) {
	o.AppType = v
}

func (o App) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["app_id"] = o.AppId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["admin_owner_id"] = o.AdminOwnerId
	}
	if true {
		toSerialize["app_type"] = o.AppType
	}
	return json.Marshal(toSerialize)
}

type NullableApp struct {
	value *App
	isSet bool
}

func (v NullableApp) Get() *App {
	return v.value
}

func (v *NullableApp) Set(val *App) {
	v.value = val
	v.isSet = true
}

func (v NullableApp) IsSet() bool {
	return v.isSet
}

func (v *NullableApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApp(val *App) *NullableApp {
	return &NullableApp{value: val, isSet: true}
}

func (v NullableApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


