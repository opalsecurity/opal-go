/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// VisibilityTypeEnum The visibility level of the entity.
type VisibilityTypeEnum string

// List of VisibilityTypeEnum
const (
	VISIBILITYTYPEENUM_GLOBAL VisibilityTypeEnum = "GLOBAL"
	VISIBILITYTYPEENUM_LIMITED VisibilityTypeEnum = "LIMITED"
)

// All allowed values of VisibilityTypeEnum enum
var AllowedVisibilityTypeEnumEnumValues = []VisibilityTypeEnum{
	"GLOBAL",
	"LIMITED",
}

func (v *VisibilityTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VisibilityTypeEnum(value)
	for _, existing := range AllowedVisibilityTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VisibilityTypeEnum", value)
}

// NewVisibilityTypeEnumFromValue returns a pointer to a valid VisibilityTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVisibilityTypeEnumFromValue(v string) (*VisibilityTypeEnum, error) {
	ev := VisibilityTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VisibilityTypeEnum: valid values are %v", v, AllowedVisibilityTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VisibilityTypeEnum) IsValid() bool {
	for _, existing := range AllowedVisibilityTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VisibilityTypeEnum value
func (v VisibilityTypeEnum) Ptr() *VisibilityTypeEnum {
	return &v
}

type NullableVisibilityTypeEnum struct {
	value *VisibilityTypeEnum
	isSet bool
}

func (v NullableVisibilityTypeEnum) Get() *VisibilityTypeEnum {
	return v.value
}

func (v *NullableVisibilityTypeEnum) Set(val *VisibilityTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableVisibilityTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableVisibilityTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisibilityTypeEnum(val *VisibilityTypeEnum) *NullableVisibilityTypeEnum {
	return &NullableVisibilityTypeEnum{value: val, isSet: true}
}

func (v NullableVisibilityTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisibilityTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

