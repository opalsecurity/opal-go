/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DelegationsAPIService DelegationsAPI service
type DelegationsAPIService service

type ApiCreateDelegationRequest struct {
	ctx context.Context
	ApiService *DelegationsAPIService
	createDelegationRequest *CreateDelegationRequest
}

func (r ApiCreateDelegationRequest) CreateDelegationRequest(createDelegationRequest CreateDelegationRequest) ApiCreateDelegationRequest {
	r.createDelegationRequest = &createDelegationRequest
	return r
}

func (r ApiCreateDelegationRequest) Execute() (*Delegation, *http.Response, error) {
	return r.ApiService.CreateDelegationExecute(r)
}

/*
CreateDelegation Method for CreateDelegation

Creates a new request reviewer delegation to delegate access review requests from one user to another.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDelegationRequest
*/
func (a *DelegationsAPIService) CreateDelegation(ctx context.Context) ApiCreateDelegationRequest {
	return ApiCreateDelegationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Delegation
func (a *DelegationsAPIService) CreateDelegationExecute(r ApiCreateDelegationRequest) (*Delegation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Delegation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegationsAPIService.CreateDelegation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delegations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createDelegationRequest == nil {
		return localVarReturnValue, nil, reportError("createDelegationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createDelegationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDelegationRequest struct {
	ctx context.Context
	ApiService *DelegationsAPIService
	delegationId string
}

func (r ApiDeleteDelegationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDelegationExecute(r)
}

/*
DeleteDelegation Method for DeleteDelegation

Deletes a delegation by its ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param delegationId The ID of the delegation to remove.
 @return ApiDeleteDelegationRequest
*/
func (a *DelegationsAPIService) DeleteDelegation(ctx context.Context, delegationId string) ApiDeleteDelegationRequest {
	return ApiDeleteDelegationRequest{
		ApiService: a,
		ctx: ctx,
		delegationId: delegationId,
	}
}

// Execute executes the request
func (a *DelegationsAPIService) DeleteDelegationExecute(r ApiDeleteDelegationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegationsAPIService.DeleteDelegation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delegations/{delegation_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"delegation_id"+"}", url.PathEscape(parameterValueToString(r.delegationId, "delegationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDelegationRequest struct {
	ctx context.Context
	ApiService *DelegationsAPIService
	delegationId string
}

func (r ApiGetDelegationRequest) Execute() (*Delegation, *http.Response, error) {
	return r.ApiService.GetDelegationExecute(r)
}

/*
GetDelegation Method for GetDelegation

Returns a specific delegation by its ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param delegationId The ID of the delegation to retrieve.
 @return ApiGetDelegationRequest
*/
func (a *DelegationsAPIService) GetDelegation(ctx context.Context, delegationId string) ApiGetDelegationRequest {
	return ApiGetDelegationRequest{
		ApiService: a,
		ctx: ctx,
		delegationId: delegationId,
	}
}

// Execute executes the request
//  @return Delegation
func (a *DelegationsAPIService) GetDelegationExecute(r ApiGetDelegationRequest) (*Delegation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Delegation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegationsAPIService.GetDelegation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delegations/{delegation_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"delegation_id"+"}", url.PathEscape(parameterValueToString(r.delegationId, "delegationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDelegationsRequest struct {
	ctx context.Context
	ApiService *DelegationsAPIService
	delegatorUserId *string
	delegateUserId *string
	cursor *string
	pageSize *int32
}

// The delegator user ID to filter delegations by the user delegating their access review requests.
func (r ApiGetDelegationsRequest) DelegatorUserId(delegatorUserId string) ApiGetDelegationsRequest {
	r.delegatorUserId = &delegatorUserId
	return r
}

// The delegate user ID to filter delegations by the user being delegated to.
func (r ApiGetDelegationsRequest) DelegateUserId(delegateUserId string) ApiGetDelegationsRequest {
	r.delegateUserId = &delegateUserId
	return r
}

// A cursor to indicate where to start fetching results.
func (r ApiGetDelegationsRequest) Cursor(cursor string) ApiGetDelegationsRequest {
	r.cursor = &cursor
	return r
}

// The maximum number of results to return per page. The default is 200.
func (r ApiGetDelegationsRequest) PageSize(pageSize int32) ApiGetDelegationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetDelegationsRequest) Execute() (*PaginatedDelegationsList, *http.Response, error) {
	return r.ApiService.GetDelegationsExecute(r)
}

/*
GetDelegations Method for GetDelegations

Returns a list of request reviewer delegations configured for your organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDelegationsRequest
*/
func (a *DelegationsAPIService) GetDelegations(ctx context.Context) ApiGetDelegationsRequest {
	return ApiGetDelegationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedDelegationsList
func (a *DelegationsAPIService) GetDelegationsExecute(r ApiGetDelegationsRequest) (*PaginatedDelegationsList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDelegationsList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegationsAPIService.GetDelegations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delegations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.delegatorUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delegator_user_id", r.delegatorUserId, "form", "")
	}
	if r.delegateUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "delegate_user_id", r.delegateUserId, "form", "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
