/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RequestComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestComment{}

// RequestComment # Request Comment Object ### Description The `RequestComment` object is used to represent a comment on a request.  ### Usage Example Returned from the `GET Requests` endpoint as part of a `Request` object.
type RequestComment struct {
	// The date and time the comment was created.
	CreatedAt time.Time `json:"created_at"`
	// The unique identifier of the request the comment is associated with.
	RequestId string `json:"request_id"`
	// The unique identifier of the user who made the comment.
	UserId string `json:"user_id"`
	// The user's full name.
	UserFullName *string `json:"user_full_name,omitempty"`
	// The user's email address.
	UserEmail *string `json:"user_email,omitempty"`
	// The content of the comment.
	Comment string `json:"comment"`
}

type _RequestComment RequestComment

// NewRequestComment instantiates a new RequestComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestComment(createdAt time.Time, requestId string, userId string, comment string) *RequestComment {
	this := RequestComment{}
	this.CreatedAt = createdAt
	this.RequestId = requestId
	this.UserId = userId
	this.Comment = comment
	return &this
}

// NewRequestCommentWithDefaults instantiates a new RequestComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestCommentWithDefaults() *RequestComment {
	this := RequestComment{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *RequestComment) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *RequestComment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *RequestComment) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetRequestId returns the RequestId field value
func (o *RequestComment) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *RequestComment) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *RequestComment) SetRequestId(v string) {
	o.RequestId = v
}

// GetUserId returns the UserId field value
func (o *RequestComment) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *RequestComment) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *RequestComment) SetUserId(v string) {
	o.UserId = v
}

// GetUserFullName returns the UserFullName field value if set, zero value otherwise.
func (o *RequestComment) GetUserFullName() string {
	if o == nil || IsNil(o.UserFullName) {
		var ret string
		return ret
	}
	return *o.UserFullName
}

// GetUserFullNameOk returns a tuple with the UserFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestComment) GetUserFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserFullName) {
		return nil, false
	}
	return o.UserFullName, true
}

// HasUserFullName returns a boolean if a field has been set.
func (o *RequestComment) HasUserFullName() bool {
	if o != nil && !IsNil(o.UserFullName) {
		return true
	}

	return false
}

// SetUserFullName gets a reference to the given string and assigns it to the UserFullName field.
func (o *RequestComment) SetUserFullName(v string) {
	o.UserFullName = &v
}

// GetUserEmail returns the UserEmail field value if set, zero value otherwise.
func (o *RequestComment) GetUserEmail() string {
	if o == nil || IsNil(o.UserEmail) {
		var ret string
		return ret
	}
	return *o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestComment) GetUserEmailOk() (*string, bool) {
	if o == nil || IsNil(o.UserEmail) {
		return nil, false
	}
	return o.UserEmail, true
}

// HasUserEmail returns a boolean if a field has been set.
func (o *RequestComment) HasUserEmail() bool {
	if o != nil && !IsNil(o.UserEmail) {
		return true
	}

	return false
}

// SetUserEmail gets a reference to the given string and assigns it to the UserEmail field.
func (o *RequestComment) SetUserEmail(v string) {
	o.UserEmail = &v
}

// GetComment returns the Comment field value
func (o *RequestComment) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *RequestComment) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *RequestComment) SetComment(v string) {
	o.Comment = v
}

func (o RequestComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["request_id"] = o.RequestId
	toSerialize["user_id"] = o.UserId
	if !IsNil(o.UserFullName) {
		toSerialize["user_full_name"] = o.UserFullName
	}
	if !IsNil(o.UserEmail) {
		toSerialize["user_email"] = o.UserEmail
	}
	toSerialize["comment"] = o.Comment
	return toSerialize, nil
}

func (o *RequestComment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"request_id",
		"user_id",
		"comment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestComment := _RequestComment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRequestComment)

	if err != nil {
		return err
	}

	*o = RequestComment(varRequestComment)

	return err
}

type NullableRequestComment struct {
	value *RequestComment
	isSet bool
}

func (v NullableRequestComment) Get() *RequestComment {
	return v.value
}

func (v *NullableRequestComment) Set(val *RequestComment) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestComment) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestComment(val *RequestComment) *NullableRequestComment {
	return &NullableRequestComment{value: val, isSet: true}
}

func (v NullableRequestComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


