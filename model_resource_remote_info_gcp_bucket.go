/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// checks if the ResourceRemoteInfoGcpBucket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceRemoteInfoGcpBucket{}

// ResourceRemoteInfoGcpBucket Remote info for GCP bucket.
type ResourceRemoteInfoGcpBucket struct {
	// The id of the bucket.
	BucketId string `json:"bucket_id"`
}

// NewResourceRemoteInfoGcpBucket instantiates a new ResourceRemoteInfoGcpBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceRemoteInfoGcpBucket(bucketId string) *ResourceRemoteInfoGcpBucket {
	this := ResourceRemoteInfoGcpBucket{}
	this.BucketId = bucketId
	return &this
}

// NewResourceRemoteInfoGcpBucketWithDefaults instantiates a new ResourceRemoteInfoGcpBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceRemoteInfoGcpBucketWithDefaults() *ResourceRemoteInfoGcpBucket {
	this := ResourceRemoteInfoGcpBucket{}
	return &this
}

// GetBucketId returns the BucketId field value
func (o *ResourceRemoteInfoGcpBucket) GetBucketId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketId
}

// GetBucketIdOk returns a tuple with the BucketId field value
// and a boolean to check if the value has been set.
func (o *ResourceRemoteInfoGcpBucket) GetBucketIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketId, true
}

// SetBucketId sets field value
func (o *ResourceRemoteInfoGcpBucket) SetBucketId(v string) {
	o.BucketId = v
}

func (o ResourceRemoteInfoGcpBucket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceRemoteInfoGcpBucket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucket_id"] = o.BucketId
	return toSerialize, nil
}

type NullableResourceRemoteInfoGcpBucket struct {
	value *ResourceRemoteInfoGcpBucket
	isSet bool
}

func (v NullableResourceRemoteInfoGcpBucket) Get() *ResourceRemoteInfoGcpBucket {
	return v.value
}

func (v *NullableResourceRemoteInfoGcpBucket) Set(val *ResourceRemoteInfoGcpBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceRemoteInfoGcpBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceRemoteInfoGcpBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceRemoteInfoGcpBucket(val *ResourceRemoteInfoGcpBucket) *NullableResourceRemoteInfoGcpBucket {
	return &NullableResourceRemoteInfoGcpBucket{value: val, isSet: true}
}

func (v NullableResourceRemoteInfoGcpBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceRemoteInfoGcpBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


