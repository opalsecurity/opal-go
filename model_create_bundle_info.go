/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateBundleInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateBundleInfo{}

// CreateBundleInfo # CreateBundleInfo Object ### Description The `CreateBundleInfo` object is used to store creation info for a bundle.  ### Usage Example Use in the `POST Bundles` endpoint.
type CreateBundleInfo struct {
	// The name of the bundle.
	Name string `json:"name"`
	// A brief description of the bundle.
	Description *string `json:"description,omitempty"`
	// The ID of the bundle's admin owner.
	AdminOwnerId string `json:"admin_owner_id"`
	AdditionalProperties map[string]interface{}
}

type _CreateBundleInfo CreateBundleInfo

// NewCreateBundleInfo instantiates a new CreateBundleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBundleInfo(name string, adminOwnerId string) *CreateBundleInfo {
	this := CreateBundleInfo{}
	this.Name = name
	this.AdminOwnerId = adminOwnerId
	return &this
}

// NewCreateBundleInfoWithDefaults instantiates a new CreateBundleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBundleInfoWithDefaults() *CreateBundleInfo {
	this := CreateBundleInfo{}
	return &this
}

// GetName returns the Name field value
func (o *CreateBundleInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateBundleInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateBundleInfo) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateBundleInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBundleInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateBundleInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateBundleInfo) SetDescription(v string) {
	o.Description = &v
}

// GetAdminOwnerId returns the AdminOwnerId field value
func (o *CreateBundleInfo) GetAdminOwnerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminOwnerId
}

// GetAdminOwnerIdOk returns a tuple with the AdminOwnerId field value
// and a boolean to check if the value has been set.
func (o *CreateBundleInfo) GetAdminOwnerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminOwnerId, true
}

// SetAdminOwnerId sets field value
func (o *CreateBundleInfo) SetAdminOwnerId(v string) {
	o.AdminOwnerId = v
}

func (o CreateBundleInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateBundleInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["admin_owner_id"] = o.AdminOwnerId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateBundleInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"admin_owner_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateBundleInfo := _CreateBundleInfo{}

	err = json.Unmarshal(data, &varCreateBundleInfo)

	if err != nil {
		return err
	}

	*o = CreateBundleInfo(varCreateBundleInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "admin_owner_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateBundleInfo struct {
	value *CreateBundleInfo
	isSet bool
}

func (v NullableCreateBundleInfo) Get() *CreateBundleInfo {
	return v.value
}

func (v *NullableCreateBundleInfo) Set(val *CreateBundleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBundleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBundleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBundleInfo(val *CreateBundleInfo) *NullableCreateBundleInfo {
	return &NullableCreateBundleInfo{value: val, isSet: true}
}

func (v NullableCreateBundleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBundleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


