/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the PaginatedTagsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedTagsList{}

// PaginatedTagsList struct for PaginatedTagsList
type PaginatedTagsList struct {
	// The cursor with which to continue pagination if additional result pages exist.
	Next *string `json:"next,omitempty"`
	// The cursor used to obtain the current result page.
	Previous *string `json:"previous,omitempty"`
	Results []Tag `json:"results"`
	AdditionalProperties map[string]interface{}
}

type _PaginatedTagsList PaginatedTagsList

// NewPaginatedTagsList instantiates a new PaginatedTagsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedTagsList(results []Tag) *PaginatedTagsList {
	this := PaginatedTagsList{}
	this.Results = results
	return &this
}

// NewPaginatedTagsListWithDefaults instantiates a new PaginatedTagsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedTagsListWithDefaults() *PaginatedTagsList {
	this := PaginatedTagsList{}
	return &this
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *PaginatedTagsList) GetNext() string {
	if o == nil || IsNil(o.Next) {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedTagsList) GetNextOk() (*string, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *PaginatedTagsList) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *PaginatedTagsList) SetNext(v string) {
	o.Next = &v
}

// GetPrevious returns the Previous field value if set, zero value otherwise.
func (o *PaginatedTagsList) GetPrevious() string {
	if o == nil || IsNil(o.Previous) {
		var ret string
		return ret
	}
	return *o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedTagsList) GetPreviousOk() (*string, bool) {
	if o == nil || IsNil(o.Previous) {
		return nil, false
	}
	return o.Previous, true
}

// HasPrevious returns a boolean if a field has been set.
func (o *PaginatedTagsList) HasPrevious() bool {
	if o != nil && !IsNil(o.Previous) {
		return true
	}

	return false
}

// SetPrevious gets a reference to the given string and assigns it to the Previous field.
func (o *PaginatedTagsList) SetPrevious(v string) {
	o.Previous = &v
}

// GetResults returns the Results field value
func (o *PaginatedTagsList) GetResults() []Tag {
	if o == nil {
		var ret []Tag
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *PaginatedTagsList) GetResultsOk() ([]Tag, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *PaginatedTagsList) SetResults(v []Tag) {
	o.Results = v
}

func (o PaginatedTagsList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedTagsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	if !IsNil(o.Previous) {
		toSerialize["previous"] = o.Previous
	}
	toSerialize["results"] = o.Results

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaginatedTagsList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaginatedTagsList := _PaginatedTagsList{}

	err = json.Unmarshal(data, &varPaginatedTagsList)

	if err != nil {
		return err
	}

	*o = PaginatedTagsList(varPaginatedTagsList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "next")
		delete(additionalProperties, "previous")
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaginatedTagsList struct {
	value *PaginatedTagsList
	isSet bool
}

func (v NullablePaginatedTagsList) Get() *PaginatedTagsList {
	return v.value
}

func (v *NullablePaginatedTagsList) Set(val *PaginatedTagsList) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedTagsList) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedTagsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedTagsList(val *PaginatedTagsList) *NullablePaginatedTagsList {
	return &NullablePaginatedTagsList{value: val, isSet: true}
}

func (v NullablePaginatedTagsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedTagsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


