/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// ReviewStageOperator The operator to apply to reviewers in a stage
type ReviewStageOperator string

// List of ReviewStageOperator
const (
	REVIEWSTAGEOPERATOR_AND ReviewStageOperator = "AND"
	REVIEWSTAGEOPERATOR_OR ReviewStageOperator = "OR"
)

// All allowed values of ReviewStageOperator enum
var AllowedReviewStageOperatorEnumValues = []ReviewStageOperator{
	"AND",
	"OR",
}

func (v *ReviewStageOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReviewStageOperator(value)
	for _, existing := range AllowedReviewStageOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReviewStageOperator", value)
}

// NewReviewStageOperatorFromValue returns a pointer to a valid ReviewStageOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReviewStageOperatorFromValue(v string) (*ReviewStageOperator, error) {
	ev := ReviewStageOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReviewStageOperator: valid values are %v", v, AllowedReviewStageOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReviewStageOperator) IsValid() bool {
	for _, existing := range AllowedReviewStageOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReviewStageOperator value
func (v ReviewStageOperator) Ptr() *ReviewStageOperator {
	return &v
}

type NullableReviewStageOperator struct {
	value *ReviewStageOperator
	isSet bool
}

func (v NullableReviewStageOperator) Get() *ReviewStageOperator {
	return v.value
}

func (v *NullableReviewStageOperator) Set(val *ReviewStageOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewStageOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewStageOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewStageOperator(val *ReviewStageOperator) *NullableReviewStageOperator {
	return &NullableReviewStageOperator{value: val, isSet: true}
}

func (v NullableReviewStageOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewStageOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

