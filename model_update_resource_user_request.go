/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateResourceUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateResourceUserRequest{}

// UpdateResourceUserRequest struct for UpdateResourceUserRequest
type UpdateResourceUserRequest struct {
	// The updated duration for which the resource can be accessed (in minutes). Use 0 for indefinite.
	DurationMinutes int32 `json:"duration_minutes"`
	// The updated remote ID of the access level granted to this user.
	AccessLevelRemoteId *string `json:"access_level_remote_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateResourceUserRequest UpdateResourceUserRequest

// NewUpdateResourceUserRequest instantiates a new UpdateResourceUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateResourceUserRequest(durationMinutes int32) *UpdateResourceUserRequest {
	this := UpdateResourceUserRequest{}
	this.DurationMinutes = durationMinutes
	return &this
}

// NewUpdateResourceUserRequestWithDefaults instantiates a new UpdateResourceUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateResourceUserRequestWithDefaults() *UpdateResourceUserRequest {
	this := UpdateResourceUserRequest{}
	return &this
}

// GetDurationMinutes returns the DurationMinutes field value
func (o *UpdateResourceUserRequest) GetDurationMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DurationMinutes
}

// GetDurationMinutesOk returns a tuple with the DurationMinutes field value
// and a boolean to check if the value has been set.
func (o *UpdateResourceUserRequest) GetDurationMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DurationMinutes, true
}

// SetDurationMinutes sets field value
func (o *UpdateResourceUserRequest) SetDurationMinutes(v int32) {
	o.DurationMinutes = v
}

// GetAccessLevelRemoteId returns the AccessLevelRemoteId field value if set, zero value otherwise.
func (o *UpdateResourceUserRequest) GetAccessLevelRemoteId() string {
	if o == nil || IsNil(o.AccessLevelRemoteId) {
		var ret string
		return ret
	}
	return *o.AccessLevelRemoteId
}

// GetAccessLevelRemoteIdOk returns a tuple with the AccessLevelRemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateResourceUserRequest) GetAccessLevelRemoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccessLevelRemoteId) {
		return nil, false
	}
	return o.AccessLevelRemoteId, true
}

// HasAccessLevelRemoteId returns a boolean if a field has been set.
func (o *UpdateResourceUserRequest) HasAccessLevelRemoteId() bool {
	if o != nil && !IsNil(o.AccessLevelRemoteId) {
		return true
	}

	return false
}

// SetAccessLevelRemoteId gets a reference to the given string and assigns it to the AccessLevelRemoteId field.
func (o *UpdateResourceUserRequest) SetAccessLevelRemoteId(v string) {
	o.AccessLevelRemoteId = &v
}

func (o UpdateResourceUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateResourceUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["duration_minutes"] = o.DurationMinutes
	if !IsNil(o.AccessLevelRemoteId) {
		toSerialize["access_level_remote_id"] = o.AccessLevelRemoteId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateResourceUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"duration_minutes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateResourceUserRequest := _UpdateResourceUserRequest{}

	err = json.Unmarshal(data, &varUpdateResourceUserRequest)

	if err != nil {
		return err
	}

	*o = UpdateResourceUserRequest(varUpdateResourceUserRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "duration_minutes")
		delete(additionalProperties, "access_level_remote_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateResourceUserRequest struct {
	value *UpdateResourceUserRequest
	isSet bool
}

func (v NullableUpdateResourceUserRequest) Get() *UpdateResourceUserRequest {
	return v.value
}

func (v *NullableUpdateResourceUserRequest) Set(val *UpdateResourceUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateResourceUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateResourceUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateResourceUserRequest(val *UpdateResourceUserRequest) *NullableUpdateResourceUserRequest {
	return &NullableUpdateResourceUserRequest{value: val, isSet: true}
}

func (v NullableUpdateResourceUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateResourceUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


