/*
 * Opal API
 *
 * Your Home For Developer Permissions.
 *
 * API version: 1.0
 * Contact: hello@opal.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
)

// PermissionAccessStatus # AccessStatus Object ### Description The `AccessStatus` object is used to represent the user's access to the permission.  ### Usage Example View the `AccessStatus` for a permission/user pair to determine if the user has access to the permission.
type PermissionAccessStatus struct {
	// The ID of the permission.
	PermissionId string `json:"permission_id"`
	// The ID of the user.
	UserId string `json:"user_id"`
	Status PermissionAccessStatusEnum `json:"status"`
	// The day and time the user's access will expire.
	ExpirationDate NullableTime `json:"expiration_date"`
}

// NewPermissionAccessStatus instantiates a new PermissionAccessStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionAccessStatus(permissionId string, userId string, status PermissionAccessStatusEnum, expirationDate NullableTime) *PermissionAccessStatus {
	this := PermissionAccessStatus{}
	this.PermissionId = permissionId
	this.UserId = userId
	this.Status = status
	this.ExpirationDate = expirationDate
	return &this
}

// NewPermissionAccessStatusWithDefaults instantiates a new PermissionAccessStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionAccessStatusWithDefaults() *PermissionAccessStatus {
	this := PermissionAccessStatus{}
	return &this
}

// GetPermissionId returns the PermissionId field value
func (o *PermissionAccessStatus) GetPermissionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PermissionId
}

// GetPermissionIdOk returns a tuple with the PermissionId field value
// and a boolean to check if the value has been set.
func (o *PermissionAccessStatus) GetPermissionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PermissionId, true
}

// SetPermissionId sets field value
func (o *PermissionAccessStatus) SetPermissionId(v string) {
	o.PermissionId = v
}

// GetUserId returns the UserId field value
func (o *PermissionAccessStatus) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *PermissionAccessStatus) GetUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *PermissionAccessStatus) SetUserId(v string) {
	o.UserId = v
}

// GetStatus returns the Status field value
func (o *PermissionAccessStatus) GetStatus() PermissionAccessStatusEnum {
	if o == nil {
		var ret PermissionAccessStatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PermissionAccessStatus) GetStatusOk() (*PermissionAccessStatusEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PermissionAccessStatus) SetStatus(v PermissionAccessStatusEnum) {
	o.Status = v
}

// GetExpirationDate returns the ExpirationDate field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *PermissionAccessStatus) GetExpirationDate() time.Time {
	if o == nil || o.ExpirationDate.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.ExpirationDate.Get()
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PermissionAccessStatus) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpirationDate.Get(), o.ExpirationDate.IsSet()
}

// SetExpirationDate sets field value
func (o *PermissionAccessStatus) SetExpirationDate(v time.Time) {
	o.ExpirationDate.Set(&v)
}

func (o PermissionAccessStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["permission_id"] = o.PermissionId
	}
	if true {
		toSerialize["user_id"] = o.UserId
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["expiration_date"] = o.ExpirationDate.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePermissionAccessStatus struct {
	value *PermissionAccessStatus
	isSet bool
}

func (v NullablePermissionAccessStatus) Get() *PermissionAccessStatus {
	return v.value
}

func (v *NullablePermissionAccessStatus) Set(val *PermissionAccessStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionAccessStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionAccessStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionAccessStatus(val *PermissionAccessStatus) *NullablePermissionAccessStatus {
	return &NullablePermissionAccessStatus{value: val, isSet: true}
}

func (v NullablePermissionAccessStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionAccessStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


