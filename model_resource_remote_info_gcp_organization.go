/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResourceRemoteInfoGcpOrganization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceRemoteInfoGcpOrganization{}

// ResourceRemoteInfoGcpOrganization Remote info for GCP organization.
type ResourceRemoteInfoGcpOrganization struct {
	// The id of the organization.
	OrganizationId string `json:"organization_id"`
}

type _ResourceRemoteInfoGcpOrganization ResourceRemoteInfoGcpOrganization

// NewResourceRemoteInfoGcpOrganization instantiates a new ResourceRemoteInfoGcpOrganization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceRemoteInfoGcpOrganization(organizationId string) *ResourceRemoteInfoGcpOrganization {
	this := ResourceRemoteInfoGcpOrganization{}
	this.OrganizationId = organizationId
	return &this
}

// NewResourceRemoteInfoGcpOrganizationWithDefaults instantiates a new ResourceRemoteInfoGcpOrganization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceRemoteInfoGcpOrganizationWithDefaults() *ResourceRemoteInfoGcpOrganization {
	this := ResourceRemoteInfoGcpOrganization{}
	return &this
}

// GetOrganizationId returns the OrganizationId field value
func (o *ResourceRemoteInfoGcpOrganization) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *ResourceRemoteInfoGcpOrganization) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *ResourceRemoteInfoGcpOrganization) SetOrganizationId(v string) {
	o.OrganizationId = v
}

func (o ResourceRemoteInfoGcpOrganization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceRemoteInfoGcpOrganization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["organization_id"] = o.OrganizationId
	return toSerialize, nil
}

func (o *ResourceRemoteInfoGcpOrganization) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organization_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceRemoteInfoGcpOrganization := _ResourceRemoteInfoGcpOrganization{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceRemoteInfoGcpOrganization)

	if err != nil {
		return err
	}

	*o = ResourceRemoteInfoGcpOrganization(varResourceRemoteInfoGcpOrganization)

	return err
}

type NullableResourceRemoteInfoGcpOrganization struct {
	value *ResourceRemoteInfoGcpOrganization
	isSet bool
}

func (v NullableResourceRemoteInfoGcpOrganization) Get() *ResourceRemoteInfoGcpOrganization {
	return v.value
}

func (v *NullableResourceRemoteInfoGcpOrganization) Set(val *ResourceRemoteInfoGcpOrganization) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceRemoteInfoGcpOrganization) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceRemoteInfoGcpOrganization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceRemoteInfoGcpOrganization(val *ResourceRemoteInfoGcpOrganization) *NullableResourceRemoteInfoGcpOrganization {
	return &NullableResourceRemoteInfoGcpOrganization{value: val, isSet: true}
}

func (v NullableResourceRemoteInfoGcpOrganization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceRemoteInfoGcpOrganization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


