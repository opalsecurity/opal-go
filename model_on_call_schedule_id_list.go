/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the OnCallScheduleIDList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnCallScheduleIDList{}

// OnCallScheduleIDList A list of on call schedule Opal UUIDs. To get the matching remote IDs, use the /on-call-schedules endpoints.
type OnCallScheduleIDList struct {
	OnCallScheduleIds []string `json:"on_call_schedule_ids"`
	AdditionalProperties map[string]interface{}
}

type _OnCallScheduleIDList OnCallScheduleIDList

// NewOnCallScheduleIDList instantiates a new OnCallScheduleIDList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnCallScheduleIDList(onCallScheduleIds []string) *OnCallScheduleIDList {
	this := OnCallScheduleIDList{}
	this.OnCallScheduleIds = onCallScheduleIds
	return &this
}

// NewOnCallScheduleIDListWithDefaults instantiates a new OnCallScheduleIDList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnCallScheduleIDListWithDefaults() *OnCallScheduleIDList {
	this := OnCallScheduleIDList{}
	return &this
}

// GetOnCallScheduleIds returns the OnCallScheduleIds field value
func (o *OnCallScheduleIDList) GetOnCallScheduleIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OnCallScheduleIds
}

// GetOnCallScheduleIdsOk returns a tuple with the OnCallScheduleIds field value
// and a boolean to check if the value has been set.
func (o *OnCallScheduleIDList) GetOnCallScheduleIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OnCallScheduleIds, true
}

// SetOnCallScheduleIds sets field value
func (o *OnCallScheduleIDList) SetOnCallScheduleIds(v []string) {
	o.OnCallScheduleIds = v
}

func (o OnCallScheduleIDList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnCallScheduleIDList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["on_call_schedule_ids"] = o.OnCallScheduleIds

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OnCallScheduleIDList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"on_call_schedule_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOnCallScheduleIDList := _OnCallScheduleIDList{}

	err = json.Unmarshal(data, &varOnCallScheduleIDList)

	if err != nil {
		return err
	}

	*o = OnCallScheduleIDList(varOnCallScheduleIDList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "on_call_schedule_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOnCallScheduleIDList struct {
	value *OnCallScheduleIDList
	isSet bool
}

func (v NullableOnCallScheduleIDList) Get() *OnCallScheduleIDList {
	return v.value
}

func (v *NullableOnCallScheduleIDList) Set(val *OnCallScheduleIDList) {
	v.value = val
	v.isSet = true
}

func (v NullableOnCallScheduleIDList) IsSet() bool {
	return v.isSet
}

func (v *NullableOnCallScheduleIDList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnCallScheduleIDList(val *OnCallScheduleIDList) *NullableOnCallScheduleIDList {
	return &NullableOnCallScheduleIDList{value: val, isSet: true}
}

func (v NullableOnCallScheduleIDList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnCallScheduleIDList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


