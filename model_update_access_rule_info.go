/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateAccessRuleInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAccessRuleInfo{}

// UpdateAccessRuleInfo # UpdateAccessRuleInfo Object ### Description The `UpdateAccessRuleInfo` object is used as an input to the UpdateAccessRule and CreateAccessRule API.
type UpdateAccessRuleInfo struct {
	// The name of the access rule.
	Name string `json:"name"`
	// A description of the group.
	Description string `json:"description"`
	// The ID of the owner of the group.
	AdminOwnerId string `json:"admin_owner_id"`
	// The status of the access rule.
	Status string `json:"status"`
	RuleClauses RuleClauses `json:"ruleClauses"`
}

type _UpdateAccessRuleInfo UpdateAccessRuleInfo

// NewUpdateAccessRuleInfo instantiates a new UpdateAccessRuleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAccessRuleInfo(name string, description string, adminOwnerId string, status string, ruleClauses RuleClauses) *UpdateAccessRuleInfo {
	this := UpdateAccessRuleInfo{}
	this.Name = name
	this.Description = description
	this.AdminOwnerId = adminOwnerId
	this.Status = status
	this.RuleClauses = ruleClauses
	return &this
}

// NewUpdateAccessRuleInfoWithDefaults instantiates a new UpdateAccessRuleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAccessRuleInfoWithDefaults() *UpdateAccessRuleInfo {
	this := UpdateAccessRuleInfo{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateAccessRuleInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateAccessRuleInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateAccessRuleInfo) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *UpdateAccessRuleInfo) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *UpdateAccessRuleInfo) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *UpdateAccessRuleInfo) SetDescription(v string) {
	o.Description = v
}

// GetAdminOwnerId returns the AdminOwnerId field value
func (o *UpdateAccessRuleInfo) GetAdminOwnerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminOwnerId
}

// GetAdminOwnerIdOk returns a tuple with the AdminOwnerId field value
// and a boolean to check if the value has been set.
func (o *UpdateAccessRuleInfo) GetAdminOwnerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminOwnerId, true
}

// SetAdminOwnerId sets field value
func (o *UpdateAccessRuleInfo) SetAdminOwnerId(v string) {
	o.AdminOwnerId = v
}

// GetStatus returns the Status field value
func (o *UpdateAccessRuleInfo) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *UpdateAccessRuleInfo) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *UpdateAccessRuleInfo) SetStatus(v string) {
	o.Status = v
}

// GetRuleClauses returns the RuleClauses field value
func (o *UpdateAccessRuleInfo) GetRuleClauses() RuleClauses {
	if o == nil {
		var ret RuleClauses
		return ret
	}

	return o.RuleClauses
}

// GetRuleClausesOk returns a tuple with the RuleClauses field value
// and a boolean to check if the value has been set.
func (o *UpdateAccessRuleInfo) GetRuleClausesOk() (*RuleClauses, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleClauses, true
}

// SetRuleClauses sets field value
func (o *UpdateAccessRuleInfo) SetRuleClauses(v RuleClauses) {
	o.RuleClauses = v
}

func (o UpdateAccessRuleInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAccessRuleInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["admin_owner_id"] = o.AdminOwnerId
	toSerialize["status"] = o.Status
	toSerialize["ruleClauses"] = o.RuleClauses
	return toSerialize, nil
}

func (o *UpdateAccessRuleInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"admin_owner_id",
		"status",
		"ruleClauses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateAccessRuleInfo := _UpdateAccessRuleInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateAccessRuleInfo)

	if err != nil {
		return err
	}

	*o = UpdateAccessRuleInfo(varUpdateAccessRuleInfo)

	return err
}

type NullableUpdateAccessRuleInfo struct {
	value *UpdateAccessRuleInfo
	isSet bool
}

func (v NullableUpdateAccessRuleInfo) Get() *UpdateAccessRuleInfo {
	return v.value
}

func (v *NullableUpdateAccessRuleInfo) Set(val *UpdateAccessRuleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAccessRuleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAccessRuleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAccessRuleInfo(val *UpdateAccessRuleInfo) *NullableUpdateAccessRuleInfo {
	return &NullableUpdateAccessRuleInfo{value: val, isSet: true}
}

func (v NullableUpdateAccessRuleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAccessRuleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


