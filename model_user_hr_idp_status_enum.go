/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// UserHrIdpStatusEnum User status pulled from an HR/IDP provider.
type UserHrIdpStatusEnum string

// List of UserHrIdpStatusEnum
const (
	USERHRIDPSTATUSENUM_ACTIVE UserHrIdpStatusEnum = "ACTIVE"
	USERHRIDPSTATUSENUM_SUSPENDED UserHrIdpStatusEnum = "SUSPENDED"
	USERHRIDPSTATUSENUM_DEPROVISIONED UserHrIdpStatusEnum = "DEPROVISIONED"
	USERHRIDPSTATUSENUM_DELETED UserHrIdpStatusEnum = "DELETED"
	USERHRIDPSTATUSENUM_NOT_FOUND UserHrIdpStatusEnum = "NOT_FOUND"
)

// All allowed values of UserHrIdpStatusEnum enum
var AllowedUserHrIdpStatusEnumEnumValues = []UserHrIdpStatusEnum{
	"ACTIVE",
	"SUSPENDED",
	"DEPROVISIONED",
	"DELETED",
	"NOT_FOUND",
}

func (v *UserHrIdpStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserHrIdpStatusEnum(value)
	for _, existing := range AllowedUserHrIdpStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserHrIdpStatusEnum", value)
}

// NewUserHrIdpStatusEnumFromValue returns a pointer to a valid UserHrIdpStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserHrIdpStatusEnumFromValue(v string) (*UserHrIdpStatusEnum, error) {
	ev := UserHrIdpStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserHrIdpStatusEnum: valid values are %v", v, AllowedUserHrIdpStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserHrIdpStatusEnum) IsValid() bool {
	for _, existing := range AllowedUserHrIdpStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserHrIdpStatusEnum value
func (v UserHrIdpStatusEnum) Ptr() *UserHrIdpStatusEnum {
	return &v
}

type NullableUserHrIdpStatusEnum struct {
	value *UserHrIdpStatusEnum
	isSet bool
}

func (v NullableUserHrIdpStatusEnum) Get() *UserHrIdpStatusEnum {
	return v.value
}

func (v *NullableUserHrIdpStatusEnum) Set(val *UserHrIdpStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableUserHrIdpStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableUserHrIdpStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserHrIdpStatusEnum(val *UserHrIdpStatusEnum) *NullableUserHrIdpStatusEnum {
	return &NullableUserHrIdpStatusEnum{value: val, isSet: true}
}

func (v NullableUserHrIdpStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserHrIdpStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

