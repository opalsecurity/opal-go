/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ResourceNHI type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceNHI{}

// ResourceNHI # Resource Non-Human Identity Direct Access Object ### Description This object is used to represent a non-human identity with direct access to a resource.
type ResourceNHI struct {
	// The ID of the resource.
	ResourceId string `json:"resource_id"`
	// The resource ID of the non-human identity.
	NonHumanIdentityId string `json:"non_human_identity_id"`
	AccessLevel *ResourceAccessLevel `json:"access_level,omitempty"`
	// The day and time the non-human identity's access will expire.
	ExpirationDate *time.Time `json:"expiration_date,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResourceNHI ResourceNHI

// NewResourceNHI instantiates a new ResourceNHI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceNHI(resourceId string, nonHumanIdentityId string) *ResourceNHI {
	this := ResourceNHI{}
	this.ResourceId = resourceId
	this.NonHumanIdentityId = nonHumanIdentityId
	return &this
}

// NewResourceNHIWithDefaults instantiates a new ResourceNHI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceNHIWithDefaults() *ResourceNHI {
	this := ResourceNHI{}
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *ResourceNHI) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceNHI) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *ResourceNHI) SetResourceId(v string) {
	o.ResourceId = v
}

// GetNonHumanIdentityId returns the NonHumanIdentityId field value
func (o *ResourceNHI) GetNonHumanIdentityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NonHumanIdentityId
}

// GetNonHumanIdentityIdOk returns a tuple with the NonHumanIdentityId field value
// and a boolean to check if the value has been set.
func (o *ResourceNHI) GetNonHumanIdentityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NonHumanIdentityId, true
}

// SetNonHumanIdentityId sets field value
func (o *ResourceNHI) SetNonHumanIdentityId(v string) {
	o.NonHumanIdentityId = v
}

// GetAccessLevel returns the AccessLevel field value if set, zero value otherwise.
func (o *ResourceNHI) GetAccessLevel() ResourceAccessLevel {
	if o == nil || IsNil(o.AccessLevel) {
		var ret ResourceAccessLevel
		return ret
	}
	return *o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceNHI) GetAccessLevelOk() (*ResourceAccessLevel, bool) {
	if o == nil || IsNil(o.AccessLevel) {
		return nil, false
	}
	return o.AccessLevel, true
}

// HasAccessLevel returns a boolean if a field has been set.
func (o *ResourceNHI) HasAccessLevel() bool {
	if o != nil && !IsNil(o.AccessLevel) {
		return true
	}

	return false
}

// SetAccessLevel gets a reference to the given ResourceAccessLevel and assigns it to the AccessLevel field.
func (o *ResourceNHI) SetAccessLevel(v ResourceAccessLevel) {
	o.AccessLevel = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *ResourceNHI) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceNHI) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *ResourceNHI) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *ResourceNHI) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

func (o ResourceNHI) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceNHI) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["non_human_identity_id"] = o.NonHumanIdentityId
	if !IsNil(o.AccessLevel) {
		toSerialize["access_level"] = o.AccessLevel
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expiration_date"] = o.ExpirationDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResourceNHI) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resource_id",
		"non_human_identity_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceNHI := _ResourceNHI{}

	err = json.Unmarshal(data, &varResourceNHI)

	if err != nil {
		return err
	}

	*o = ResourceNHI(varResourceNHI)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resource_id")
		delete(additionalProperties, "non_human_identity_id")
		delete(additionalProperties, "access_level")
		delete(additionalProperties, "expiration_date")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResourceNHI struct {
	value *ResourceNHI
	isSet bool
}

func (v NullableResourceNHI) Get() *ResourceNHI {
	return v.value
}

func (v *NullableResourceNHI) Set(val *ResourceNHI) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceNHI) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceNHI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceNHI(val *ResourceNHI) *NullableResourceNHI {
	return &NullableResourceNHI{value: val, isSet: true}
}

func (v NullableResourceNHI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceNHI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


