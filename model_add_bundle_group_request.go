/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddBundleGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddBundleGroupRequest{}

// AddBundleGroupRequest struct for AddBundleGroupRequest
type AddBundleGroupRequest struct {
	// The ID of the group to add.
	GroupId string `json:"group_id"`
	// The remote ID of the access level to grant to this user. Required if the group being added requires an access level. If omitted, the default access level remote ID value (empty string) is used.
	AccessLevelRemoteId *string `json:"access_level_remote_id,omitempty"`
	// The name of the access level to grant to this user. If omitted, the default access level name value (empty string) is used.
	AccessLevelName *string `json:"access_level_name,omitempty"`
}

type _AddBundleGroupRequest AddBundleGroupRequest

// NewAddBundleGroupRequest instantiates a new AddBundleGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddBundleGroupRequest(groupId string) *AddBundleGroupRequest {
	this := AddBundleGroupRequest{}
	this.GroupId = groupId
	return &this
}

// NewAddBundleGroupRequestWithDefaults instantiates a new AddBundleGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddBundleGroupRequestWithDefaults() *AddBundleGroupRequest {
	this := AddBundleGroupRequest{}
	return &this
}

// GetGroupId returns the GroupId field value
func (o *AddBundleGroupRequest) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *AddBundleGroupRequest) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *AddBundleGroupRequest) SetGroupId(v string) {
	o.GroupId = v
}

// GetAccessLevelRemoteId returns the AccessLevelRemoteId field value if set, zero value otherwise.
func (o *AddBundleGroupRequest) GetAccessLevelRemoteId() string {
	if o == nil || IsNil(o.AccessLevelRemoteId) {
		var ret string
		return ret
	}
	return *o.AccessLevelRemoteId
}

// GetAccessLevelRemoteIdOk returns a tuple with the AccessLevelRemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddBundleGroupRequest) GetAccessLevelRemoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccessLevelRemoteId) {
		return nil, false
	}
	return o.AccessLevelRemoteId, true
}

// HasAccessLevelRemoteId returns a boolean if a field has been set.
func (o *AddBundleGroupRequest) HasAccessLevelRemoteId() bool {
	if o != nil && !IsNil(o.AccessLevelRemoteId) {
		return true
	}

	return false
}

// SetAccessLevelRemoteId gets a reference to the given string and assigns it to the AccessLevelRemoteId field.
func (o *AddBundleGroupRequest) SetAccessLevelRemoteId(v string) {
	o.AccessLevelRemoteId = &v
}

// GetAccessLevelName returns the AccessLevelName field value if set, zero value otherwise.
func (o *AddBundleGroupRequest) GetAccessLevelName() string {
	if o == nil || IsNil(o.AccessLevelName) {
		var ret string
		return ret
	}
	return *o.AccessLevelName
}

// GetAccessLevelNameOk returns a tuple with the AccessLevelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddBundleGroupRequest) GetAccessLevelNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccessLevelName) {
		return nil, false
	}
	return o.AccessLevelName, true
}

// HasAccessLevelName returns a boolean if a field has been set.
func (o *AddBundleGroupRequest) HasAccessLevelName() bool {
	if o != nil && !IsNil(o.AccessLevelName) {
		return true
	}

	return false
}

// SetAccessLevelName gets a reference to the given string and assigns it to the AccessLevelName field.
func (o *AddBundleGroupRequest) SetAccessLevelName(v string) {
	o.AccessLevelName = &v
}

func (o AddBundleGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddBundleGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group_id"] = o.GroupId
	if !IsNil(o.AccessLevelRemoteId) {
		toSerialize["access_level_remote_id"] = o.AccessLevelRemoteId
	}
	if !IsNil(o.AccessLevelName) {
		toSerialize["access_level_name"] = o.AccessLevelName
	}
	return toSerialize, nil
}

func (o *AddBundleGroupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddBundleGroupRequest := _AddBundleGroupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddBundleGroupRequest)

	if err != nil {
		return err
	}

	*o = AddBundleGroupRequest(varAddBundleGroupRequest)

	return err
}

type NullableAddBundleGroupRequest struct {
	value *AddBundleGroupRequest
	isSet bool
}

func (v NullableAddBundleGroupRequest) Get() *AddBundleGroupRequest {
	return v.value
}

func (v *NullableAddBundleGroupRequest) Set(val *AddBundleGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddBundleGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddBundleGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddBundleGroupRequest(val *AddBundleGroupRequest) *NullableAddBundleGroupRequest {
	return &NullableAddBundleGroupRequest{value: val, isSet: true}
}

func (v NullableAddBundleGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddBundleGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


