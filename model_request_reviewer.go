/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RequestReviewer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestReviewer{}

// RequestReviewer A reviewer in a request stage
type RequestReviewer struct {
	// The unique identifier of the reviewer
	Id string `json:"id"`
	// The status of this reviewer's review
	Status string `json:"status"`
}

type _RequestReviewer RequestReviewer

// NewRequestReviewer instantiates a new RequestReviewer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestReviewer(id string, status string) *RequestReviewer {
	this := RequestReviewer{}
	this.Id = id
	this.Status = status
	return &this
}

// NewRequestReviewerWithDefaults instantiates a new RequestReviewer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestReviewerWithDefaults() *RequestReviewer {
	this := RequestReviewer{}
	return &this
}

// GetId returns the Id field value
func (o *RequestReviewer) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RequestReviewer) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RequestReviewer) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *RequestReviewer) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *RequestReviewer) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *RequestReviewer) SetStatus(v string) {
	o.Status = v
}

func (o RequestReviewer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestReviewer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *RequestReviewer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestReviewer := _RequestReviewer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRequestReviewer)

	if err != nil {
		return err
	}

	*o = RequestReviewer(varRequestReviewer)

	return err
}

type NullableRequestReviewer struct {
	value *RequestReviewer
	isSet bool
}

func (v NullableRequestReviewer) Get() *RequestReviewer {
	return v.value
}

func (v *NullableRequestReviewer) Set(val *RequestReviewer) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestReviewer) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestReviewer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestReviewer(val *RequestReviewer) *NullableRequestReviewer {
	return &NullableRequestReviewer{value: val, isSet: true}
}

func (v NullableRequestReviewer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestReviewer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


