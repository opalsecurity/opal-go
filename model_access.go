/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Access type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Access{}

// Access # Access Object ### Description The `Access` object is used to represent a principal's access to an entity, either directly or inherited.  ### Usage Example Fetch from the `LIST ResourceNonHumanIdentities` endpoint.
type Access struct {
	// The ID of the principal with access.
	PrincipalId string `json:"principal_id"`
	PrincipalType EntityTypeEnum `json:"principal_type"`
	// The ID of the entity being accessed.
	EntityId string `json:"entity_id"`
	EntityType EntityTypeEnum `json:"entity_type"`
	AccessLevel *ResourceAccessLevel `json:"access_level,omitempty"`
	// The day and time the principal's access will expire.
	ExpirationDate *time.Time `json:"expiration_date,omitempty"`
	// The principal has direct access to this entity (vs. inherited access).
	HasDirectAccess bool `json:"has_direct_access"`
	// The number of ways in which the principal has access to this entity (directly and inherited).
	NumAccessPaths int32 `json:"num_access_paths"`
}

type _Access Access

// NewAccess instantiates a new Access object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccess(principalId string, principalType EntityTypeEnum, entityId string, entityType EntityTypeEnum, hasDirectAccess bool, numAccessPaths int32) *Access {
	this := Access{}
	this.PrincipalId = principalId
	this.PrincipalType = principalType
	this.EntityId = entityId
	this.EntityType = entityType
	this.HasDirectAccess = hasDirectAccess
	this.NumAccessPaths = numAccessPaths
	return &this
}

// NewAccessWithDefaults instantiates a new Access object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessWithDefaults() *Access {
	this := Access{}
	return &this
}

// GetPrincipalId returns the PrincipalId field value
func (o *Access) GetPrincipalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrincipalId
}

// GetPrincipalIdOk returns a tuple with the PrincipalId field value
// and a boolean to check if the value has been set.
func (o *Access) GetPrincipalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrincipalId, true
}

// SetPrincipalId sets field value
func (o *Access) SetPrincipalId(v string) {
	o.PrincipalId = v
}

// GetPrincipalType returns the PrincipalType field value
func (o *Access) GetPrincipalType() EntityTypeEnum {
	if o == nil {
		var ret EntityTypeEnum
		return ret
	}

	return o.PrincipalType
}

// GetPrincipalTypeOk returns a tuple with the PrincipalType field value
// and a boolean to check if the value has been set.
func (o *Access) GetPrincipalTypeOk() (*EntityTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrincipalType, true
}

// SetPrincipalType sets field value
func (o *Access) SetPrincipalType(v EntityTypeEnum) {
	o.PrincipalType = v
}

// GetEntityId returns the EntityId field value
func (o *Access) GetEntityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *Access) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *Access) SetEntityId(v string) {
	o.EntityId = v
}

// GetEntityType returns the EntityType field value
func (o *Access) GetEntityType() EntityTypeEnum {
	if o == nil {
		var ret EntityTypeEnum
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *Access) GetEntityTypeOk() (*EntityTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *Access) SetEntityType(v EntityTypeEnum) {
	o.EntityType = v
}

// GetAccessLevel returns the AccessLevel field value if set, zero value otherwise.
func (o *Access) GetAccessLevel() ResourceAccessLevel {
	if o == nil || IsNil(o.AccessLevel) {
		var ret ResourceAccessLevel
		return ret
	}
	return *o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Access) GetAccessLevelOk() (*ResourceAccessLevel, bool) {
	if o == nil || IsNil(o.AccessLevel) {
		return nil, false
	}
	return o.AccessLevel, true
}

// HasAccessLevel returns a boolean if a field has been set.
func (o *Access) HasAccessLevel() bool {
	if o != nil && !IsNil(o.AccessLevel) {
		return true
	}

	return false
}

// SetAccessLevel gets a reference to the given ResourceAccessLevel and assigns it to the AccessLevel field.
func (o *Access) SetAccessLevel(v ResourceAccessLevel) {
	o.AccessLevel = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *Access) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Access) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *Access) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *Access) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetHasDirectAccess returns the HasDirectAccess field value
func (o *Access) GetHasDirectAccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasDirectAccess
}

// GetHasDirectAccessOk returns a tuple with the HasDirectAccess field value
// and a boolean to check if the value has been set.
func (o *Access) GetHasDirectAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasDirectAccess, true
}

// SetHasDirectAccess sets field value
func (o *Access) SetHasDirectAccess(v bool) {
	o.HasDirectAccess = v
}

// GetNumAccessPaths returns the NumAccessPaths field value
func (o *Access) GetNumAccessPaths() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumAccessPaths
}

// GetNumAccessPathsOk returns a tuple with the NumAccessPaths field value
// and a boolean to check if the value has been set.
func (o *Access) GetNumAccessPathsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumAccessPaths, true
}

// SetNumAccessPaths sets field value
func (o *Access) SetNumAccessPaths(v int32) {
	o.NumAccessPaths = v
}

func (o Access) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Access) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["principal_id"] = o.PrincipalId
	toSerialize["principal_type"] = o.PrincipalType
	toSerialize["entity_id"] = o.EntityId
	toSerialize["entity_type"] = o.EntityType
	if !IsNil(o.AccessLevel) {
		toSerialize["access_level"] = o.AccessLevel
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	toSerialize["has_direct_access"] = o.HasDirectAccess
	toSerialize["num_access_paths"] = o.NumAccessPaths
	return toSerialize, nil
}

func (o *Access) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"principal_id",
		"principal_type",
		"entity_id",
		"entity_type",
		"has_direct_access",
		"num_access_paths",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccess := _Access{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccess)

	if err != nil {
		return err
	}

	*o = Access(varAccess)

	return err
}

type NullableAccess struct {
	value *Access
	isSet bool
}

func (v NullableAccess) Get() *Access {
	return v.value
}

func (v *NullableAccess) Set(val *Access) {
	v.value = val
	v.isSet = true
}

func (v NullableAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccess(val *Access) *NullableAccess {
	return &NullableAccess{value: val, isSet: true}
}

func (v NullableAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


