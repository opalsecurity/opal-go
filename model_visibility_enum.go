/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// VisibilityEnum The visibility level of the entity.
type VisibilityEnum string

// List of VisibilityEnum
const (
	VISIBILITYENUM_GLOBAL VisibilityEnum = "GLOBAL"
	VISIBILITYENUM_TEAM VisibilityEnum = "TEAM"
)

// All allowed values of VisibilityEnum enum
var AllowedVisibilityEnumEnumValues = []VisibilityEnum{
	"GLOBAL",
	"TEAM",
}

func (v *VisibilityEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VisibilityEnum(value)
	for _, existing := range AllowedVisibilityEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VisibilityEnum", value)
}

// NewVisibilityEnumFromValue returns a pointer to a valid VisibilityEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVisibilityEnumFromValue(v string) (*VisibilityEnum, error) {
	ev := VisibilityEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VisibilityEnum: valid values are %v", v, AllowedVisibilityEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VisibilityEnum) IsValid() bool {
	for _, existing := range AllowedVisibilityEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VisibilityEnum value
func (v VisibilityEnum) Ptr() *VisibilityEnum {
	return &v
}

type NullableVisibilityEnum struct {
	value *VisibilityEnum
	isSet bool
}

func (v NullableVisibilityEnum) Get() *VisibilityEnum {
	return v.value
}

func (v *NullableVisibilityEnum) Set(val *VisibilityEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableVisibilityEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableVisibilityEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisibilityEnum(val *VisibilityEnum) *NullableVisibilityEnum {
	return &NullableVisibilityEnum{value: val, isSet: true}
}

func (v NullableVisibilityEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisibilityEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

