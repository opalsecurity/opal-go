/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// checks if the GroupAccessLevel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupAccessLevel{}

// GroupAccessLevel # Access Level Object ### Description The `GroupAccessLevel` object is used to represent the level of access that a user has to a group or a group has to a group. The \"default\" access level is a `GroupAccessLevel` object whose fields are all empty strings.  ### Usage Example View the `GroupAccessLevel` of a group/user or group/group pair to see the level of access granted to the group.
type GroupAccessLevel struct {
	// The human-readable name of the access level.
	AccessLevelName string `json:"access_level_name"`
	// The machine-readable identifier of the access level.
	AccessLevelRemoteId string `json:"access_level_remote_id"`
}

// NewGroupAccessLevel instantiates a new GroupAccessLevel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupAccessLevel(accessLevelName string, accessLevelRemoteId string) *GroupAccessLevel {
	this := GroupAccessLevel{}
	this.AccessLevelName = accessLevelName
	this.AccessLevelRemoteId = accessLevelRemoteId
	return &this
}

// NewGroupAccessLevelWithDefaults instantiates a new GroupAccessLevel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupAccessLevelWithDefaults() *GroupAccessLevel {
	this := GroupAccessLevel{}
	return &this
}

// GetAccessLevelName returns the AccessLevelName field value
func (o *GroupAccessLevel) GetAccessLevelName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessLevelName
}

// GetAccessLevelNameOk returns a tuple with the AccessLevelName field value
// and a boolean to check if the value has been set.
func (o *GroupAccessLevel) GetAccessLevelNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessLevelName, true
}

// SetAccessLevelName sets field value
func (o *GroupAccessLevel) SetAccessLevelName(v string) {
	o.AccessLevelName = v
}

// GetAccessLevelRemoteId returns the AccessLevelRemoteId field value
func (o *GroupAccessLevel) GetAccessLevelRemoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessLevelRemoteId
}

// GetAccessLevelRemoteIdOk returns a tuple with the AccessLevelRemoteId field value
// and a boolean to check if the value has been set.
func (o *GroupAccessLevel) GetAccessLevelRemoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessLevelRemoteId, true
}

// SetAccessLevelRemoteId sets field value
func (o *GroupAccessLevel) SetAccessLevelRemoteId(v string) {
	o.AccessLevelRemoteId = v
}

func (o GroupAccessLevel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupAccessLevel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_level_name"] = o.AccessLevelName
	toSerialize["access_level_remote_id"] = o.AccessLevelRemoteId
	return toSerialize, nil
}

type NullableGroupAccessLevel struct {
	value *GroupAccessLevel
	isSet bool
}

func (v NullableGroupAccessLevel) Get() *GroupAccessLevel {
	return v.value
}

func (v *NullableGroupAccessLevel) Set(val *GroupAccessLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupAccessLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupAccessLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupAccessLevel(val *GroupAccessLevel) *NullableGroupAccessLevel {
	return &NullableGroupAccessLevel{value: val, isSet: true}
}

func (v NullableGroupAccessLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupAccessLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


