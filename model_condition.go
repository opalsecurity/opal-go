/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// checks if the Condition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Condition{}

// Condition # Condition Object ### Description The `Condition` object is used to represent a condition.  ### Usage Example Used to match request configurations to users in `RequestConfiguration`
type Condition struct {
	// The list of group IDs to match.
	GroupIds []string `json:"group_ids,omitempty"`
	// The list of role remote IDs to match.
	RoleRemoteIds []string `json:"role_remote_ids,omitempty"`
}

// NewCondition instantiates a new Condition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCondition() *Condition {
	this := Condition{}
	return &this
}

// NewConditionWithDefaults instantiates a new Condition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionWithDefaults() *Condition {
	this := Condition{}
	return &this
}

// GetGroupIds returns the GroupIds field value if set, zero value otherwise.
func (o *Condition) GetGroupIds() []string {
	if o == nil || IsNil(o.GroupIds) {
		var ret []string
		return ret
	}
	return o.GroupIds
}

// GetGroupIdsOk returns a tuple with the GroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetGroupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupIds) {
		return nil, false
	}
	return o.GroupIds, true
}

// HasGroupIds returns a boolean if a field has been set.
func (o *Condition) HasGroupIds() bool {
	if o != nil && !IsNil(o.GroupIds) {
		return true
	}

	return false
}

// SetGroupIds gets a reference to the given []string and assigns it to the GroupIds field.
func (o *Condition) SetGroupIds(v []string) {
	o.GroupIds = v
}

// GetRoleRemoteIds returns the RoleRemoteIds field value if set, zero value otherwise.
func (o *Condition) GetRoleRemoteIds() []string {
	if o == nil || IsNil(o.RoleRemoteIds) {
		var ret []string
		return ret
	}
	return o.RoleRemoteIds
}

// GetRoleRemoteIdsOk returns a tuple with the RoleRemoteIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetRoleRemoteIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.RoleRemoteIds) {
		return nil, false
	}
	return o.RoleRemoteIds, true
}

// HasRoleRemoteIds returns a boolean if a field has been set.
func (o *Condition) HasRoleRemoteIds() bool {
	if o != nil && !IsNil(o.RoleRemoteIds) {
		return true
	}

	return false
}

// SetRoleRemoteIds gets a reference to the given []string and assigns it to the RoleRemoteIds field.
func (o *Condition) SetRoleRemoteIds(v []string) {
	o.RoleRemoteIds = v
}

func (o Condition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Condition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupIds) {
		toSerialize["group_ids"] = o.GroupIds
	}
	if !IsNil(o.RoleRemoteIds) {
		toSerialize["role_remote_ids"] = o.RoleRemoteIds
	}
	return toSerialize, nil
}

type NullableCondition struct {
	value *Condition
	isSet bool
}

func (v NullableCondition) Get() *Condition {
	return v.value
}

func (v *NullableCondition) Set(val *Condition) {
	v.value = val
	v.isSet = true
}

func (v NullableCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondition(val *Condition) *NullableCondition {
	return &NullableCondition{value: val, isSet: true}
}

func (v NullableCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


