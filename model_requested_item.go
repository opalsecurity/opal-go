/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// checks if the RequestedItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestedItem{}

// RequestedItem # Requested Item Object ### Description The `RequestedItem` object is used to represent a request target item.  ### Usage Example Returned from the `GET Requests` endpoint.
type RequestedItem struct {
	// The ID of the resource requested.
	ResourceId *string `json:"resource_id,omitempty"`
	// The ID of the group requested.
	GroupId *string `json:"group_id,omitempty"`
	// The name of the access level requested.
	AccessLevelName *string `json:"access_level_name,omitempty"`
	// The ID of the access level requested on the remote system.
	AccessLevelRemoteId *string `json:"access_level_remote_id,omitempty"`
	// The name of the target.
	Name *string `json:"name,omitempty"`
	// The ID of the target on the remote system.
	RemoteId *string `json:"remote_id,omitempty"`
	// The name of the target on the remote system.
	RemoteName *string `json:"remote_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RequestedItem RequestedItem

// NewRequestedItem instantiates a new RequestedItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestedItem() *RequestedItem {
	this := RequestedItem{}
	return &this
}

// NewRequestedItemWithDefaults instantiates a new RequestedItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestedItemWithDefaults() *RequestedItem {
	this := RequestedItem{}
	return &this
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *RequestedItem) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestedItem) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *RequestedItem) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *RequestedItem) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *RequestedItem) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestedItem) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *RequestedItem) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *RequestedItem) SetGroupId(v string) {
	o.GroupId = &v
}

// GetAccessLevelName returns the AccessLevelName field value if set, zero value otherwise.
func (o *RequestedItem) GetAccessLevelName() string {
	if o == nil || IsNil(o.AccessLevelName) {
		var ret string
		return ret
	}
	return *o.AccessLevelName
}

// GetAccessLevelNameOk returns a tuple with the AccessLevelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestedItem) GetAccessLevelNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccessLevelName) {
		return nil, false
	}
	return o.AccessLevelName, true
}

// HasAccessLevelName returns a boolean if a field has been set.
func (o *RequestedItem) HasAccessLevelName() bool {
	if o != nil && !IsNil(o.AccessLevelName) {
		return true
	}

	return false
}

// SetAccessLevelName gets a reference to the given string and assigns it to the AccessLevelName field.
func (o *RequestedItem) SetAccessLevelName(v string) {
	o.AccessLevelName = &v
}

// GetAccessLevelRemoteId returns the AccessLevelRemoteId field value if set, zero value otherwise.
func (o *RequestedItem) GetAccessLevelRemoteId() string {
	if o == nil || IsNil(o.AccessLevelRemoteId) {
		var ret string
		return ret
	}
	return *o.AccessLevelRemoteId
}

// GetAccessLevelRemoteIdOk returns a tuple with the AccessLevelRemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestedItem) GetAccessLevelRemoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccessLevelRemoteId) {
		return nil, false
	}
	return o.AccessLevelRemoteId, true
}

// HasAccessLevelRemoteId returns a boolean if a field has been set.
func (o *RequestedItem) HasAccessLevelRemoteId() bool {
	if o != nil && !IsNil(o.AccessLevelRemoteId) {
		return true
	}

	return false
}

// SetAccessLevelRemoteId gets a reference to the given string and assigns it to the AccessLevelRemoteId field.
func (o *RequestedItem) SetAccessLevelRemoteId(v string) {
	o.AccessLevelRemoteId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RequestedItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestedItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RequestedItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RequestedItem) SetName(v string) {
	o.Name = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise.
func (o *RequestedItem) GetRemoteId() string {
	if o == nil || IsNil(o.RemoteId) {
		var ret string
		return ret
	}
	return *o.RemoteId
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestedItem) GetRemoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteId) {
		return nil, false
	}
	return o.RemoteId, true
}

// HasRemoteId returns a boolean if a field has been set.
func (o *RequestedItem) HasRemoteId() bool {
	if o != nil && !IsNil(o.RemoteId) {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given string and assigns it to the RemoteId field.
func (o *RequestedItem) SetRemoteId(v string) {
	o.RemoteId = &v
}

// GetRemoteName returns the RemoteName field value if set, zero value otherwise.
func (o *RequestedItem) GetRemoteName() string {
	if o == nil || IsNil(o.RemoteName) {
		var ret string
		return ret
	}
	return *o.RemoteName
}

// GetRemoteNameOk returns a tuple with the RemoteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestedItem) GetRemoteNameOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteName) {
		return nil, false
	}
	return o.RemoteName, true
}

// HasRemoteName returns a boolean if a field has been set.
func (o *RequestedItem) HasRemoteName() bool {
	if o != nil && !IsNil(o.RemoteName) {
		return true
	}

	return false
}

// SetRemoteName gets a reference to the given string and assigns it to the RemoteName field.
func (o *RequestedItem) SetRemoteName(v string) {
	o.RemoteName = &v
}

func (o RequestedItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestedItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceId) {
		toSerialize["resource_id"] = o.ResourceId
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.AccessLevelName) {
		toSerialize["access_level_name"] = o.AccessLevelName
	}
	if !IsNil(o.AccessLevelRemoteId) {
		toSerialize["access_level_remote_id"] = o.AccessLevelRemoteId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RemoteId) {
		toSerialize["remote_id"] = o.RemoteId
	}
	if !IsNil(o.RemoteName) {
		toSerialize["remote_name"] = o.RemoteName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RequestedItem) UnmarshalJSON(data []byte) (err error) {
	varRequestedItem := _RequestedItem{}

	err = json.Unmarshal(data, &varRequestedItem)

	if err != nil {
		return err
	}

	*o = RequestedItem(varRequestedItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resource_id")
		delete(additionalProperties, "group_id")
		delete(additionalProperties, "access_level_name")
		delete(additionalProperties, "access_level_remote_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "remote_id")
		delete(additionalProperties, "remote_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRequestedItem struct {
	value *RequestedItem
	isSet bool
}

func (v NullableRequestedItem) Get() *RequestedItem {
	return v.value
}

func (v *NullableRequestedItem) Set(val *RequestedItem) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestedItem) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestedItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestedItem(val *RequestedItem) *NullableRequestedItem {
	return &NullableRequestedItem{value: val, isSet: true}
}

func (v NullableRequestedItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestedItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


