/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// checks if the AppsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppsList{}

// AppsList A list of apps.
type AppsList struct {
	Apps []App `json:"apps"`
}

// NewAppsList instantiates a new AppsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppsList(apps []App) *AppsList {
	this := AppsList{}
	this.Apps = apps
	return &this
}

// NewAppsListWithDefaults instantiates a new AppsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppsListWithDefaults() *AppsList {
	this := AppsList{}
	return &this
}

// GetApps returns the Apps field value
func (o *AppsList) GetApps() []App {
	if o == nil {
		var ret []App
		return ret
	}

	return o.Apps
}

// GetAppsOk returns a tuple with the Apps field value
// and a boolean to check if the value has been set.
func (o *AppsList) GetAppsOk() ([]App, bool) {
	if o == nil {
		return nil, false
	}
	return o.Apps, true
}

// SetApps sets field value
func (o *AppsList) SetApps(v []App) {
	o.Apps = v
}

func (o AppsList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apps"] = o.Apps
	return toSerialize, nil
}

type NullableAppsList struct {
	value *AppsList
	isSet bool
}

func (v NullableAppsList) Get() *AppsList {
	return v.value
}

func (v *NullableAppsList) Set(val *AppsList) {
	v.value = val
	v.isSet = true
}

func (v NullableAppsList) IsSet() bool {
	return v.isSet
}

func (v *NullableAppsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppsList(val *AppsList) *NullableAppsList {
	return &NullableAppsList{value: val, isSet: true}
}

func (v NullableAppsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


