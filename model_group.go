/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// Group # Group Object ### Description The `Group` object is used to represent a group.  ### Usage Example Update from the `UPDATE Groups` endpoint.
type Group struct {
	// The ID of the group.
	GroupId string `json:"group_id"`
	// The name of the group.
	Name *string `json:"name,omitempty"`
	// A description of the group.
	Description *string `json:"description,omitempty"`
	// The ID of the owning team of the group.
	OwnerTeamId *string `json:"owner_team_id,omitempty"`
	GroupFunction *GroupFunctionEnum `json:"group_function,omitempty"`
	GroupType *GroupTypeEnum `json:"group_type,omitempty"`
	Visibility *VisibilityEnum `json:"visibility,omitempty"`
	// The maximum duration access to the group can be requested for (in minutes).
	MaxDuration *int32 `json:"max_duration,omitempty"`
	// A bool representing whether or not access requests to the group require manager approval.
	RequireManagerApproval *bool `json:"require_manager_approval,omitempty"`
	// A bool representing whether or not access requests to the group require a support ticket.
	RequireSupportTicket *bool `json:"require_support_ticket,omitempty"`
	// The ID of the folder that the group is located in.
	FolderId *string `json:"folder_id,omitempty"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup(groupId string) *Group {
	this := Group{}
	this.GroupId = groupId
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	return &this
}

// GetGroupId returns the GroupId field value
func (o *Group) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *Group) GetGroupIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *Group) SetGroupId(v string) {
	o.GroupId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Group) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Group) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Group) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Group) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Group) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Group) SetDescription(v string) {
	o.Description = &v
}

// GetOwnerTeamId returns the OwnerTeamId field value if set, zero value otherwise.
func (o *Group) GetOwnerTeamId() string {
	if o == nil || o.OwnerTeamId == nil {
		var ret string
		return ret
	}
	return *o.OwnerTeamId
}

// GetOwnerTeamIdOk returns a tuple with the OwnerTeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetOwnerTeamIdOk() (*string, bool) {
	if o == nil || o.OwnerTeamId == nil {
		return nil, false
	}
	return o.OwnerTeamId, true
}

// HasOwnerTeamId returns a boolean if a field has been set.
func (o *Group) HasOwnerTeamId() bool {
	if o != nil && o.OwnerTeamId != nil {
		return true
	}

	return false
}

// SetOwnerTeamId gets a reference to the given string and assigns it to the OwnerTeamId field.
func (o *Group) SetOwnerTeamId(v string) {
	o.OwnerTeamId = &v
}

// GetGroupFunction returns the GroupFunction field value if set, zero value otherwise.
func (o *Group) GetGroupFunction() GroupFunctionEnum {
	if o == nil || o.GroupFunction == nil {
		var ret GroupFunctionEnum
		return ret
	}
	return *o.GroupFunction
}

// GetGroupFunctionOk returns a tuple with the GroupFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetGroupFunctionOk() (*GroupFunctionEnum, bool) {
	if o == nil || o.GroupFunction == nil {
		return nil, false
	}
	return o.GroupFunction, true
}

// HasGroupFunction returns a boolean if a field has been set.
func (o *Group) HasGroupFunction() bool {
	if o != nil && o.GroupFunction != nil {
		return true
	}

	return false
}

// SetGroupFunction gets a reference to the given GroupFunctionEnum and assigns it to the GroupFunction field.
func (o *Group) SetGroupFunction(v GroupFunctionEnum) {
	o.GroupFunction = &v
}

// GetGroupType returns the GroupType field value if set, zero value otherwise.
func (o *Group) GetGroupType() GroupTypeEnum {
	if o == nil || o.GroupType == nil {
		var ret GroupTypeEnum
		return ret
	}
	return *o.GroupType
}

// GetGroupTypeOk returns a tuple with the GroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetGroupTypeOk() (*GroupTypeEnum, bool) {
	if o == nil || o.GroupType == nil {
		return nil, false
	}
	return o.GroupType, true
}

// HasGroupType returns a boolean if a field has been set.
func (o *Group) HasGroupType() bool {
	if o != nil && o.GroupType != nil {
		return true
	}

	return false
}

// SetGroupType gets a reference to the given GroupTypeEnum and assigns it to the GroupType field.
func (o *Group) SetGroupType(v GroupTypeEnum) {
	o.GroupType = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *Group) GetVisibility() VisibilityEnum {
	if o == nil || o.Visibility == nil {
		var ret VisibilityEnum
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetVisibilityOk() (*VisibilityEnum, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *Group) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given VisibilityEnum and assigns it to the Visibility field.
func (o *Group) SetVisibility(v VisibilityEnum) {
	o.Visibility = &v
}

// GetMaxDuration returns the MaxDuration field value if set, zero value otherwise.
func (o *Group) GetMaxDuration() int32 {
	if o == nil || o.MaxDuration == nil {
		var ret int32
		return ret
	}
	return *o.MaxDuration
}

// GetMaxDurationOk returns a tuple with the MaxDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetMaxDurationOk() (*int32, bool) {
	if o == nil || o.MaxDuration == nil {
		return nil, false
	}
	return o.MaxDuration, true
}

// HasMaxDuration returns a boolean if a field has been set.
func (o *Group) HasMaxDuration() bool {
	if o != nil && o.MaxDuration != nil {
		return true
	}

	return false
}

// SetMaxDuration gets a reference to the given int32 and assigns it to the MaxDuration field.
func (o *Group) SetMaxDuration(v int32) {
	o.MaxDuration = &v
}

// GetRequireManagerApproval returns the RequireManagerApproval field value if set, zero value otherwise.
func (o *Group) GetRequireManagerApproval() bool {
	if o == nil || o.RequireManagerApproval == nil {
		var ret bool
		return ret
	}
	return *o.RequireManagerApproval
}

// GetRequireManagerApprovalOk returns a tuple with the RequireManagerApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetRequireManagerApprovalOk() (*bool, bool) {
	if o == nil || o.RequireManagerApproval == nil {
		return nil, false
	}
	return o.RequireManagerApproval, true
}

// HasRequireManagerApproval returns a boolean if a field has been set.
func (o *Group) HasRequireManagerApproval() bool {
	if o != nil && o.RequireManagerApproval != nil {
		return true
	}

	return false
}

// SetRequireManagerApproval gets a reference to the given bool and assigns it to the RequireManagerApproval field.
func (o *Group) SetRequireManagerApproval(v bool) {
	o.RequireManagerApproval = &v
}

// GetRequireSupportTicket returns the RequireSupportTicket field value if set, zero value otherwise.
func (o *Group) GetRequireSupportTicket() bool {
	if o == nil || o.RequireSupportTicket == nil {
		var ret bool
		return ret
	}
	return *o.RequireSupportTicket
}

// GetRequireSupportTicketOk returns a tuple with the RequireSupportTicket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetRequireSupportTicketOk() (*bool, bool) {
	if o == nil || o.RequireSupportTicket == nil {
		return nil, false
	}
	return o.RequireSupportTicket, true
}

// HasRequireSupportTicket returns a boolean if a field has been set.
func (o *Group) HasRequireSupportTicket() bool {
	if o != nil && o.RequireSupportTicket != nil {
		return true
	}

	return false
}

// SetRequireSupportTicket gets a reference to the given bool and assigns it to the RequireSupportTicket field.
func (o *Group) SetRequireSupportTicket(v bool) {
	o.RequireSupportTicket = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *Group) GetFolderId() string {
	if o == nil || o.FolderId == nil {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetFolderIdOk() (*string, bool) {
	if o == nil || o.FolderId == nil {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *Group) HasFolderId() bool {
	if o != nil && o.FolderId != nil {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *Group) SetFolderId(v string) {
	o.FolderId = &v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["group_id"] = o.GroupId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.OwnerTeamId != nil {
		toSerialize["owner_team_id"] = o.OwnerTeamId
	}
	if o.GroupFunction != nil {
		toSerialize["group_function"] = o.GroupFunction
	}
	if o.GroupType != nil {
		toSerialize["group_type"] = o.GroupType
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.MaxDuration != nil {
		toSerialize["max_duration"] = o.MaxDuration
	}
	if o.RequireManagerApproval != nil {
		toSerialize["require_manager_approval"] = o.RequireManagerApproval
	}
	if o.RequireSupportTicket != nil {
		toSerialize["require_support_ticket"] = o.RequireSupportTicket
	}
	if o.FolderId != nil {
		toSerialize["folder_id"] = o.FolderId
	}
	return json.Marshal(toSerialize)
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


