/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RuleClauses type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleClauses{}

// RuleClauses struct for RuleClauses
type RuleClauses struct {
	When RuleConjunction `json:"when"`
	Unless *RuleConjunction `json:"unless,omitempty"`
}

type _RuleClauses RuleClauses

// NewRuleClauses instantiates a new RuleClauses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleClauses(when RuleConjunction) *RuleClauses {
	this := RuleClauses{}
	this.When = when
	return &this
}

// NewRuleClausesWithDefaults instantiates a new RuleClauses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleClausesWithDefaults() *RuleClauses {
	this := RuleClauses{}
	return &this
}

// GetWhen returns the When field value
func (o *RuleClauses) GetWhen() RuleConjunction {
	if o == nil {
		var ret RuleConjunction
		return ret
	}

	return o.When
}

// GetWhenOk returns a tuple with the When field value
// and a boolean to check if the value has been set.
func (o *RuleClauses) GetWhenOk() (*RuleConjunction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.When, true
}

// SetWhen sets field value
func (o *RuleClauses) SetWhen(v RuleConjunction) {
	o.When = v
}

// GetUnless returns the Unless field value if set, zero value otherwise.
func (o *RuleClauses) GetUnless() RuleConjunction {
	if o == nil || IsNil(o.Unless) {
		var ret RuleConjunction
		return ret
	}
	return *o.Unless
}

// GetUnlessOk returns a tuple with the Unless field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleClauses) GetUnlessOk() (*RuleConjunction, bool) {
	if o == nil || IsNil(o.Unless) {
		return nil, false
	}
	return o.Unless, true
}

// HasUnless returns a boolean if a field has been set.
func (o *RuleClauses) HasUnless() bool {
	if o != nil && !IsNil(o.Unless) {
		return true
	}

	return false
}

// SetUnless gets a reference to the given RuleConjunction and assigns it to the Unless field.
func (o *RuleClauses) SetUnless(v RuleConjunction) {
	o.Unless = &v
}

func (o RuleClauses) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleClauses) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["when"] = o.When
	if !IsNil(o.Unless) {
		toSerialize["unless"] = o.Unless
	}
	return toSerialize, nil
}

func (o *RuleClauses) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"when",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRuleClauses := _RuleClauses{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRuleClauses)

	if err != nil {
		return err
	}

	*o = RuleClauses(varRuleClauses)

	return err
}

type NullableRuleClauses struct {
	value *RuleClauses
	isSet bool
}

func (v NullableRuleClauses) Get() *RuleClauses {
	return v.value
}

func (v *NullableRuleClauses) Set(val *RuleClauses) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleClauses) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleClauses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleClauses(val *RuleClauses) *NullableRuleClauses {
	return &NullableRuleClauses{value: val, isSet: true}
}

func (v NullableRuleClauses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleClauses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


