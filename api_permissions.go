/*
 * Opal API
 *
 * Your Home For Developer Permissions.
 *
 * API version: 1.0
 * Contact: hello@opal.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// PermissionsApiService PermissionsApi service
type PermissionsApiService service

type ApiPermAccessStatusRetrieveRequest struct {
	ctx _context.Context
	ApiService *PermissionsApiService
	permissionId string
	userId string
	cursor *string
	pageSize *int32
}

func (r ApiPermAccessStatusRetrieveRequest) Cursor(cursor string) ApiPermAccessStatusRetrieveRequest {
	r.cursor = &cursor
	return r
}
func (r ApiPermAccessStatusRetrieveRequest) PageSize(pageSize int32) ApiPermAccessStatusRetrieveRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiPermAccessStatusRetrieveRequest) Execute() (PermissionAccessStatus, *_nethttp.Response, error) {
	return r.ApiService.PermAccessStatusRetrieveExecute(r)
}

/*
 * PermAccessStatusRetrieve Method for PermAccessStatusRetrieve
 * Get user's access status to a permission.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param permissionId The ID of the permission.
 * @param userId The ID of the user.
 * @return ApiPermAccessStatusRetrieveRequest
 */
func (a *PermissionsApiService) PermAccessStatusRetrieve(ctx _context.Context, permissionId string, userId string) ApiPermAccessStatusRetrieveRequest {
	return ApiPermAccessStatusRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		permissionId: permissionId,
		userId: userId,
	}
}

/*
 * Execute executes the request
 * @return PermissionAccessStatus
 */
func (a *PermissionsApiService) PermAccessStatusRetrieveExecute(r ApiPermAccessStatusRetrieveRequest) (PermissionAccessStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PermissionAccessStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsApiService.PermAccessStatusRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/permission-access-status/{permission_id}/{user_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"permission_id"+"}", _neturl.PathEscape(parameterToString(r.permissionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPermissionUsersListRequest struct {
	ctx _context.Context
	ApiService *PermissionsApiService
	permissionId *string
	cursor *string
	pageSize *int32
}

func (r ApiPermissionUsersListRequest) PermissionId(permissionId string) ApiPermissionUsersListRequest {
	r.permissionId = &permissionId
	return r
}
func (r ApiPermissionUsersListRequest) Cursor(cursor string) ApiPermissionUsersListRequest {
	r.cursor = &cursor
	return r
}
func (r ApiPermissionUsersListRequest) PageSize(pageSize int32) ApiPermissionUsersListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiPermissionUsersListRequest) Execute() (PaginatedPermissionUserList, *_nethttp.Response, error) {
	return r.ApiService.PermissionUsersListExecute(r)
}

/*
 * PermissionUsersList Method for PermissionUsersList
 * Returns a list of `PermissionUser` objects.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPermissionUsersListRequest
 */
func (a *PermissionsApiService) PermissionUsersList(ctx _context.Context) ApiPermissionUsersListRequest {
	return ApiPermissionUsersListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PaginatedPermissionUserList
 */
func (a *PermissionsApiService) PermissionUsersListExecute(r ApiPermissionUsersListRequest) (PaginatedPermissionUserList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginatedPermissionUserList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsApiService.PermissionUsersList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/permission-users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.permissionId == nil {
		return localVarReturnValue, nil, reportError("permissionId is required and must be specified")
	}

	localVarQueryParams.Add("permission_id", parameterToString(*r.permissionId, ""))
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
