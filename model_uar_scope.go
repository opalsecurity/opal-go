/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// checks if the UARScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UARScope{}

// UARScope If set, the access review will only contain resources and groups that match at least one of the filters in scope.
type UARScope struct {
	// This access review will include resources and groups who are tagged with one of the given tags.
	Tags []TagFilter `json:"tags,omitempty"`
	// This access review will include resources and groups whose name contains one of the given strings.
	Names []string `json:"names,omitempty"`
	// This access review will include resources and groups who are owned by one of the owners corresponding to the given IDs.
	Admins []string `json:"admins,omitempty"`
}

// NewUARScope instantiates a new UARScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUARScope() *UARScope {
	this := UARScope{}
	return &this
}

// NewUARScopeWithDefaults instantiates a new UARScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUARScopeWithDefaults() *UARScope {
	this := UARScope{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UARScope) GetTags() []TagFilter {
	if o == nil || IsNil(o.Tags) {
		var ret []TagFilter
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UARScope) GetTagsOk() ([]TagFilter, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UARScope) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagFilter and assigns it to the Tags field.
func (o *UARScope) SetTags(v []TagFilter) {
	o.Tags = v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *UARScope) GetNames() []string {
	if o == nil || IsNil(o.Names) {
		var ret []string
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UARScope) GetNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Names) {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *UARScope) HasNames() bool {
	if o != nil && !IsNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *UARScope) SetNames(v []string) {
	o.Names = v
}

// GetAdmins returns the Admins field value if set, zero value otherwise.
func (o *UARScope) GetAdmins() []string {
	if o == nil || IsNil(o.Admins) {
		var ret []string
		return ret
	}
	return o.Admins
}

// GetAdminsOk returns a tuple with the Admins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UARScope) GetAdminsOk() ([]string, bool) {
	if o == nil || IsNil(o.Admins) {
		return nil, false
	}
	return o.Admins, true
}

// HasAdmins returns a boolean if a field has been set.
func (o *UARScope) HasAdmins() bool {
	if o != nil && !IsNil(o.Admins) {
		return true
	}

	return false
}

// SetAdmins gets a reference to the given []string and assigns it to the Admins field.
func (o *UARScope) SetAdmins(v []string) {
	o.Admins = v
}

func (o UARScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UARScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	if !IsNil(o.Admins) {
		toSerialize["admins"] = o.Admins
	}
	return toSerialize, nil
}

type NullableUARScope struct {
	value *UARScope
	isSet bool
}

func (v NullableUARScope) Get() *UARScope {
	return v.value
}

func (v *NullableUARScope) Set(val *UARScope) {
	v.value = val
	v.isSet = true
}

func (v NullableUARScope) IsSet() bool {
	return v.isSet
}

func (v *NullableUARScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUARScope(val *UARScope) *NullableUARScope {
	return &NullableUARScope{value: val, isSet: true}
}

func (v NullableUARScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUARScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


