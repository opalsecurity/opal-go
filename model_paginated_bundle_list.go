/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaginatedBundleList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedBundleList{}

// PaginatedBundleList struct for PaginatedBundleList
type PaginatedBundleList struct {
	// The cursor used to obtain the current result page.
	Previous *string `json:"previous,omitempty"`
	// The cursor with which to continue pagination if additional result pages exist.
	Next *string `json:"next,omitempty"`
	// The total number of items in the result set.
	TotalCount *int32 `json:"total_count,omitempty"`
	Bundles []Bundle `json:"bundles"`
}

type _PaginatedBundleList PaginatedBundleList

// NewPaginatedBundleList instantiates a new PaginatedBundleList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedBundleList(bundles []Bundle) *PaginatedBundleList {
	this := PaginatedBundleList{}
	this.Bundles = bundles
	return &this
}

// NewPaginatedBundleListWithDefaults instantiates a new PaginatedBundleList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedBundleListWithDefaults() *PaginatedBundleList {
	this := PaginatedBundleList{}
	return &this
}

// GetPrevious returns the Previous field value if set, zero value otherwise.
func (o *PaginatedBundleList) GetPrevious() string {
	if o == nil || IsNil(o.Previous) {
		var ret string
		return ret
	}
	return *o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedBundleList) GetPreviousOk() (*string, bool) {
	if o == nil || IsNil(o.Previous) {
		return nil, false
	}
	return o.Previous, true
}

// HasPrevious returns a boolean if a field has been set.
func (o *PaginatedBundleList) HasPrevious() bool {
	if o != nil && !IsNil(o.Previous) {
		return true
	}

	return false
}

// SetPrevious gets a reference to the given string and assigns it to the Previous field.
func (o *PaginatedBundleList) SetPrevious(v string) {
	o.Previous = &v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *PaginatedBundleList) GetNext() string {
	if o == nil || IsNil(o.Next) {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedBundleList) GetNextOk() (*string, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *PaginatedBundleList) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *PaginatedBundleList) SetNext(v string) {
	o.Next = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *PaginatedBundleList) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedBundleList) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *PaginatedBundleList) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *PaginatedBundleList) SetTotalCount(v int32) {
	o.TotalCount = &v
}

// GetBundles returns the Bundles field value
func (o *PaginatedBundleList) GetBundles() []Bundle {
	if o == nil {
		var ret []Bundle
		return ret
	}

	return o.Bundles
}

// GetBundlesOk returns a tuple with the Bundles field value
// and a boolean to check if the value has been set.
func (o *PaginatedBundleList) GetBundlesOk() ([]Bundle, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bundles, true
}

// SetBundles sets field value
func (o *PaginatedBundleList) SetBundles(v []Bundle) {
	o.Bundles = v
}

func (o PaginatedBundleList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedBundleList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Previous) {
		toSerialize["previous"] = o.Previous
	}
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	if !IsNil(o.TotalCount) {
		toSerialize["total_count"] = o.TotalCount
	}
	toSerialize["bundles"] = o.Bundles
	return toSerialize, nil
}

func (o *PaginatedBundleList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bundles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaginatedBundleList := _PaginatedBundleList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaginatedBundleList)

	if err != nil {
		return err
	}

	*o = PaginatedBundleList(varPaginatedBundleList)

	return err
}

type NullablePaginatedBundleList struct {
	value *PaginatedBundleList
	isSet bool
}

func (v NullablePaginatedBundleList) Get() *PaginatedBundleList {
	return v.value
}

func (v *NullablePaginatedBundleList) Set(val *PaginatedBundleList) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedBundleList) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedBundleList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedBundleList(val *PaginatedBundleList) *NullablePaginatedBundleList {
	return &NullablePaginatedBundleList{value: val, isSet: true}
}

func (v NullablePaginatedBundleList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedBundleList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


