/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the ResourceRemoteInfoCustomConnector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceRemoteInfoCustomConnector{}

// ResourceRemoteInfoCustomConnector Remote info for a custom connector resource.
type ResourceRemoteInfoCustomConnector struct {
	// The id of the resource in the end system
	RemoteResourceId string `json:"remote_resource_id"`
	// A bool representing whether or not the resource can have usage data.
	CanHaveUsageEvents bool `json:"can_have_usage_events"`
	AdditionalProperties map[string]interface{}
}

type _ResourceRemoteInfoCustomConnector ResourceRemoteInfoCustomConnector

// NewResourceRemoteInfoCustomConnector instantiates a new ResourceRemoteInfoCustomConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceRemoteInfoCustomConnector(remoteResourceId string, canHaveUsageEvents bool) *ResourceRemoteInfoCustomConnector {
	this := ResourceRemoteInfoCustomConnector{}
	this.RemoteResourceId = remoteResourceId
	this.CanHaveUsageEvents = canHaveUsageEvents
	return &this
}

// NewResourceRemoteInfoCustomConnectorWithDefaults instantiates a new ResourceRemoteInfoCustomConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceRemoteInfoCustomConnectorWithDefaults() *ResourceRemoteInfoCustomConnector {
	this := ResourceRemoteInfoCustomConnector{}
	return &this
}

// GetRemoteResourceId returns the RemoteResourceId field value
func (o *ResourceRemoteInfoCustomConnector) GetRemoteResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteResourceId
}

// GetRemoteResourceIdOk returns a tuple with the RemoteResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceRemoteInfoCustomConnector) GetRemoteResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteResourceId, true
}

// SetRemoteResourceId sets field value
func (o *ResourceRemoteInfoCustomConnector) SetRemoteResourceId(v string) {
	o.RemoteResourceId = v
}

// GetCanHaveUsageEvents returns the CanHaveUsageEvents field value
func (o *ResourceRemoteInfoCustomConnector) GetCanHaveUsageEvents() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanHaveUsageEvents
}

// GetCanHaveUsageEventsOk returns a tuple with the CanHaveUsageEvents field value
// and a boolean to check if the value has been set.
func (o *ResourceRemoteInfoCustomConnector) GetCanHaveUsageEventsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanHaveUsageEvents, true
}

// SetCanHaveUsageEvents sets field value
func (o *ResourceRemoteInfoCustomConnector) SetCanHaveUsageEvents(v bool) {
	o.CanHaveUsageEvents = v
}

func (o ResourceRemoteInfoCustomConnector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceRemoteInfoCustomConnector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["remote_resource_id"] = o.RemoteResourceId
	toSerialize["can_have_usage_events"] = o.CanHaveUsageEvents

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResourceRemoteInfoCustomConnector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"remote_resource_id",
		"can_have_usage_events",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceRemoteInfoCustomConnector := _ResourceRemoteInfoCustomConnector{}

	err = json.Unmarshal(data, &varResourceRemoteInfoCustomConnector)

	if err != nil {
		return err
	}

	*o = ResourceRemoteInfoCustomConnector(varResourceRemoteInfoCustomConnector)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "remote_resource_id")
		delete(additionalProperties, "can_have_usage_events")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResourceRemoteInfoCustomConnector struct {
	value *ResourceRemoteInfoCustomConnector
	isSet bool
}

func (v NullableResourceRemoteInfoCustomConnector) Get() *ResourceRemoteInfoCustomConnector {
	return v.value
}

func (v *NullableResourceRemoteInfoCustomConnector) Set(val *ResourceRemoteInfoCustomConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceRemoteInfoCustomConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceRemoteInfoCustomConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceRemoteInfoCustomConnector(val *ResourceRemoteInfoCustomConnector) *NullableResourceRemoteInfoCustomConnector {
	return &NullableResourceRemoteInfoCustomConnector{value: val, isSet: true}
}

func (v NullableResourceRemoteInfoCustomConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceRemoteInfoCustomConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


