/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the GroupRemoteInfoOktaGroupRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupRemoteInfoOktaGroupRule{}

// GroupRemoteInfoOktaGroupRule Remote info for Okta Directory group rule.
type GroupRemoteInfoOktaGroupRule struct {
	// The id of the Okta group rule.
	RuleId string `json:"rule_id"`
	AdditionalProperties map[string]interface{}
}

type _GroupRemoteInfoOktaGroupRule GroupRemoteInfoOktaGroupRule

// NewGroupRemoteInfoOktaGroupRule instantiates a new GroupRemoteInfoOktaGroupRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupRemoteInfoOktaGroupRule(ruleId string) *GroupRemoteInfoOktaGroupRule {
	this := GroupRemoteInfoOktaGroupRule{}
	this.RuleId = ruleId
	return &this
}

// NewGroupRemoteInfoOktaGroupRuleWithDefaults instantiates a new GroupRemoteInfoOktaGroupRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupRemoteInfoOktaGroupRuleWithDefaults() *GroupRemoteInfoOktaGroupRule {
	this := GroupRemoteInfoOktaGroupRule{}
	return &this
}

// GetRuleId returns the RuleId field value
func (o *GroupRemoteInfoOktaGroupRule) GetRuleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value
// and a boolean to check if the value has been set.
func (o *GroupRemoteInfoOktaGroupRule) GetRuleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleId, true
}

// SetRuleId sets field value
func (o *GroupRemoteInfoOktaGroupRule) SetRuleId(v string) {
	o.RuleId = v
}

func (o GroupRemoteInfoOktaGroupRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupRemoteInfoOktaGroupRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rule_id"] = o.RuleId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GroupRemoteInfoOktaGroupRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rule_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupRemoteInfoOktaGroupRule := _GroupRemoteInfoOktaGroupRule{}

	err = json.Unmarshal(data, &varGroupRemoteInfoOktaGroupRule)

	if err != nil {
		return err
	}

	*o = GroupRemoteInfoOktaGroupRule(varGroupRemoteInfoOktaGroupRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rule_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGroupRemoteInfoOktaGroupRule struct {
	value *GroupRemoteInfoOktaGroupRule
	isSet bool
}

func (v NullableGroupRemoteInfoOktaGroupRule) Get() *GroupRemoteInfoOktaGroupRule {
	return v.value
}

func (v *NullableGroupRemoteInfoOktaGroupRule) Set(val *GroupRemoteInfoOktaGroupRule) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupRemoteInfoOktaGroupRule) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupRemoteInfoOktaGroupRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupRemoteInfoOktaGroupRule(val *GroupRemoteInfoOktaGroupRule) *NullableGroupRemoteInfoOktaGroupRule {
	return &NullableGroupRemoteInfoOktaGroupRule{value: val, isSet: true}
}

func (v NullableGroupRemoteInfoOktaGroupRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupRemoteInfoOktaGroupRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


