/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the IdpGroupMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdpGroupMapping{}

// IdpGroupMapping Information about a group mapping.
type IdpGroupMapping struct {
	// The ID of the app resource.
	AppResourceId *string `json:"app_resource_id,omitempty"`
	// The ID of the group.
	GroupId string `json:"group_id"`
	// The alias of the group.
	Alias *string `json:"alias,omitempty"`
	// A bool representing whether or not the group is hidden from the end user.
	HiddenFromEndUser bool `json:"hidden_from_end_user"`
	AdditionalProperties map[string]interface{}
}

type _IdpGroupMapping IdpGroupMapping

// NewIdpGroupMapping instantiates a new IdpGroupMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdpGroupMapping(groupId string, hiddenFromEndUser bool) *IdpGroupMapping {
	this := IdpGroupMapping{}
	this.GroupId = groupId
	this.HiddenFromEndUser = hiddenFromEndUser
	return &this
}

// NewIdpGroupMappingWithDefaults instantiates a new IdpGroupMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdpGroupMappingWithDefaults() *IdpGroupMapping {
	this := IdpGroupMapping{}
	return &this
}

// GetAppResourceId returns the AppResourceId field value if set, zero value otherwise.
func (o *IdpGroupMapping) GetAppResourceId() string {
	if o == nil || IsNil(o.AppResourceId) {
		var ret string
		return ret
	}
	return *o.AppResourceId
}

// GetAppResourceIdOk returns a tuple with the AppResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpGroupMapping) GetAppResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppResourceId) {
		return nil, false
	}
	return o.AppResourceId, true
}

// HasAppResourceId returns a boolean if a field has been set.
func (o *IdpGroupMapping) HasAppResourceId() bool {
	if o != nil && !IsNil(o.AppResourceId) {
		return true
	}

	return false
}

// SetAppResourceId gets a reference to the given string and assigns it to the AppResourceId field.
func (o *IdpGroupMapping) SetAppResourceId(v string) {
	o.AppResourceId = &v
}

// GetGroupId returns the GroupId field value
func (o *IdpGroupMapping) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *IdpGroupMapping) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *IdpGroupMapping) SetGroupId(v string) {
	o.GroupId = v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *IdpGroupMapping) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpGroupMapping) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *IdpGroupMapping) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *IdpGroupMapping) SetAlias(v string) {
	o.Alias = &v
}

// GetHiddenFromEndUser returns the HiddenFromEndUser field value
func (o *IdpGroupMapping) GetHiddenFromEndUser() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HiddenFromEndUser
}

// GetHiddenFromEndUserOk returns a tuple with the HiddenFromEndUser field value
// and a boolean to check if the value has been set.
func (o *IdpGroupMapping) GetHiddenFromEndUserOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HiddenFromEndUser, true
}

// SetHiddenFromEndUser sets field value
func (o *IdpGroupMapping) SetHiddenFromEndUser(v bool) {
	o.HiddenFromEndUser = v
}

func (o IdpGroupMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdpGroupMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppResourceId) {
		toSerialize["app_resource_id"] = o.AppResourceId
	}
	toSerialize["group_id"] = o.GroupId
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	toSerialize["hidden_from_end_user"] = o.HiddenFromEndUser

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdpGroupMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group_id",
		"hidden_from_end_user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdpGroupMapping := _IdpGroupMapping{}

	err = json.Unmarshal(data, &varIdpGroupMapping)

	if err != nil {
		return err
	}

	*o = IdpGroupMapping(varIdpGroupMapping)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "app_resource_id")
		delete(additionalProperties, "group_id")
		delete(additionalProperties, "alias")
		delete(additionalProperties, "hidden_from_end_user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdpGroupMapping struct {
	value *IdpGroupMapping
	isSet bool
}

func (v NullableIdpGroupMapping) Get() *IdpGroupMapping {
	return v.value
}

func (v *NullableIdpGroupMapping) Set(val *IdpGroupMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableIdpGroupMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableIdpGroupMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdpGroupMapping(val *IdpGroupMapping) *NullableIdpGroupMapping {
	return &NullableIdpGroupMapping{value: val, isSet: true}
}

func (v NullableIdpGroupMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdpGroupMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


