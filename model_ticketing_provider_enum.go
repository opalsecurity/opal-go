/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// TicketingProviderEnum The third party ticketing platform provider.
type TicketingProviderEnum string

// List of TicketingProviderEnum
const (
	TICKETINGPROVIDERENUM_JIRA TicketingProviderEnum = "JIRA"
	TICKETINGPROVIDERENUM_LINEAR TicketingProviderEnum = "LINEAR"
	TICKETINGPROVIDERENUM_SERVICE_NOW TicketingProviderEnum = "SERVICE_NOW"
)

// All allowed values of TicketingProviderEnum enum
var AllowedTicketingProviderEnumEnumValues = []TicketingProviderEnum{
	"JIRA",
	"LINEAR",
	"SERVICE_NOW",
}

func (v *TicketingProviderEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TicketingProviderEnum(value)
	for _, existing := range AllowedTicketingProviderEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TicketingProviderEnum", value)
}

// NewTicketingProviderEnumFromValue returns a pointer to a valid TicketingProviderEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTicketingProviderEnumFromValue(v string) (*TicketingProviderEnum, error) {
	ev := TicketingProviderEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TicketingProviderEnum: valid values are %v", v, AllowedTicketingProviderEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TicketingProviderEnum) IsValid() bool {
	for _, existing := range AllowedTicketingProviderEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TicketingProviderEnum value
func (v TicketingProviderEnum) Ptr() *TicketingProviderEnum {
	return &v
}

type NullableTicketingProviderEnum struct {
	value *TicketingProviderEnum
	isSet bool
}

func (v NullableTicketingProviderEnum) Get() *TicketingProviderEnum {
	return v.value
}

func (v *NullableTicketingProviderEnum) Set(val *TicketingProviderEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketingProviderEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketingProviderEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketingProviderEnum(val *TicketingProviderEnum) *NullableTicketingProviderEnum {
	return &NullableTicketingProviderEnum{value: val, isSet: true}
}

func (v NullableTicketingProviderEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketingProviderEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

