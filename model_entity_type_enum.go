/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// EntityTypeEnum The type of an entity.
type EntityTypeEnum string

// List of EntityTypeEnum
const (
	ENTITYTYPEENUM_GROUP EntityTypeEnum = "GROUP"
	ENTITYTYPEENUM_RESOURCE EntityTypeEnum = "RESOURCE"
	ENTITYTYPEENUM_USER EntityTypeEnum = "USER"
)

// All allowed values of EntityTypeEnum enum
var AllowedEntityTypeEnumEnumValues = []EntityTypeEnum{
	"GROUP",
	"RESOURCE",
	"USER",
}

func (v *EntityTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntityTypeEnum(value)
	for _, existing := range AllowedEntityTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntityTypeEnum", value)
}

// NewEntityTypeEnumFromValue returns a pointer to a valid EntityTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntityTypeEnumFromValue(v string) (*EntityTypeEnum, error) {
	ev := EntityTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntityTypeEnum: valid values are %v", v, AllowedEntityTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntityTypeEnum) IsValid() bool {
	for _, existing := range AllowedEntityTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EntityTypeEnum value
func (v EntityTypeEnum) Ptr() *EntityTypeEnum {
	return &v
}

type NullableEntityTypeEnum struct {
	value *EntityTypeEnum
	isSet bool
}

func (v NullableEntityTypeEnum) Get() *EntityTypeEnum {
	return v.value
}

func (v *NullableEntityTypeEnum) Set(val *EntityTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityTypeEnum(val *EntityTypeEnum) *NullableEntityTypeEnum {
	return &NullableEntityTypeEnum{value: val, isSet: true}
}

func (v NullableEntityTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

