/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// RequestTemplateCustomFieldTypeEnum The type of the custom request field.
type RequestTemplateCustomFieldTypeEnum string

// List of RequestTemplateCustomFieldTypeEnum
const (
	REQUESTTEMPLATECUSTOMFIELDTYPEENUM_SHORT_TEXT RequestTemplateCustomFieldTypeEnum = "SHORT_TEXT"
	REQUESTTEMPLATECUSTOMFIELDTYPEENUM_LONG_TEXT RequestTemplateCustomFieldTypeEnum = "LONG_TEXT"
	REQUESTTEMPLATECUSTOMFIELDTYPEENUM_BOOLEAN RequestTemplateCustomFieldTypeEnum = "BOOLEAN"
	REQUESTTEMPLATECUSTOMFIELDTYPEENUM_MULTI_CHOICE RequestTemplateCustomFieldTypeEnum = "MULTI_CHOICE"
)

// All allowed values of RequestTemplateCustomFieldTypeEnum enum
var AllowedRequestTemplateCustomFieldTypeEnumEnumValues = []RequestTemplateCustomFieldTypeEnum{
	"SHORT_TEXT",
	"LONG_TEXT",
	"BOOLEAN",
	"MULTI_CHOICE",
}

func (v *RequestTemplateCustomFieldTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestTemplateCustomFieldTypeEnum(value)
	for _, existing := range AllowedRequestTemplateCustomFieldTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RequestTemplateCustomFieldTypeEnum", value)
}

// NewRequestTemplateCustomFieldTypeEnumFromValue returns a pointer to a valid RequestTemplateCustomFieldTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestTemplateCustomFieldTypeEnumFromValue(v string) (*RequestTemplateCustomFieldTypeEnum, error) {
	ev := RequestTemplateCustomFieldTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequestTemplateCustomFieldTypeEnum: valid values are %v", v, AllowedRequestTemplateCustomFieldTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestTemplateCustomFieldTypeEnum) IsValid() bool {
	for _, existing := range AllowedRequestTemplateCustomFieldTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RequestTemplateCustomFieldTypeEnum value
func (v RequestTemplateCustomFieldTypeEnum) Ptr() *RequestTemplateCustomFieldTypeEnum {
	return &v
}

type NullableRequestTemplateCustomFieldTypeEnum struct {
	value *RequestTemplateCustomFieldTypeEnum
	isSet bool
}

func (v NullableRequestTemplateCustomFieldTypeEnum) Get() *RequestTemplateCustomFieldTypeEnum {
	return v.value
}

func (v *NullableRequestTemplateCustomFieldTypeEnum) Set(val *RequestTemplateCustomFieldTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestTemplateCustomFieldTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestTemplateCustomFieldTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestTemplateCustomFieldTypeEnum(val *RequestTemplateCustomFieldTypeEnum) *NullableRequestTemplateCustomFieldTypeEnum {
	return &NullableRequestTemplateCustomFieldTypeEnum{value: val, isSet: true}
}

func (v NullableRequestTemplateCustomFieldTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestTemplateCustomFieldTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

