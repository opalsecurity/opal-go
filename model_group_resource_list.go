/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GroupResourceList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupResourceList{}

// GroupResourceList struct for GroupResourceList
type GroupResourceList struct {
	GroupResources []GroupResource `json:"group_resources"`
}

type _GroupResourceList GroupResourceList

// NewGroupResourceList instantiates a new GroupResourceList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupResourceList(groupResources []GroupResource) *GroupResourceList {
	this := GroupResourceList{}
	this.GroupResources = groupResources
	return &this
}

// NewGroupResourceListWithDefaults instantiates a new GroupResourceList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupResourceListWithDefaults() *GroupResourceList {
	this := GroupResourceList{}
	return &this
}

// GetGroupResources returns the GroupResources field value
func (o *GroupResourceList) GetGroupResources() []GroupResource {
	if o == nil {
		var ret []GroupResource
		return ret
	}

	return o.GroupResources
}

// GetGroupResourcesOk returns a tuple with the GroupResources field value
// and a boolean to check if the value has been set.
func (o *GroupResourceList) GetGroupResourcesOk() ([]GroupResource, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupResources, true
}

// SetGroupResources sets field value
func (o *GroupResourceList) SetGroupResources(v []GroupResource) {
	o.GroupResources = v
}

func (o GroupResourceList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupResourceList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group_resources"] = o.GroupResources
	return toSerialize, nil
}

func (o *GroupResourceList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group_resources",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupResourceList := _GroupResourceList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGroupResourceList)

	if err != nil {
		return err
	}

	*o = GroupResourceList(varGroupResourceList)

	return err
}

type NullableGroupResourceList struct {
	value *GroupResourceList
	isSet bool
}

func (v NullableGroupResourceList) Get() *GroupResourceList {
	return v.value
}

func (v *NullableGroupResourceList) Set(val *GroupResourceList) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupResourceList) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupResourceList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupResourceList(val *GroupResourceList) *NullableGroupResourceList {
	return &NullableGroupResourceList{value: val, isSet: true}
}

func (v NullableGroupResourceList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupResourceList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


