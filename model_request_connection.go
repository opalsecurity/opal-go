/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the RequestConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestConnection{}

// RequestConnection struct for RequestConnection
type RequestConnection struct {
	Edges []RequestEdge `json:"edges"`
	PageInfo PageInfo `json:"pageInfo"`
	// The total number of items available
	TotalCount int32 `json:"totalCount"`
	AdditionalProperties map[string]interface{}
}

type _RequestConnection RequestConnection

// NewRequestConnection instantiates a new RequestConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestConnection(edges []RequestEdge, pageInfo PageInfo, totalCount int32) *RequestConnection {
	this := RequestConnection{}
	this.Edges = edges
	this.PageInfo = pageInfo
	this.TotalCount = totalCount
	return &this
}

// NewRequestConnectionWithDefaults instantiates a new RequestConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestConnectionWithDefaults() *RequestConnection {
	this := RequestConnection{}
	return &this
}

// GetEdges returns the Edges field value
func (o *RequestConnection) GetEdges() []RequestEdge {
	if o == nil {
		var ret []RequestEdge
		return ret
	}

	return o.Edges
}

// GetEdgesOk returns a tuple with the Edges field value
// and a boolean to check if the value has been set.
func (o *RequestConnection) GetEdgesOk() ([]RequestEdge, bool) {
	if o == nil {
		return nil, false
	}
	return o.Edges, true
}

// SetEdges sets field value
func (o *RequestConnection) SetEdges(v []RequestEdge) {
	o.Edges = v
}

// GetPageInfo returns the PageInfo field value
func (o *RequestConnection) GetPageInfo() PageInfo {
	if o == nil {
		var ret PageInfo
		return ret
	}

	return o.PageInfo
}

// GetPageInfoOk returns a tuple with the PageInfo field value
// and a boolean to check if the value has been set.
func (o *RequestConnection) GetPageInfoOk() (*PageInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageInfo, true
}

// SetPageInfo sets field value
func (o *RequestConnection) SetPageInfo(v PageInfo) {
	o.PageInfo = v
}

// GetTotalCount returns the TotalCount field value
func (o *RequestConnection) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *RequestConnection) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *RequestConnection) SetTotalCount(v int32) {
	o.TotalCount = v
}

func (o RequestConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["edges"] = o.Edges
	toSerialize["pageInfo"] = o.PageInfo
	toSerialize["totalCount"] = o.TotalCount

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RequestConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"edges",
		"pageInfo",
		"totalCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestConnection := _RequestConnection{}

	err = json.Unmarshal(data, &varRequestConnection)

	if err != nil {
		return err
	}

	*o = RequestConnection(varRequestConnection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "edges")
		delete(additionalProperties, "pageInfo")
		delete(additionalProperties, "totalCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRequestConnection struct {
	value *RequestConnection
	isSet bool
}

func (v NullableRequestConnection) Get() *RequestConnection {
	return v.value
}

func (v *NullableRequestConnection) Set(val *RequestConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestConnection(val *RequestConnection) *NullableRequestConnection {
	return &NullableRequestConnection{value: val, isSet: true}
}

func (v NullableRequestConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


