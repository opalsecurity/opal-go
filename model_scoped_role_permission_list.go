/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScopedRolePermissionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopedRolePermissionList{}

// ScopedRolePermissionList struct for ScopedRolePermissionList
type ScopedRolePermissionList struct {
	Permissions []ScopedRolePermission `json:"permissions"`
}

type _ScopedRolePermissionList ScopedRolePermissionList

// NewScopedRolePermissionList instantiates a new ScopedRolePermissionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopedRolePermissionList(permissions []ScopedRolePermission) *ScopedRolePermissionList {
	this := ScopedRolePermissionList{}
	this.Permissions = permissions
	return &this
}

// NewScopedRolePermissionListWithDefaults instantiates a new ScopedRolePermissionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopedRolePermissionListWithDefaults() *ScopedRolePermissionList {
	this := ScopedRolePermissionList{}
	return &this
}

// GetPermissions returns the Permissions field value
func (o *ScopedRolePermissionList) GetPermissions() []ScopedRolePermission {
	if o == nil {
		var ret []ScopedRolePermission
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *ScopedRolePermissionList) GetPermissionsOk() ([]ScopedRolePermission, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *ScopedRolePermissionList) SetPermissions(v []ScopedRolePermission) {
	o.Permissions = v
}

func (o ScopedRolePermissionList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopedRolePermissionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permissions"] = o.Permissions
	return toSerialize, nil
}

func (o *ScopedRolePermissionList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"permissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScopedRolePermissionList := _ScopedRolePermissionList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScopedRolePermissionList)

	if err != nil {
		return err
	}

	*o = ScopedRolePermissionList(varScopedRolePermissionList)

	return err
}

type NullableScopedRolePermissionList struct {
	value *ScopedRolePermissionList
	isSet bool
}

func (v NullableScopedRolePermissionList) Get() *ScopedRolePermissionList {
	return v.value
}

func (v *NullableScopedRolePermissionList) Set(val *ScopedRolePermissionList) {
	v.value = val
	v.isSet = true
}

func (v NullableScopedRolePermissionList) IsSet() bool {
	return v.isSet
}

func (v *NullableScopedRolePermissionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopedRolePermissionList(val *ScopedRolePermissionList) *NullableScopedRolePermissionList {
	return &NullableScopedRolePermissionList{value: val, isSet: true}
}

func (v NullableScopedRolePermissionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopedRolePermissionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


