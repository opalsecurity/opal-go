/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the GroupBinding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupBinding{}

// GroupBinding # Group Binding Object ### Description The `GroupBinding` object is used to represent a group binding.  ### Usage Example Get group bindings from the `GET Group Bindings` endpoint.
type GroupBinding struct {
	// The ID of the group binding.
	GroupBindingId string `json:"group_binding_id"`
	// The ID of the user that created the group binding.
	CreatedById string `json:"created_by_id"`
	// The date the group binding was created.
	CreatedAt time.Time `json:"created_at"`
	// The ID of the source group.
	SourceGroupId string `json:"source_group_id"`
	// The list of groups.
	Groups []GroupBindingGroup `json:"groups"`
	AdditionalProperties map[string]interface{}
}

type _GroupBinding GroupBinding

// NewGroupBinding instantiates a new GroupBinding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupBinding(groupBindingId string, createdById string, createdAt time.Time, sourceGroupId string, groups []GroupBindingGroup) *GroupBinding {
	this := GroupBinding{}
	this.GroupBindingId = groupBindingId
	this.CreatedById = createdById
	this.CreatedAt = createdAt
	this.SourceGroupId = sourceGroupId
	this.Groups = groups
	return &this
}

// NewGroupBindingWithDefaults instantiates a new GroupBinding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupBindingWithDefaults() *GroupBinding {
	this := GroupBinding{}
	return &this
}

// GetGroupBindingId returns the GroupBindingId field value
func (o *GroupBinding) GetGroupBindingId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupBindingId
}

// GetGroupBindingIdOk returns a tuple with the GroupBindingId field value
// and a boolean to check if the value has been set.
func (o *GroupBinding) GetGroupBindingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupBindingId, true
}

// SetGroupBindingId sets field value
func (o *GroupBinding) SetGroupBindingId(v string) {
	o.GroupBindingId = v
}

// GetCreatedById returns the CreatedById field value
func (o *GroupBinding) GetCreatedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value
// and a boolean to check if the value has been set.
func (o *GroupBinding) GetCreatedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedById, true
}

// SetCreatedById sets field value
func (o *GroupBinding) SetCreatedById(v string) {
	o.CreatedById = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *GroupBinding) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *GroupBinding) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *GroupBinding) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetSourceGroupId returns the SourceGroupId field value
func (o *GroupBinding) GetSourceGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceGroupId
}

// GetSourceGroupIdOk returns a tuple with the SourceGroupId field value
// and a boolean to check if the value has been set.
func (o *GroupBinding) GetSourceGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceGroupId, true
}

// SetSourceGroupId sets field value
func (o *GroupBinding) SetSourceGroupId(v string) {
	o.SourceGroupId = v
}

// GetGroups returns the Groups field value
func (o *GroupBinding) GetGroups() []GroupBindingGroup {
	if o == nil {
		var ret []GroupBindingGroup
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *GroupBinding) GetGroupsOk() ([]GroupBindingGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *GroupBinding) SetGroups(v []GroupBindingGroup) {
	o.Groups = v
}

func (o GroupBinding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupBinding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group_binding_id"] = o.GroupBindingId
	toSerialize["created_by_id"] = o.CreatedById
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["source_group_id"] = o.SourceGroupId
	toSerialize["groups"] = o.Groups

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GroupBinding) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group_binding_id",
		"created_by_id",
		"created_at",
		"source_group_id",
		"groups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupBinding := _GroupBinding{}

	err = json.Unmarshal(data, &varGroupBinding)

	if err != nil {
		return err
	}

	*o = GroupBinding(varGroupBinding)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "group_binding_id")
		delete(additionalProperties, "created_by_id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "source_group_id")
		delete(additionalProperties, "groups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGroupBinding struct {
	value *GroupBinding
	isSet bool
}

func (v NullableGroupBinding) Get() *GroupBinding {
	return v.value
}

func (v *NullableGroupBinding) Set(val *GroupBinding) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupBinding(val *GroupBinding) *NullableGroupBinding {
	return &NullableGroupBinding{value: val, isSet: true}
}

func (v NullableGroupBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


