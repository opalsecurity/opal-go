/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
)

// ResourceUser # Resource User Object ### Description The `ResourceUser` object is used to represent a user with direct access to a resource.
type ResourceUser struct {
	// The ID of the resource.
	ResourceId string `json:"resource_id"`
	// The ID of the user.
	UserId string `json:"user_id"`
	AccessLevel ResourceAccessLevel `json:"access_level"`
	// The user's full name.
	FullName string `json:"full_name"`
	// The user's email.
	Email string `json:"email"`
	// The day and time the user's access will expire.
	ExpirationDate NullableTime `json:"expiration_date"`
}

// NewResourceUser instantiates a new ResourceUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceUser(resourceId string, userId string, accessLevel ResourceAccessLevel, fullName string, email string, expirationDate NullableTime) *ResourceUser {
	this := ResourceUser{}
	this.ResourceId = resourceId
	this.UserId = userId
	this.AccessLevel = accessLevel
	this.FullName = fullName
	this.Email = email
	this.ExpirationDate = expirationDate
	return &this
}

// NewResourceUserWithDefaults instantiates a new ResourceUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceUserWithDefaults() *ResourceUser {
	this := ResourceUser{}
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *ResourceUser) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceUser) GetResourceIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *ResourceUser) SetResourceId(v string) {
	o.ResourceId = v
}

// GetUserId returns the UserId field value
func (o *ResourceUser) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ResourceUser) GetUserIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ResourceUser) SetUserId(v string) {
	o.UserId = v
}

// GetAccessLevel returns the AccessLevel field value
func (o *ResourceUser) GetAccessLevel() ResourceAccessLevel {
	if o == nil {
		var ret ResourceAccessLevel
		return ret
	}

	return o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value
// and a boolean to check if the value has been set.
func (o *ResourceUser) GetAccessLevelOk() (*ResourceAccessLevel, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AccessLevel, true
}

// SetAccessLevel sets field value
func (o *ResourceUser) SetAccessLevel(v ResourceAccessLevel) {
	o.AccessLevel = v
}

// GetFullName returns the FullName field value
func (o *ResourceUser) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *ResourceUser) GetFullNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *ResourceUser) SetFullName(v string) {
	o.FullName = v
}

// GetEmail returns the Email field value
func (o *ResourceUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *ResourceUser) GetEmailOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *ResourceUser) SetEmail(v string) {
	o.Email = v
}

// GetExpirationDate returns the ExpirationDate field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ResourceUser) GetExpirationDate() time.Time {
	if o == nil || o.ExpirationDate.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.ExpirationDate.Get()
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceUser) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.ExpirationDate.Get(), o.ExpirationDate.IsSet()
}

// SetExpirationDate sets field value
func (o *ResourceUser) SetExpirationDate(v time.Time) {
	o.ExpirationDate.Set(&v)
}

func (o ResourceUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resource_id"] = o.ResourceId
	}
	if true {
		toSerialize["user_id"] = o.UserId
	}
	if true {
		toSerialize["access_level"] = o.AccessLevel
	}
	if true {
		toSerialize["full_name"] = o.FullName
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["expiration_date"] = o.ExpirationDate.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableResourceUser struct {
	value *ResourceUser
	isSet bool
}

func (v NullableResourceUser) Get() *ResourceUser {
	return v.value
}

func (v *NullableResourceUser) Set(val *ResourceUser) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceUser) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceUser(val *ResourceUser) *NullableResourceUser {
	return &NullableResourceUser{value: val, isSet: true}
}

func (v NullableResourceUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


