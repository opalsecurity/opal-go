/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// checks if the BundleGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BundleGroup{}

// BundleGroup struct for BundleGroup
type BundleGroup struct {
	// The ID of the bundle containing the group.
	BundleId *string `json:"bundle_id,omitempty"`
	// The ID of the group within a bundle.
	GroupId *string `json:"group_id,omitempty"`
}

// NewBundleGroup instantiates a new BundleGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBundleGroup() *BundleGroup {
	this := BundleGroup{}
	return &this
}

// NewBundleGroupWithDefaults instantiates a new BundleGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBundleGroupWithDefaults() *BundleGroup {
	this := BundleGroup{}
	return &this
}

// GetBundleId returns the BundleId field value if set, zero value otherwise.
func (o *BundleGroup) GetBundleId() string {
	if o == nil || IsNil(o.BundleId) {
		var ret string
		return ret
	}
	return *o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleGroup) GetBundleIdOk() (*string, bool) {
	if o == nil || IsNil(o.BundleId) {
		return nil, false
	}
	return o.BundleId, true
}

// HasBundleId returns a boolean if a field has been set.
func (o *BundleGroup) HasBundleId() bool {
	if o != nil && !IsNil(o.BundleId) {
		return true
	}

	return false
}

// SetBundleId gets a reference to the given string and assigns it to the BundleId field.
func (o *BundleGroup) SetBundleId(v string) {
	o.BundleId = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *BundleGroup) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleGroup) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *BundleGroup) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *BundleGroup) SetGroupId(v string) {
	o.GroupId = &v
}

func (o BundleGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BundleGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BundleId) {
		toSerialize["bundle_id"] = o.BundleId
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	return toSerialize, nil
}

type NullableBundleGroup struct {
	value *BundleGroup
	isSet bool
}

func (v NullableBundleGroup) Get() *BundleGroup {
	return v.value
}

func (v *NullableBundleGroup) Set(val *BundleGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableBundleGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableBundleGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBundleGroup(val *BundleGroup) *NullableBundleGroup {
	return &NullableBundleGroup{value: val, isSet: true}
}

func (v NullableBundleGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBundleGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


