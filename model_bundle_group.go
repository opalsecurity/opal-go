/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// checks if the BundleGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BundleGroup{}

// BundleGroup struct for BundleGroup
type BundleGroup struct {
	// The ID of the bundle containing the group.
	BundleId *string `json:"bundle_id,omitempty"`
	// The ID of the group within a bundle.
	GroupId *string `json:"group_id,omitempty"`
	// The access level of the group within a bundle.
	AccessLevelName *string `json:"access_level_name,omitempty"`
	// The remote ID of the access level of the group within a bundle.
	AccessLevelRemoteId *string `json:"access_level_remote_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BundleGroup BundleGroup

// NewBundleGroup instantiates a new BundleGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBundleGroup() *BundleGroup {
	this := BundleGroup{}
	return &this
}

// NewBundleGroupWithDefaults instantiates a new BundleGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBundleGroupWithDefaults() *BundleGroup {
	this := BundleGroup{}
	return &this
}

// GetBundleId returns the BundleId field value if set, zero value otherwise.
func (o *BundleGroup) GetBundleId() string {
	if o == nil || IsNil(o.BundleId) {
		var ret string
		return ret
	}
	return *o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleGroup) GetBundleIdOk() (*string, bool) {
	if o == nil || IsNil(o.BundleId) {
		return nil, false
	}
	return o.BundleId, true
}

// HasBundleId returns a boolean if a field has been set.
func (o *BundleGroup) HasBundleId() bool {
	if o != nil && !IsNil(o.BundleId) {
		return true
	}

	return false
}

// SetBundleId gets a reference to the given string and assigns it to the BundleId field.
func (o *BundleGroup) SetBundleId(v string) {
	o.BundleId = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *BundleGroup) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleGroup) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *BundleGroup) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *BundleGroup) SetGroupId(v string) {
	o.GroupId = &v
}

// GetAccessLevelName returns the AccessLevelName field value if set, zero value otherwise.
func (o *BundleGroup) GetAccessLevelName() string {
	if o == nil || IsNil(o.AccessLevelName) {
		var ret string
		return ret
	}
	return *o.AccessLevelName
}

// GetAccessLevelNameOk returns a tuple with the AccessLevelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleGroup) GetAccessLevelNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccessLevelName) {
		return nil, false
	}
	return o.AccessLevelName, true
}

// HasAccessLevelName returns a boolean if a field has been set.
func (o *BundleGroup) HasAccessLevelName() bool {
	if o != nil && !IsNil(o.AccessLevelName) {
		return true
	}

	return false
}

// SetAccessLevelName gets a reference to the given string and assigns it to the AccessLevelName field.
func (o *BundleGroup) SetAccessLevelName(v string) {
	o.AccessLevelName = &v
}

// GetAccessLevelRemoteId returns the AccessLevelRemoteId field value if set, zero value otherwise.
func (o *BundleGroup) GetAccessLevelRemoteId() string {
	if o == nil || IsNil(o.AccessLevelRemoteId) {
		var ret string
		return ret
	}
	return *o.AccessLevelRemoteId
}

// GetAccessLevelRemoteIdOk returns a tuple with the AccessLevelRemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleGroup) GetAccessLevelRemoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccessLevelRemoteId) {
		return nil, false
	}
	return o.AccessLevelRemoteId, true
}

// HasAccessLevelRemoteId returns a boolean if a field has been set.
func (o *BundleGroup) HasAccessLevelRemoteId() bool {
	if o != nil && !IsNil(o.AccessLevelRemoteId) {
		return true
	}

	return false
}

// SetAccessLevelRemoteId gets a reference to the given string and assigns it to the AccessLevelRemoteId field.
func (o *BundleGroup) SetAccessLevelRemoteId(v string) {
	o.AccessLevelRemoteId = &v
}

func (o BundleGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BundleGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BundleId) {
		toSerialize["bundle_id"] = o.BundleId
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.AccessLevelName) {
		toSerialize["access_level_name"] = o.AccessLevelName
	}
	if !IsNil(o.AccessLevelRemoteId) {
		toSerialize["access_level_remote_id"] = o.AccessLevelRemoteId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BundleGroup) UnmarshalJSON(data []byte) (err error) {
	varBundleGroup := _BundleGroup{}

	err = json.Unmarshal(data, &varBundleGroup)

	if err != nil {
		return err
	}

	*o = BundleGroup(varBundleGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bundle_id")
		delete(additionalProperties, "group_id")
		delete(additionalProperties, "access_level_name")
		delete(additionalProperties, "access_level_remote_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBundleGroup struct {
	value *BundleGroup
	isSet bool
}

func (v NullableBundleGroup) Get() *BundleGroup {
	return v.value
}

func (v *NullableBundleGroup) Set(val *BundleGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableBundleGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableBundleGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBundleGroup(val *BundleGroup) *NullableBundleGroup {
	return &NullableBundleGroup{value: val, isSet: true}
}

func (v NullableBundleGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBundleGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


