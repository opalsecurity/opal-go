/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AccessRulesAPIService AccessRulesAPI service
type AccessRulesAPIService service

type ApiGetAccessRuleRequest struct {
	ctx context.Context
	ApiService *AccessRulesAPIService
	accessRuleId string
}

func (r ApiGetAccessRuleRequest) Execute() (*AccessRuleCondition, *http.Response, error) {
	return r.ApiService.GetAccessRuleExecute(r)
}

/*
GetAccessRule Method for GetAccessRule

Returns a list of access rule config given the group_id of the access rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accessRuleId The access rule ID (group ID) of the access rule.
 @return ApiGetAccessRuleRequest
*/
func (a *AccessRulesAPIService) GetAccessRule(ctx context.Context, accessRuleId string) ApiGetAccessRuleRequest {
	return ApiGetAccessRuleRequest{
		ApiService: a,
		ctx: ctx,
		accessRuleId: accessRuleId,
	}
}

// Execute executes the request
//  @return AccessRuleCondition
func (a *AccessRulesAPIService) GetAccessRuleExecute(r ApiGetAccessRuleRequest) (*AccessRuleCondition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessRuleCondition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessRulesAPIService.GetAccessRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access-rules/{access_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"access_rule_id"+"}", url.PathEscape(parameterValueToString(r.accessRuleId, "accessRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAccessRuleRequest struct {
	ctx context.Context
	ApiService *AccessRulesAPIService
	accessRuleId string
	accessRuleCondition *AccessRuleCondition
}

func (r ApiUpdateAccessRuleRequest) AccessRuleCondition(accessRuleCondition AccessRuleCondition) ApiUpdateAccessRuleRequest {
	r.accessRuleCondition = &accessRuleCondition
	return r
}

func (r ApiUpdateAccessRuleRequest) Execute() (*AccessRuleCondition, *http.Response, error) {
	return r.ApiService.UpdateAccessRuleExecute(r)
}

/*
UpdateAccessRule Method for UpdateAccessRule

Updates the access rule config for the given group_id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accessRuleId The access rule ID (group ID) of the access rule.
 @return ApiUpdateAccessRuleRequest
*/
func (a *AccessRulesAPIService) UpdateAccessRule(ctx context.Context, accessRuleId string) ApiUpdateAccessRuleRequest {
	return ApiUpdateAccessRuleRequest{
		ApiService: a,
		ctx: ctx,
		accessRuleId: accessRuleId,
	}
}

// Execute executes the request
//  @return AccessRuleCondition
func (a *AccessRulesAPIService) UpdateAccessRuleExecute(r ApiUpdateAccessRuleRequest) (*AccessRuleCondition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessRuleCondition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessRulesAPIService.UpdateAccessRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access-rules/{access_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"access_rule_id"+"}", url.PathEscape(parameterValueToString(r.accessRuleId, "accessRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accessRuleCondition == nil {
		return localVarReturnValue, nil, reportError("accessRuleCondition is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accessRuleCondition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
