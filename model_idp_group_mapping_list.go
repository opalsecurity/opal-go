/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IdpGroupMappingList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdpGroupMappingList{}

// IdpGroupMappingList struct for IdpGroupMappingList
type IdpGroupMappingList struct {
	Mappings []IdpGroupMapping `json:"mappings"`
}

type _IdpGroupMappingList IdpGroupMappingList

// NewIdpGroupMappingList instantiates a new IdpGroupMappingList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdpGroupMappingList(mappings []IdpGroupMapping) *IdpGroupMappingList {
	this := IdpGroupMappingList{}
	this.Mappings = mappings
	return &this
}

// NewIdpGroupMappingListWithDefaults instantiates a new IdpGroupMappingList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdpGroupMappingListWithDefaults() *IdpGroupMappingList {
	this := IdpGroupMappingList{}
	return &this
}

// GetMappings returns the Mappings field value
func (o *IdpGroupMappingList) GetMappings() []IdpGroupMapping {
	if o == nil {
		var ret []IdpGroupMapping
		return ret
	}

	return o.Mappings
}

// GetMappingsOk returns a tuple with the Mappings field value
// and a boolean to check if the value has been set.
func (o *IdpGroupMappingList) GetMappingsOk() ([]IdpGroupMapping, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mappings, true
}

// SetMappings sets field value
func (o *IdpGroupMappingList) SetMappings(v []IdpGroupMapping) {
	o.Mappings = v
}

func (o IdpGroupMappingList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdpGroupMappingList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mappings"] = o.Mappings
	return toSerialize, nil
}

func (o *IdpGroupMappingList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mappings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdpGroupMappingList := _IdpGroupMappingList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdpGroupMappingList)

	if err != nil {
		return err
	}

	*o = IdpGroupMappingList(varIdpGroupMappingList)

	return err
}

type NullableIdpGroupMappingList struct {
	value *IdpGroupMappingList
	isSet bool
}

func (v NullableIdpGroupMappingList) Get() *IdpGroupMappingList {
	return v.value
}

func (v *NullableIdpGroupMappingList) Set(val *IdpGroupMappingList) {
	v.value = val
	v.isSet = true
}

func (v NullableIdpGroupMappingList) IsSet() bool {
	return v.isSet
}

func (v *NullableIdpGroupMappingList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdpGroupMappingList(val *IdpGroupMappingList) *NullableIdpGroupMappingList {
	return &NullableIdpGroupMappingList{value: val, isSet: true}
}

func (v NullableIdpGroupMappingList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdpGroupMappingList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


