/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the SyncError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncError{}

// SyncError # SyncError Object ### Description The `SyncError` object is used to represent a sync error.  ### Usage Example List from the `GET Sync Errors` endpoint.
type SyncError struct {
	// The time when this error was first seen.
	FirstSeen time.Time `json:"first_seen"`
	// The time when this error was most recently seen.
	LastSeen time.Time `json:"last_seen"`
	// The error message associated with the sync error.
	ErrorMessage string `json:"error_message"`
	// The ID of the app that the error occured for.
	AppId *string `json:"app_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SyncError SyncError

// NewSyncError instantiates a new SyncError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncError(firstSeen time.Time, lastSeen time.Time, errorMessage string) *SyncError {
	this := SyncError{}
	this.FirstSeen = firstSeen
	this.LastSeen = lastSeen
	this.ErrorMessage = errorMessage
	return &this
}

// NewSyncErrorWithDefaults instantiates a new SyncError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncErrorWithDefaults() *SyncError {
	this := SyncError{}
	return &this
}

// GetFirstSeen returns the FirstSeen field value
func (o *SyncError) GetFirstSeen() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.FirstSeen
}

// GetFirstSeenOk returns a tuple with the FirstSeen field value
// and a boolean to check if the value has been set.
func (o *SyncError) GetFirstSeenOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstSeen, true
}

// SetFirstSeen sets field value
func (o *SyncError) SetFirstSeen(v time.Time) {
	o.FirstSeen = v
}

// GetLastSeen returns the LastSeen field value
func (o *SyncError) GetLastSeen() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value
// and a boolean to check if the value has been set.
func (o *SyncError) GetLastSeenOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSeen, true
}

// SetLastSeen sets field value
func (o *SyncError) SetLastSeen(v time.Time) {
	o.LastSeen = v
}

// GetErrorMessage returns the ErrorMessage field value
func (o *SyncError) GetErrorMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value
// and a boolean to check if the value has been set.
func (o *SyncError) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorMessage, true
}

// SetErrorMessage sets field value
func (o *SyncError) SetErrorMessage(v string) {
	o.ErrorMessage = v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *SyncError) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncError) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *SyncError) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *SyncError) SetAppId(v string) {
	o.AppId = &v
}

func (o SyncError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["first_seen"] = o.FirstSeen
	toSerialize["last_seen"] = o.LastSeen
	toSerialize["error_message"] = o.ErrorMessage
	if !IsNil(o.AppId) {
		toSerialize["app_id"] = o.AppId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SyncError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"first_seen",
		"last_seen",
		"error_message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSyncError := _SyncError{}

	err = json.Unmarshal(data, &varSyncError)

	if err != nil {
		return err
	}

	*o = SyncError(varSyncError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "first_seen")
		delete(additionalProperties, "last_seen")
		delete(additionalProperties, "error_message")
		delete(additionalProperties, "app_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSyncError struct {
	value *SyncError
	isSet bool
}

func (v NullableSyncError) Get() *SyncError {
	return v.value
}

func (v *NullableSyncError) Set(val *SyncError) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncError) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncError(val *SyncError) *NullableSyncError {
	return &NullableSyncError{value: val, isSet: true}
}

func (v NullableSyncError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


