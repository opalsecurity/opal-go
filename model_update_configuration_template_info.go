/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateConfigurationTemplateInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateConfigurationTemplateInfo{}

// UpdateConfigurationTemplateInfo # UpdateConfigurationTemplateInfo Object ### Description The `ConfigurationTemplate` object is used to represent an update to a configuration template.  ### Usage Example Use in the `PUT Configuration Templates` endpoint.
type UpdateConfigurationTemplateInfo struct {
	// The ID of the configuration template.
	ConfigurationTemplateId string `json:"configuration_template_id"`
	// The name of the configuration template.
	Name *string `json:"name,omitempty"`
	// The ID of the owner of the configuration template.
	AdminOwnerId *string `json:"admin_owner_id,omitempty"`
	// The visibility info of the configuration template.
	Visibility *VisibilityInfo `json:"visibility,omitempty"`
	// The IDs of the audit message channels linked to the configuration template.
	LinkedAuditMessageChannelIds []string `json:"linked_audit_message_channel_ids,omitempty"`
	// The request configuration list linked to the configuration template.
	RequestConfigurations []RequestConfiguration `json:"request_configurations,omitempty"`
	// The request configuration list linked to the configuration template. Deprecated in favor of `request_configurations`.
	// Deprecated
	RequestConfigurationList *CreateRequestConfigurationInfoList `json:"request_configuration_list,omitempty"`
	// The IDs of the on-call schedules linked to the configuration template.
	MemberOncallScheduleIds []string `json:"member_oncall_schedule_ids,omitempty"`
	// The IDs of the break glass users linked to the configuration template.
	BreakGlassUserIds []string `json:"break_glass_user_ids,omitempty"`
	// A bool representing whether or not to require MFA for reviewers to approve requests for this configuration template.
	RequireMfaToApprove *bool `json:"require_mfa_to_approve,omitempty"`
	// A bool representing whether or not to require MFA to connect to resources associated with this configuration template.
	RequireMfaToConnect *bool `json:"require_mfa_to_connect,omitempty"`
	TicketPropagation *TicketPropagationConfiguration `json:"ticket_propagation,omitempty"`
	// Custom request notification sent upon request approval for this configuration template.
	CustomRequestNotification *string `json:"custom_request_notification,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateConfigurationTemplateInfo UpdateConfigurationTemplateInfo

// NewUpdateConfigurationTemplateInfo instantiates a new UpdateConfigurationTemplateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateConfigurationTemplateInfo(configurationTemplateId string) *UpdateConfigurationTemplateInfo {
	this := UpdateConfigurationTemplateInfo{}
	this.ConfigurationTemplateId = configurationTemplateId
	return &this
}

// NewUpdateConfigurationTemplateInfoWithDefaults instantiates a new UpdateConfigurationTemplateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateConfigurationTemplateInfoWithDefaults() *UpdateConfigurationTemplateInfo {
	this := UpdateConfigurationTemplateInfo{}
	return &this
}

// GetConfigurationTemplateId returns the ConfigurationTemplateId field value
func (o *UpdateConfigurationTemplateInfo) GetConfigurationTemplateId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigurationTemplateId
}

// GetConfigurationTemplateIdOk returns a tuple with the ConfigurationTemplateId field value
// and a boolean to check if the value has been set.
func (o *UpdateConfigurationTemplateInfo) GetConfigurationTemplateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigurationTemplateId, true
}

// SetConfigurationTemplateId sets field value
func (o *UpdateConfigurationTemplateInfo) SetConfigurationTemplateId(v string) {
	o.ConfigurationTemplateId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateConfigurationTemplateInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigurationTemplateInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateConfigurationTemplateInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateConfigurationTemplateInfo) SetName(v string) {
	o.Name = &v
}

// GetAdminOwnerId returns the AdminOwnerId field value if set, zero value otherwise.
func (o *UpdateConfigurationTemplateInfo) GetAdminOwnerId() string {
	if o == nil || IsNil(o.AdminOwnerId) {
		var ret string
		return ret
	}
	return *o.AdminOwnerId
}

// GetAdminOwnerIdOk returns a tuple with the AdminOwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigurationTemplateInfo) GetAdminOwnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.AdminOwnerId) {
		return nil, false
	}
	return o.AdminOwnerId, true
}

// HasAdminOwnerId returns a boolean if a field has been set.
func (o *UpdateConfigurationTemplateInfo) HasAdminOwnerId() bool {
	if o != nil && !IsNil(o.AdminOwnerId) {
		return true
	}

	return false
}

// SetAdminOwnerId gets a reference to the given string and assigns it to the AdminOwnerId field.
func (o *UpdateConfigurationTemplateInfo) SetAdminOwnerId(v string) {
	o.AdminOwnerId = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *UpdateConfigurationTemplateInfo) GetVisibility() VisibilityInfo {
	if o == nil || IsNil(o.Visibility) {
		var ret VisibilityInfo
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigurationTemplateInfo) GetVisibilityOk() (*VisibilityInfo, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *UpdateConfigurationTemplateInfo) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given VisibilityInfo and assigns it to the Visibility field.
func (o *UpdateConfigurationTemplateInfo) SetVisibility(v VisibilityInfo) {
	o.Visibility = &v
}

// GetLinkedAuditMessageChannelIds returns the LinkedAuditMessageChannelIds field value if set, zero value otherwise.
func (o *UpdateConfigurationTemplateInfo) GetLinkedAuditMessageChannelIds() []string {
	if o == nil || IsNil(o.LinkedAuditMessageChannelIds) {
		var ret []string
		return ret
	}
	return o.LinkedAuditMessageChannelIds
}

// GetLinkedAuditMessageChannelIdsOk returns a tuple with the LinkedAuditMessageChannelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigurationTemplateInfo) GetLinkedAuditMessageChannelIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.LinkedAuditMessageChannelIds) {
		return nil, false
	}
	return o.LinkedAuditMessageChannelIds, true
}

// HasLinkedAuditMessageChannelIds returns a boolean if a field has been set.
func (o *UpdateConfigurationTemplateInfo) HasLinkedAuditMessageChannelIds() bool {
	if o != nil && !IsNil(o.LinkedAuditMessageChannelIds) {
		return true
	}

	return false
}

// SetLinkedAuditMessageChannelIds gets a reference to the given []string and assigns it to the LinkedAuditMessageChannelIds field.
func (o *UpdateConfigurationTemplateInfo) SetLinkedAuditMessageChannelIds(v []string) {
	o.LinkedAuditMessageChannelIds = v
}

// GetRequestConfigurations returns the RequestConfigurations field value if set, zero value otherwise.
func (o *UpdateConfigurationTemplateInfo) GetRequestConfigurations() []RequestConfiguration {
	if o == nil || IsNil(o.RequestConfigurations) {
		var ret []RequestConfiguration
		return ret
	}
	return o.RequestConfigurations
}

// GetRequestConfigurationsOk returns a tuple with the RequestConfigurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigurationTemplateInfo) GetRequestConfigurationsOk() ([]RequestConfiguration, bool) {
	if o == nil || IsNil(o.RequestConfigurations) {
		return nil, false
	}
	return o.RequestConfigurations, true
}

// HasRequestConfigurations returns a boolean if a field has been set.
func (o *UpdateConfigurationTemplateInfo) HasRequestConfigurations() bool {
	if o != nil && !IsNil(o.RequestConfigurations) {
		return true
	}

	return false
}

// SetRequestConfigurations gets a reference to the given []RequestConfiguration and assigns it to the RequestConfigurations field.
func (o *UpdateConfigurationTemplateInfo) SetRequestConfigurations(v []RequestConfiguration) {
	o.RequestConfigurations = v
}

// GetRequestConfigurationList returns the RequestConfigurationList field value if set, zero value otherwise.
// Deprecated
func (o *UpdateConfigurationTemplateInfo) GetRequestConfigurationList() CreateRequestConfigurationInfoList {
	if o == nil || IsNil(o.RequestConfigurationList) {
		var ret CreateRequestConfigurationInfoList
		return ret
	}
	return *o.RequestConfigurationList
}

// GetRequestConfigurationListOk returns a tuple with the RequestConfigurationList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateConfigurationTemplateInfo) GetRequestConfigurationListOk() (*CreateRequestConfigurationInfoList, bool) {
	if o == nil || IsNil(o.RequestConfigurationList) {
		return nil, false
	}
	return o.RequestConfigurationList, true
}

// HasRequestConfigurationList returns a boolean if a field has been set.
func (o *UpdateConfigurationTemplateInfo) HasRequestConfigurationList() bool {
	if o != nil && !IsNil(o.RequestConfigurationList) {
		return true
	}

	return false
}

// SetRequestConfigurationList gets a reference to the given CreateRequestConfigurationInfoList and assigns it to the RequestConfigurationList field.
// Deprecated
func (o *UpdateConfigurationTemplateInfo) SetRequestConfigurationList(v CreateRequestConfigurationInfoList) {
	o.RequestConfigurationList = &v
}

// GetMemberOncallScheduleIds returns the MemberOncallScheduleIds field value if set, zero value otherwise.
func (o *UpdateConfigurationTemplateInfo) GetMemberOncallScheduleIds() []string {
	if o == nil || IsNil(o.MemberOncallScheduleIds) {
		var ret []string
		return ret
	}
	return o.MemberOncallScheduleIds
}

// GetMemberOncallScheduleIdsOk returns a tuple with the MemberOncallScheduleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigurationTemplateInfo) GetMemberOncallScheduleIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.MemberOncallScheduleIds) {
		return nil, false
	}
	return o.MemberOncallScheduleIds, true
}

// HasMemberOncallScheduleIds returns a boolean if a field has been set.
func (o *UpdateConfigurationTemplateInfo) HasMemberOncallScheduleIds() bool {
	if o != nil && !IsNil(o.MemberOncallScheduleIds) {
		return true
	}

	return false
}

// SetMemberOncallScheduleIds gets a reference to the given []string and assigns it to the MemberOncallScheduleIds field.
func (o *UpdateConfigurationTemplateInfo) SetMemberOncallScheduleIds(v []string) {
	o.MemberOncallScheduleIds = v
}

// GetBreakGlassUserIds returns the BreakGlassUserIds field value if set, zero value otherwise.
func (o *UpdateConfigurationTemplateInfo) GetBreakGlassUserIds() []string {
	if o == nil || IsNil(o.BreakGlassUserIds) {
		var ret []string
		return ret
	}
	return o.BreakGlassUserIds
}

// GetBreakGlassUserIdsOk returns a tuple with the BreakGlassUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigurationTemplateInfo) GetBreakGlassUserIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.BreakGlassUserIds) {
		return nil, false
	}
	return o.BreakGlassUserIds, true
}

// HasBreakGlassUserIds returns a boolean if a field has been set.
func (o *UpdateConfigurationTemplateInfo) HasBreakGlassUserIds() bool {
	if o != nil && !IsNil(o.BreakGlassUserIds) {
		return true
	}

	return false
}

// SetBreakGlassUserIds gets a reference to the given []string and assigns it to the BreakGlassUserIds field.
func (o *UpdateConfigurationTemplateInfo) SetBreakGlassUserIds(v []string) {
	o.BreakGlassUserIds = v
}

// GetRequireMfaToApprove returns the RequireMfaToApprove field value if set, zero value otherwise.
func (o *UpdateConfigurationTemplateInfo) GetRequireMfaToApprove() bool {
	if o == nil || IsNil(o.RequireMfaToApprove) {
		var ret bool
		return ret
	}
	return *o.RequireMfaToApprove
}

// GetRequireMfaToApproveOk returns a tuple with the RequireMfaToApprove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigurationTemplateInfo) GetRequireMfaToApproveOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireMfaToApprove) {
		return nil, false
	}
	return o.RequireMfaToApprove, true
}

// HasRequireMfaToApprove returns a boolean if a field has been set.
func (o *UpdateConfigurationTemplateInfo) HasRequireMfaToApprove() bool {
	if o != nil && !IsNil(o.RequireMfaToApprove) {
		return true
	}

	return false
}

// SetRequireMfaToApprove gets a reference to the given bool and assigns it to the RequireMfaToApprove field.
func (o *UpdateConfigurationTemplateInfo) SetRequireMfaToApprove(v bool) {
	o.RequireMfaToApprove = &v
}

// GetRequireMfaToConnect returns the RequireMfaToConnect field value if set, zero value otherwise.
func (o *UpdateConfigurationTemplateInfo) GetRequireMfaToConnect() bool {
	if o == nil || IsNil(o.RequireMfaToConnect) {
		var ret bool
		return ret
	}
	return *o.RequireMfaToConnect
}

// GetRequireMfaToConnectOk returns a tuple with the RequireMfaToConnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigurationTemplateInfo) GetRequireMfaToConnectOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireMfaToConnect) {
		return nil, false
	}
	return o.RequireMfaToConnect, true
}

// HasRequireMfaToConnect returns a boolean if a field has been set.
func (o *UpdateConfigurationTemplateInfo) HasRequireMfaToConnect() bool {
	if o != nil && !IsNil(o.RequireMfaToConnect) {
		return true
	}

	return false
}

// SetRequireMfaToConnect gets a reference to the given bool and assigns it to the RequireMfaToConnect field.
func (o *UpdateConfigurationTemplateInfo) SetRequireMfaToConnect(v bool) {
	o.RequireMfaToConnect = &v
}

// GetTicketPropagation returns the TicketPropagation field value if set, zero value otherwise.
func (o *UpdateConfigurationTemplateInfo) GetTicketPropagation() TicketPropagationConfiguration {
	if o == nil || IsNil(o.TicketPropagation) {
		var ret TicketPropagationConfiguration
		return ret
	}
	return *o.TicketPropagation
}

// GetTicketPropagationOk returns a tuple with the TicketPropagation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigurationTemplateInfo) GetTicketPropagationOk() (*TicketPropagationConfiguration, bool) {
	if o == nil || IsNil(o.TicketPropagation) {
		return nil, false
	}
	return o.TicketPropagation, true
}

// HasTicketPropagation returns a boolean if a field has been set.
func (o *UpdateConfigurationTemplateInfo) HasTicketPropagation() bool {
	if o != nil && !IsNil(o.TicketPropagation) {
		return true
	}

	return false
}

// SetTicketPropagation gets a reference to the given TicketPropagationConfiguration and assigns it to the TicketPropagation field.
func (o *UpdateConfigurationTemplateInfo) SetTicketPropagation(v TicketPropagationConfiguration) {
	o.TicketPropagation = &v
}

// GetCustomRequestNotification returns the CustomRequestNotification field value if set, zero value otherwise.
func (o *UpdateConfigurationTemplateInfo) GetCustomRequestNotification() string {
	if o == nil || IsNil(o.CustomRequestNotification) {
		var ret string
		return ret
	}
	return *o.CustomRequestNotification
}

// GetCustomRequestNotificationOk returns a tuple with the CustomRequestNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigurationTemplateInfo) GetCustomRequestNotificationOk() (*string, bool) {
	if o == nil || IsNil(o.CustomRequestNotification) {
		return nil, false
	}
	return o.CustomRequestNotification, true
}

// HasCustomRequestNotification returns a boolean if a field has been set.
func (o *UpdateConfigurationTemplateInfo) HasCustomRequestNotification() bool {
	if o != nil && !IsNil(o.CustomRequestNotification) {
		return true
	}

	return false
}

// SetCustomRequestNotification gets a reference to the given string and assigns it to the CustomRequestNotification field.
func (o *UpdateConfigurationTemplateInfo) SetCustomRequestNotification(v string) {
	o.CustomRequestNotification = &v
}

func (o UpdateConfigurationTemplateInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateConfigurationTemplateInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["configuration_template_id"] = o.ConfigurationTemplateId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AdminOwnerId) {
		toSerialize["admin_owner_id"] = o.AdminOwnerId
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.LinkedAuditMessageChannelIds) {
		toSerialize["linked_audit_message_channel_ids"] = o.LinkedAuditMessageChannelIds
	}
	if !IsNil(o.RequestConfigurations) {
		toSerialize["request_configurations"] = o.RequestConfigurations
	}
	if !IsNil(o.RequestConfigurationList) {
		toSerialize["request_configuration_list"] = o.RequestConfigurationList
	}
	if !IsNil(o.MemberOncallScheduleIds) {
		toSerialize["member_oncall_schedule_ids"] = o.MemberOncallScheduleIds
	}
	if !IsNil(o.BreakGlassUserIds) {
		toSerialize["break_glass_user_ids"] = o.BreakGlassUserIds
	}
	if !IsNil(o.RequireMfaToApprove) {
		toSerialize["require_mfa_to_approve"] = o.RequireMfaToApprove
	}
	if !IsNil(o.RequireMfaToConnect) {
		toSerialize["require_mfa_to_connect"] = o.RequireMfaToConnect
	}
	if !IsNil(o.TicketPropagation) {
		toSerialize["ticket_propagation"] = o.TicketPropagation
	}
	if !IsNil(o.CustomRequestNotification) {
		toSerialize["custom_request_notification"] = o.CustomRequestNotification
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateConfigurationTemplateInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"configuration_template_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateConfigurationTemplateInfo := _UpdateConfigurationTemplateInfo{}

	err = json.Unmarshal(data, &varUpdateConfigurationTemplateInfo)

	if err != nil {
		return err
	}

	*o = UpdateConfigurationTemplateInfo(varUpdateConfigurationTemplateInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "configuration_template_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "admin_owner_id")
		delete(additionalProperties, "visibility")
		delete(additionalProperties, "linked_audit_message_channel_ids")
		delete(additionalProperties, "request_configurations")
		delete(additionalProperties, "request_configuration_list")
		delete(additionalProperties, "member_oncall_schedule_ids")
		delete(additionalProperties, "break_glass_user_ids")
		delete(additionalProperties, "require_mfa_to_approve")
		delete(additionalProperties, "require_mfa_to_connect")
		delete(additionalProperties, "ticket_propagation")
		delete(additionalProperties, "custom_request_notification")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateConfigurationTemplateInfo struct {
	value *UpdateConfigurationTemplateInfo
	isSet bool
}

func (v NullableUpdateConfigurationTemplateInfo) Get() *UpdateConfigurationTemplateInfo {
	return v.value
}

func (v *NullableUpdateConfigurationTemplateInfo) Set(val *UpdateConfigurationTemplateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateConfigurationTemplateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateConfigurationTemplateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateConfigurationTemplateInfo(val *UpdateConfigurationTemplateInfo) *NullableUpdateConfigurationTemplateInfo {
	return &NullableUpdateConfigurationTemplateInfo{value: val, isSet: true}
}

func (v NullableUpdateConfigurationTemplateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateConfigurationTemplateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


