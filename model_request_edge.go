/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// checks if the RequestEdge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestEdge{}

// RequestEdge struct for RequestEdge
type RequestEdge struct {
	Node Request `json:"node"`
	// The cursor for this request edge
	Cursor string `json:"cursor"`
	AdditionalProperties map[string]interface{}
}

type _RequestEdge RequestEdge

// NewRequestEdge instantiates a new RequestEdge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestEdge(node Request, cursor string) *RequestEdge {
	this := RequestEdge{}
	this.Node = node
	this.Cursor = cursor
	return &this
}

// NewRequestEdgeWithDefaults instantiates a new RequestEdge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestEdgeWithDefaults() *RequestEdge {
	this := RequestEdge{}
	return &this
}

// GetNode returns the Node field value
func (o *RequestEdge) GetNode() Request {
	if o == nil {
		var ret Request
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *RequestEdge) GetNodeOk() (*Request, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *RequestEdge) SetNode(v Request) {
	o.Node = v
}

// GetCursor returns the Cursor field value
func (o *RequestEdge) GetCursor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cursor
}

// GetCursorOk returns a tuple with the Cursor field value
// and a boolean to check if the value has been set.
func (o *RequestEdge) GetCursorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cursor, true
}

// SetCursor sets field value
func (o *RequestEdge) SetCursor(v string) {
	o.Cursor = v
}

func (o RequestEdge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestEdge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["node"] = o.Node
	toSerialize["cursor"] = o.Cursor

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RequestEdge) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"node",
		"cursor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestEdge := _RequestEdge{}

	err = json.Unmarshal(data, &varRequestEdge)

	if err != nil {
		return err
	}

	*o = RequestEdge(varRequestEdge)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "node")
		delete(additionalProperties, "cursor")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRequestEdge struct {
	value *RequestEdge
	isSet bool
}

func (v NullableRequestEdge) Get() *RequestEdge {
	return v.value
}

func (v *NullableRequestEdge) Set(val *RequestEdge) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestEdge) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestEdge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestEdge(val *RequestEdge) *NullableRequestEdge {
	return &NullableRequestEdge{value: val, isSet: true}
}

func (v NullableRequestEdge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestEdge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


