/*
 * Opal API
 *
 * Your Home For Developer Resources.
 *
 * API version: 1.0
 * Contact: hello@opal.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// ResourceAccessStatusEnum The status of the user's access to the resource.
type ResourceAccessStatusEnum string

// List of ResourceAccessStatusEnum
const (
	RESOURCEACCESSSTATUSENUM_UNAUTHORIZED ResourceAccessStatusEnum = "UNAUTHORIZED"
	RESOURCEACCESSSTATUSENUM_REQUESTED ResourceAccessStatusEnum = "REQUESTED"
	RESOURCEACCESSSTATUSENUM_AUTHORIZED ResourceAccessStatusEnum = "AUTHORIZED"
)

var allowedResourceAccessStatusEnumEnumValues = []ResourceAccessStatusEnum{
	"UNAUTHORIZED",
	"REQUESTED",
	"AUTHORIZED",
}

func (v *ResourceAccessStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceAccessStatusEnum(value)
	for _, existing := range allowedResourceAccessStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceAccessStatusEnum", value)
}

// NewResourceAccessStatusEnumFromValue returns a pointer to a valid ResourceAccessStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceAccessStatusEnumFromValue(v string) (*ResourceAccessStatusEnum, error) {
	ev := ResourceAccessStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceAccessStatusEnum: valid values are %v", v, allowedResourceAccessStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceAccessStatusEnum) IsValid() bool {
	for _, existing := range allowedResourceAccessStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceAccessStatusEnum value
func (v ResourceAccessStatusEnum) Ptr() *ResourceAccessStatusEnum {
	return &v
}

type NullableResourceAccessStatusEnum struct {
	value *ResourceAccessStatusEnum
	isSet bool
}

func (v NullableResourceAccessStatusEnum) Get() *ResourceAccessStatusEnum {
	return v.value
}

func (v *NullableResourceAccessStatusEnum) Set(val *ResourceAccessStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceAccessStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceAccessStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceAccessStatusEnum(val *ResourceAccessStatusEnum) *NullableResourceAccessStatusEnum {
	return &NullableResourceAccessStatusEnum{value: val, isSet: true}
}

func (v NullableResourceAccessStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceAccessStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

