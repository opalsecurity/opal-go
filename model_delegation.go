/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Delegation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Delegation{}

// Delegation # Delegation Object ### Description The `Delegation` object represents a delegation of access review requests from one user to another.  ### Usage Example List from the `GET Delegations` endpoint. Get from the `GET Delegation` endpoint.
type Delegation struct {
	// The ID of the delegation.
	Id string `json:"id"`
	// The ID of the user delegating their access review requests.
	DelegatorUserId string `json:"delegator_user_id"`
	// The ID of the user being delegated to.
	DelegateUserId string `json:"delegate_user_id"`
	// The start time of the delegation.
	StartTime time.Time `json:"start_time"`
	// The end time of the delegation.
	EndTime time.Time `json:"end_time"`
	// The reason for the delegation.
	Reason string `json:"reason"`
	// The creation time of the delegation.
	CreatedAt time.Time `json:"created_at"`
	// The last updated time of the delegation.
	UpdatedAt time.Time `json:"updated_at"`
	AdditionalProperties map[string]interface{}
}

type _Delegation Delegation

// NewDelegation instantiates a new Delegation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelegation(id string, delegatorUserId string, delegateUserId string, startTime time.Time, endTime time.Time, reason string, createdAt time.Time, updatedAt time.Time) *Delegation {
	this := Delegation{}
	this.Id = id
	this.DelegatorUserId = delegatorUserId
	this.DelegateUserId = delegateUserId
	this.StartTime = startTime
	this.EndTime = endTime
	this.Reason = reason
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewDelegationWithDefaults instantiates a new Delegation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelegationWithDefaults() *Delegation {
	this := Delegation{}
	return &this
}

// GetId returns the Id field value
func (o *Delegation) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Delegation) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Delegation) SetId(v string) {
	o.Id = v
}

// GetDelegatorUserId returns the DelegatorUserId field value
func (o *Delegation) GetDelegatorUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DelegatorUserId
}

// GetDelegatorUserIdOk returns a tuple with the DelegatorUserId field value
// and a boolean to check if the value has been set.
func (o *Delegation) GetDelegatorUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DelegatorUserId, true
}

// SetDelegatorUserId sets field value
func (o *Delegation) SetDelegatorUserId(v string) {
	o.DelegatorUserId = v
}

// GetDelegateUserId returns the DelegateUserId field value
func (o *Delegation) GetDelegateUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DelegateUserId
}

// GetDelegateUserIdOk returns a tuple with the DelegateUserId field value
// and a boolean to check if the value has been set.
func (o *Delegation) GetDelegateUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DelegateUserId, true
}

// SetDelegateUserId sets field value
func (o *Delegation) SetDelegateUserId(v string) {
	o.DelegateUserId = v
}

// GetStartTime returns the StartTime field value
func (o *Delegation) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Delegation) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Delegation) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *Delegation) GetEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *Delegation) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *Delegation) SetEndTime(v time.Time) {
	o.EndTime = v
}

// GetReason returns the Reason field value
func (o *Delegation) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *Delegation) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *Delegation) SetReason(v string) {
	o.Reason = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Delegation) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Delegation) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Delegation) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Delegation) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Delegation) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Delegation) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o Delegation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Delegation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["delegator_user_id"] = o.DelegatorUserId
	toSerialize["delegate_user_id"] = o.DelegateUserId
	toSerialize["start_time"] = o.StartTime
	toSerialize["end_time"] = o.EndTime
	toSerialize["reason"] = o.Reason
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Delegation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"delegator_user_id",
		"delegate_user_id",
		"start_time",
		"end_time",
		"reason",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDelegation := _Delegation{}

	err = json.Unmarshal(data, &varDelegation)

	if err != nil {
		return err
	}

	*o = Delegation(varDelegation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "delegator_user_id")
		delete(additionalProperties, "delegate_user_id")
		delete(additionalProperties, "start_time")
		delete(additionalProperties, "end_time")
		delete(additionalProperties, "reason")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDelegation struct {
	value *Delegation
	isSet bool
}

func (v NullableDelegation) Get() *Delegation {
	return v.value
}

func (v *NullableDelegation) Set(val *Delegation) {
	v.value = val
	v.isSet = true
}

func (v NullableDelegation) IsSet() bool {
	return v.isSet
}

func (v *NullableDelegation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelegation(val *Delegation) *NullableDelegation {
	return &NullableDelegation{value: val, isSet: true}
}

func (v NullableDelegation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelegation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


