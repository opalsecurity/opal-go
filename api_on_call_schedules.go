/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OnCallSchedulesAPIService OnCallSchedulesAPI service
type OnCallSchedulesAPIService service

type ApiCreateOnCallScheduleRequest struct {
	ctx context.Context
	ApiService *OnCallSchedulesAPIService
	createOnCallScheduleInfo *CreateOnCallScheduleInfo
}

// The &#x60;OnCallSchedule&#x60; object to be created.
func (r ApiCreateOnCallScheduleRequest) CreateOnCallScheduleInfo(createOnCallScheduleInfo CreateOnCallScheduleInfo) ApiCreateOnCallScheduleRequest {
	r.createOnCallScheduleInfo = &createOnCallScheduleInfo
	return r
}

func (r ApiCreateOnCallScheduleRequest) Execute() (*OnCallSchedule, *http.Response, error) {
	return r.ApiService.CreateOnCallScheduleExecute(r)
}

/*
CreateOnCallSchedule Method for CreateOnCallSchedule

Creates a `OnCallSchedule` objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateOnCallScheduleRequest
*/
func (a *OnCallSchedulesAPIService) CreateOnCallSchedule(ctx context.Context) ApiCreateOnCallScheduleRequest {
	return ApiCreateOnCallScheduleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OnCallSchedule
func (a *OnCallSchedulesAPIService) CreateOnCallScheduleExecute(r ApiCreateOnCallScheduleRequest) (*OnCallSchedule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OnCallSchedule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnCallSchedulesAPIService.CreateOnCallSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/on-call-schedules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOnCallScheduleInfo == nil {
		return localVarReturnValue, nil, reportError("createOnCallScheduleInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOnCallScheduleInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOnCallScheduleRequest struct {
	ctx context.Context
	ApiService *OnCallSchedulesAPIService
	onCallScheduleId string
}

func (r ApiGetOnCallScheduleRequest) Execute() (*OnCallSchedule, *http.Response, error) {
	return r.ApiService.GetOnCallScheduleExecute(r)
}

/*
GetOnCallSchedule Method for GetOnCallSchedule

Gets a `OnCallSchedule` object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onCallScheduleId The ID of the on_call_schedule.
 @return ApiGetOnCallScheduleRequest
*/
func (a *OnCallSchedulesAPIService) GetOnCallSchedule(ctx context.Context, onCallScheduleId string) ApiGetOnCallScheduleRequest {
	return ApiGetOnCallScheduleRequest{
		ApiService: a,
		ctx: ctx,
		onCallScheduleId: onCallScheduleId,
	}
}

// Execute executes the request
//  @return OnCallSchedule
func (a *OnCallSchedulesAPIService) GetOnCallScheduleExecute(r ApiGetOnCallScheduleRequest) (*OnCallSchedule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OnCallSchedule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnCallSchedulesAPIService.GetOnCallSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/on-call-schedules/{on_call_schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"on_call_schedule_id"+"}", url.PathEscape(parameterValueToString(r.onCallScheduleId, "onCallScheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOnCallSchedulesRequest struct {
	ctx context.Context
	ApiService *OnCallSchedulesAPIService
}

func (r ApiGetOnCallSchedulesRequest) Execute() (*OnCallScheduleList, *http.Response, error) {
	return r.ApiService.GetOnCallSchedulesExecute(r)
}

/*
GetOnCallSchedules Method for GetOnCallSchedules

Returns a list of `OnCallSchedule` objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOnCallSchedulesRequest
*/
func (a *OnCallSchedulesAPIService) GetOnCallSchedules(ctx context.Context) ApiGetOnCallSchedulesRequest {
	return ApiGetOnCallSchedulesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OnCallScheduleList
func (a *OnCallSchedulesAPIService) GetOnCallSchedulesExecute(r ApiGetOnCallSchedulesRequest) (*OnCallScheduleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OnCallScheduleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnCallSchedulesAPIService.GetOnCallSchedules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/on-call-schedules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
