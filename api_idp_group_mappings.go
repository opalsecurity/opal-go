/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// IdpGroupMappingsAPIService IdpGroupMappingsAPI service
type IdpGroupMappingsAPIService service

type ApiCreateIdpGroupMappingRequest struct {
	ctx context.Context
	ApiService *IdpGroupMappingsAPIService
	appResourceId string
	groupId string
	createIdpGroupMappingRequest *CreateIdpGroupMappingRequest
}

func (r ApiCreateIdpGroupMappingRequest) CreateIdpGroupMappingRequest(createIdpGroupMappingRequest CreateIdpGroupMappingRequest) ApiCreateIdpGroupMappingRequest {
	r.createIdpGroupMappingRequest = &createIdpGroupMappingRequest
	return r
}

func (r ApiCreateIdpGroupMappingRequest) Execute() (*IdpGroupMapping, *http.Response, error) {
	return r.ApiService.CreateIdpGroupMappingExecute(r)
}

/*
CreateIdpGroupMapping Method for CreateIdpGroupMapping

Creates or updates an individual `IdpGroupMapping` object (upsert operation).

**Behavior:**
- If the mapping doesn't exist, it will be created with the provided values
- If the mapping exists, only the fields provided in the request will be updated


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appResourceId The ID of the Okta app.
 @param groupId The ID of the group.
 @return ApiCreateIdpGroupMappingRequest
*/
func (a *IdpGroupMappingsAPIService) CreateIdpGroupMapping(ctx context.Context, appResourceId string, groupId string) ApiCreateIdpGroupMappingRequest {
	return ApiCreateIdpGroupMappingRequest{
		ApiService: a,
		ctx: ctx,
		appResourceId: appResourceId,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return IdpGroupMapping
func (a *IdpGroupMappingsAPIService) CreateIdpGroupMappingExecute(r ApiCreateIdpGroupMappingRequest) (*IdpGroupMapping, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IdpGroupMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdpGroupMappingsAPIService.CreateIdpGroupMapping")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/idp-group-mappings/{app_resource_id}/groups/{group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"app_resource_id"+"}", url.PathEscape(parameterValueToString(r.appResourceId, "appResourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createIdpGroupMappingRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteIdpGroupMappingsRequest struct {
	ctx context.Context
	ApiService *IdpGroupMappingsAPIService
	appResourceId string
	groupId string
}

func (r ApiDeleteIdpGroupMappingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteIdpGroupMappingsExecute(r)
}

/*
DeleteIdpGroupMappings Method for DeleteIdpGroupMappings

Deletes an `IdpGroupMapping` object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appResourceId The ID of the Okta app.
 @param groupId The ID of the group.
 @return ApiDeleteIdpGroupMappingsRequest
*/
func (a *IdpGroupMappingsAPIService) DeleteIdpGroupMappings(ctx context.Context, appResourceId string, groupId string) ApiDeleteIdpGroupMappingsRequest {
	return ApiDeleteIdpGroupMappingsRequest{
		ApiService: a,
		ctx: ctx,
		appResourceId: appResourceId,
		groupId: groupId,
	}
}

// Execute executes the request
func (a *IdpGroupMappingsAPIService) DeleteIdpGroupMappingsExecute(r ApiDeleteIdpGroupMappingsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdpGroupMappingsAPIService.DeleteIdpGroupMappings")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/idp-group-mappings/{app_resource_id}/groups/{group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"app_resource_id"+"}", url.PathEscape(parameterValueToString(r.appResourceId, "appResourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetIdpGroupMappingRequest struct {
	ctx context.Context
	ApiService *IdpGroupMappingsAPIService
	appResourceId string
	groupId string
}

func (r ApiGetIdpGroupMappingRequest) Execute() (*IdpGroupMapping, *http.Response, error) {
	return r.ApiService.GetIdpGroupMappingExecute(r)
}

/*
GetIdpGroupMapping Method for GetIdpGroupMapping

Gets an `IdpGroupMapping` object for an Okta app and group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appResourceId The ID of the Okta app.
 @param groupId The ID of the group.
 @return ApiGetIdpGroupMappingRequest
*/
func (a *IdpGroupMappingsAPIService) GetIdpGroupMapping(ctx context.Context, appResourceId string, groupId string) ApiGetIdpGroupMappingRequest {
	return ApiGetIdpGroupMappingRequest{
		ApiService: a,
		ctx: ctx,
		appResourceId: appResourceId,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return IdpGroupMapping
func (a *IdpGroupMappingsAPIService) GetIdpGroupMappingExecute(r ApiGetIdpGroupMappingRequest) (*IdpGroupMapping, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IdpGroupMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdpGroupMappingsAPIService.GetIdpGroupMapping")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/idp-group-mappings/{app_resource_id}/groups/{group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"app_resource_id"+"}", url.PathEscape(parameterValueToString(r.appResourceId, "appResourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetIdpGroupMappingsRequest struct {
	ctx context.Context
	ApiService *IdpGroupMappingsAPIService
	appResourceId string
}

func (r ApiGetIdpGroupMappingsRequest) Execute() (*IdpGroupMappingList, *http.Response, error) {
	return r.ApiService.GetIdpGroupMappingsExecute(r)
}

/*
GetIdpGroupMappings Method for GetIdpGroupMappings

Returns the configured set of available `IdpGroupMapping` objects for an Okta app.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appResourceId The ID of the Okta app.
 @return ApiGetIdpGroupMappingsRequest
*/
func (a *IdpGroupMappingsAPIService) GetIdpGroupMappings(ctx context.Context, appResourceId string) ApiGetIdpGroupMappingsRequest {
	return ApiGetIdpGroupMappingsRequest{
		ApiService: a,
		ctx: ctx,
		appResourceId: appResourceId,
	}
}

// Execute executes the request
//  @return IdpGroupMappingList
func (a *IdpGroupMappingsAPIService) GetIdpGroupMappingsExecute(r ApiGetIdpGroupMappingsRequest) (*IdpGroupMappingList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IdpGroupMappingList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdpGroupMappingsAPIService.GetIdpGroupMappings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/idp-group-mappings/{app_resource_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"app_resource_id"+"}", url.PathEscape(parameterValueToString(r.appResourceId, "appResourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateIdpGroupMappingsRequest struct {
	ctx context.Context
	ApiService *IdpGroupMappingsAPIService
	appResourceId string
	updateIdpGroupMappingsRequest *UpdateIdpGroupMappingsRequest
}

func (r ApiUpdateIdpGroupMappingsRequest) UpdateIdpGroupMappingsRequest(updateIdpGroupMappingsRequest UpdateIdpGroupMappingsRequest) ApiUpdateIdpGroupMappingsRequest {
	r.updateIdpGroupMappingsRequest = &updateIdpGroupMappingsRequest
	return r
}

func (r ApiUpdateIdpGroupMappingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateIdpGroupMappingsExecute(r)
}

/*
UpdateIdpGroupMappings Method for UpdateIdpGroupMappings

Updates the list of available `IdpGroupMapping` objects for an Okta app.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appResourceId The ID of the Okta app.
 @return ApiUpdateIdpGroupMappingsRequest
*/
func (a *IdpGroupMappingsAPIService) UpdateIdpGroupMappings(ctx context.Context, appResourceId string) ApiUpdateIdpGroupMappingsRequest {
	return ApiUpdateIdpGroupMappingsRequest{
		ApiService: a,
		ctx: ctx,
		appResourceId: appResourceId,
	}
}

// Execute executes the request
func (a *IdpGroupMappingsAPIService) UpdateIdpGroupMappingsExecute(r ApiUpdateIdpGroupMappingsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdpGroupMappingsAPIService.UpdateIdpGroupMappings")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/idp-group-mappings/{app_resource_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"app_resource_id"+"}", url.PathEscape(parameterValueToString(r.appResourceId, "appResourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateIdpGroupMappingsRequest == nil {
		return nil, reportError("updateIdpGroupMappingsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateIdpGroupMappingsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
