/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// RolePermissionNameEnum The name of the role permission.
type RolePermissionNameEnum string

// List of RolePermissionNameEnum
const (
	ROLEPERMISSIONNAMEENUM_READ RolePermissionNameEnum = "READ"
	ROLEPERMISSIONNAMEENUM_READ_ASSIGNMENTS RolePermissionNameEnum = "READ_ASSIGNMENTS"
	ROLEPERMISSIONNAMEENUM_CREATE RolePermissionNameEnum = "CREATE"
	ROLEPERMISSIONNAMEENUM_IMPORT RolePermissionNameEnum = "IMPORT"
	ROLEPERMISSIONNAMEENUM_EXPORT RolePermissionNameEnum = "EXPORT"
	ROLEPERMISSIONNAMEENUM_SYNC RolePermissionNameEnum = "SYNC"
	ROLEPERMISSIONNAMEENUM_DELETE RolePermissionNameEnum = "DELETE"
	ROLEPERMISSIONNAMEENUM_READ_SETTINGS RolePermissionNameEnum = "READ_SETTINGS"
	ROLEPERMISSIONNAMEENUM_EDIT_TAGS RolePermissionNameEnum = "EDIT_TAGS"
	ROLEPERMISSIONNAMEENUM_EDIT_SETTINGS RolePermissionNameEnum = "EDIT_SETTINGS"
	ROLEPERMISSIONNAMEENUM_EDIT_SYNC_SETTINGS RolePermissionNameEnum = "EDIT_SYNC_SETTINGS"
	ROLEPERMISSIONNAMEENUM_EDIT_ASSIGNMENTS RolePermissionNameEnum = "EDIT_ASSIGNMENTS"
	ROLEPERMISSIONNAMEENUM_EDIT_REQUEST_CONFIGURATIONS RolePermissionNameEnum = "EDIT_REQUEST_CONFIGURATIONS"
	ROLEPERMISSIONNAMEENUM_EDIT_EVENT_STREAM RolePermissionNameEnum = "EDIT_EVENT_STREAM"
	ROLEPERMISSIONNAMEENUM_ASSIGN_UAR_REVIEWERS RolePermissionNameEnum = "ASSIGN_UAR_REVIEWERS"
	ROLEPERMISSIONNAMEENUM_SEND_REMINDERS RolePermissionNameEnum = "SEND_REMINDERS"
	ROLEPERMISSIONNAMEENUM_STOP RolePermissionNameEnum = "STOP"
	ROLEPERMISSIONNAMEENUM_REQUEST_ON_BEHALF RolePermissionNameEnum = "REQUEST_ON_BEHALF"
	ROLEPERMISSIONNAMEENUM_RESET_MFA RolePermissionNameEnum = "RESET_MFA"
)

// All allowed values of RolePermissionNameEnum enum
var AllowedRolePermissionNameEnumEnumValues = []RolePermissionNameEnum{
	"READ",
	"READ_ASSIGNMENTS",
	"CREATE",
	"IMPORT",
	"EXPORT",
	"SYNC",
	"DELETE",
	"READ_SETTINGS",
	"EDIT_TAGS",
	"EDIT_SETTINGS",
	"EDIT_SYNC_SETTINGS",
	"EDIT_ASSIGNMENTS",
	"EDIT_REQUEST_CONFIGURATIONS",
	"EDIT_EVENT_STREAM",
	"ASSIGN_UAR_REVIEWERS",
	"SEND_REMINDERS",
	"STOP",
	"REQUEST_ON_BEHALF",
	"RESET_MFA",
}

func (v *RolePermissionNameEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RolePermissionNameEnum(value)
	for _, existing := range AllowedRolePermissionNameEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RolePermissionNameEnum", value)
}

// NewRolePermissionNameEnumFromValue returns a pointer to a valid RolePermissionNameEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRolePermissionNameEnumFromValue(v string) (*RolePermissionNameEnum, error) {
	ev := RolePermissionNameEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RolePermissionNameEnum: valid values are %v", v, AllowedRolePermissionNameEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RolePermissionNameEnum) IsValid() bool {
	for _, existing := range AllowedRolePermissionNameEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RolePermissionNameEnum value
func (v RolePermissionNameEnum) Ptr() *RolePermissionNameEnum {
	return &v
}

type NullableRolePermissionNameEnum struct {
	value *RolePermissionNameEnum
	isSet bool
}

func (v NullableRolePermissionNameEnum) Get() *RolePermissionNameEnum {
	return v.value
}

func (v *NullableRolePermissionNameEnum) Set(val *RolePermissionNameEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRolePermissionNameEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRolePermissionNameEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolePermissionNameEnum(val *RolePermissionNameEnum) *NullableRolePermissionNameEnum {
	return &NullableRolePermissionNameEnum{value: val, isSet: true}
}

func (v NullableRolePermissionNameEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolePermissionNameEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

