/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"fmt"
)

// AppValidationSeverityEnum The severity of an app validation.
type AppValidationSeverityEnum string

// List of AppValidationSeverityEnum
const (
	APPVALIDATIONSEVERITYENUM_CRITICAL AppValidationSeverityEnum = "CRITICAL"
	APPVALIDATIONSEVERITYENUM_HIGH AppValidationSeverityEnum = "HIGH"
	APPVALIDATIONSEVERITYENUM_MEDIUM AppValidationSeverityEnum = "MEDIUM"
	APPVALIDATIONSEVERITYENUM_LOW AppValidationSeverityEnum = "LOW"
)

// All allowed values of AppValidationSeverityEnum enum
var AllowedAppValidationSeverityEnumEnumValues = []AppValidationSeverityEnum{
	"CRITICAL",
	"HIGH",
	"MEDIUM",
	"LOW",
}

func (v *AppValidationSeverityEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppValidationSeverityEnum(value)
	for _, existing := range AllowedAppValidationSeverityEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppValidationSeverityEnum", value)
}

// NewAppValidationSeverityEnumFromValue returns a pointer to a valid AppValidationSeverityEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppValidationSeverityEnumFromValue(v string) (*AppValidationSeverityEnum, error) {
	ev := AppValidationSeverityEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppValidationSeverityEnum: valid values are %v", v, AllowedAppValidationSeverityEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppValidationSeverityEnum) IsValid() bool {
	for _, existing := range AllowedAppValidationSeverityEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppValidationSeverityEnum value
func (v AppValidationSeverityEnum) Ptr() *AppValidationSeverityEnum {
	return &v
}

type NullableAppValidationSeverityEnum struct {
	value *AppValidationSeverityEnum
	isSet bool
}

func (v NullableAppValidationSeverityEnum) Get() *AppValidationSeverityEnum {
	return v.value
}

func (v *NullableAppValidationSeverityEnum) Set(val *AppValidationSeverityEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAppValidationSeverityEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAppValidationSeverityEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppValidationSeverityEnum(val *AppValidationSeverityEnum) *NullableAppValidationSeverityEnum {
	return &NullableAppValidationSeverityEnum{value: val, isSet: true}
}

func (v NullableAppValidationSeverityEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppValidationSeverityEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

