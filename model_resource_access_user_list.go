/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// ResourceAccessUserList struct for ResourceAccessUserList
type ResourceAccessUserList struct {
	Results []ResourceAccessUser `json:"results,omitempty"`
}

// NewResourceAccessUserList instantiates a new ResourceAccessUserList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceAccessUserList() *ResourceAccessUserList {
	this := ResourceAccessUserList{}
	return &this
}

// NewResourceAccessUserListWithDefaults instantiates a new ResourceAccessUserList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceAccessUserListWithDefaults() *ResourceAccessUserList {
	this := ResourceAccessUserList{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ResourceAccessUserList) GetResults() []ResourceAccessUser {
	if o == nil || o.Results == nil {
		var ret []ResourceAccessUser
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAccessUserList) GetResultsOk() ([]ResourceAccessUser, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ResourceAccessUserList) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []ResourceAccessUser and assigns it to the Results field.
func (o *ResourceAccessUserList) SetResults(v []ResourceAccessUser) {
	o.Results = v
}

func (o ResourceAccessUserList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableResourceAccessUserList struct {
	value *ResourceAccessUserList
	isSet bool
}

func (v NullableResourceAccessUserList) Get() *ResourceAccessUserList {
	return v.value
}

func (v *NullableResourceAccessUserList) Set(val *ResourceAccessUserList) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceAccessUserList) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceAccessUserList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceAccessUserList(val *ResourceAccessUserList) *NullableResourceAccessUserList {
	return &NullableResourceAccessUserList{value: val, isSet: true}
}

func (v NullableResourceAccessUserList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceAccessUserList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


