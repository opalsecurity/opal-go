/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RequestStage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestStage{}

// RequestStage A stage in the request review process
type RequestStage struct {
	// The stage number
	Stage int32 `json:"stage"`
	// The operator to apply to reviewers in this stage
	Operator ReviewStageOperator `json:"operator"`
	// The reviewers for this stage
	Reviewers []RequestReviewer `json:"reviewers"`
}

type _RequestStage RequestStage

// NewRequestStage instantiates a new RequestStage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestStage(stage int32, operator ReviewStageOperator, reviewers []RequestReviewer) *RequestStage {
	this := RequestStage{}
	this.Stage = stage
	this.Operator = operator
	this.Reviewers = reviewers
	return &this
}

// NewRequestStageWithDefaults instantiates a new RequestStage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestStageWithDefaults() *RequestStage {
	this := RequestStage{}
	return &this
}

// GetStage returns the Stage field value
func (o *RequestStage) GetStage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Stage
}

// GetStageOk returns a tuple with the Stage field value
// and a boolean to check if the value has been set.
func (o *RequestStage) GetStageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stage, true
}

// SetStage sets field value
func (o *RequestStage) SetStage(v int32) {
	o.Stage = v
}

// GetOperator returns the Operator field value
func (o *RequestStage) GetOperator() ReviewStageOperator {
	if o == nil {
		var ret ReviewStageOperator
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *RequestStage) GetOperatorOk() (*ReviewStageOperator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *RequestStage) SetOperator(v ReviewStageOperator) {
	o.Operator = v
}

// GetReviewers returns the Reviewers field value
func (o *RequestStage) GetReviewers() []RequestReviewer {
	if o == nil {
		var ret []RequestReviewer
		return ret
	}

	return o.Reviewers
}

// GetReviewersOk returns a tuple with the Reviewers field value
// and a boolean to check if the value has been set.
func (o *RequestStage) GetReviewersOk() ([]RequestReviewer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reviewers, true
}

// SetReviewers sets field value
func (o *RequestStage) SetReviewers(v []RequestReviewer) {
	o.Reviewers = v
}

func (o RequestStage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestStage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["stage"] = o.Stage
	toSerialize["operator"] = o.Operator
	toSerialize["reviewers"] = o.Reviewers
	return toSerialize, nil
}

func (o *RequestStage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"stage",
		"operator",
		"reviewers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestStage := _RequestStage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRequestStage)

	if err != nil {
		return err
	}

	*o = RequestStage(varRequestStage)

	return err
}

type NullableRequestStage struct {
	value *RequestStage
	isSet bool
}

func (v NullableRequestStage) Get() *RequestStage {
	return v.value
}

func (v *NullableRequestStage) Set(val *RequestStage) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestStage) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestStage(val *RequestStage) *NullableRequestStage {
	return &NullableRequestStage{value: val, isSet: true}
}

func (v NullableRequestStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


