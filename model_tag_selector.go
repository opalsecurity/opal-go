/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TagSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagSelector{}

// TagSelector struct for TagSelector
type TagSelector struct {
	Key string `json:"key"`
	Value string `json:"value"`
	ConnectionId string `json:"connection_id"`
}

type _TagSelector TagSelector

// NewTagSelector instantiates a new TagSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagSelector(key string, value string, connectionId string) *TagSelector {
	this := TagSelector{}
	this.Key = key
	this.Value = value
	this.ConnectionId = connectionId
	return &this
}

// NewTagSelectorWithDefaults instantiates a new TagSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagSelectorWithDefaults() *TagSelector {
	this := TagSelector{}
	return &this
}

// GetKey returns the Key field value
func (o *TagSelector) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *TagSelector) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *TagSelector) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *TagSelector) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TagSelector) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TagSelector) SetValue(v string) {
	o.Value = v
}

// GetConnectionId returns the ConnectionId field value
func (o *TagSelector) GetConnectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *TagSelector) GetConnectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *TagSelector) SetConnectionId(v string) {
	o.ConnectionId = v
}

func (o TagSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value
	toSerialize["connection_id"] = o.ConnectionId
	return toSerialize, nil
}

func (o *TagSelector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"value",
		"connection_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagSelector := _TagSelector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTagSelector)

	if err != nil {
		return err
	}

	*o = TagSelector(varTagSelector)

	return err
}

type NullableTagSelector struct {
	value *TagSelector
	isSet bool
}

func (v NullableTagSelector) Get() *TagSelector {
	return v.value
}

func (v *NullableTagSelector) Set(val *TagSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableTagSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableTagSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagSelector(val *TagSelector) *NullableTagSelector {
	return &NullableTagSelector{value: val, isSet: true}
}

func (v NullableTagSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


