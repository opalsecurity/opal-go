/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// checks if the TagFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagFilter{}

// TagFilter A tag filter defined by the tags key and value.
type TagFilter struct {
	// The key of the tag.
	Key string `json:"key"`
	// The value of the tag.
	Value *string `json:"value,omitempty"`
}

// NewTagFilter instantiates a new TagFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagFilter(key string) *TagFilter {
	this := TagFilter{}
	this.Key = key
	return &this
}

// NewTagFilterWithDefaults instantiates a new TagFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagFilterWithDefaults() *TagFilter {
	this := TagFilter{}
	return &this
}

// GetKey returns the Key field value
func (o *TagFilter) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *TagFilter) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *TagFilter) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TagFilter) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagFilter) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TagFilter) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TagFilter) SetValue(v string) {
	o.Value = &v
}

func (o TagFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableTagFilter struct {
	value *TagFilter
	isSet bool
}

func (v NullableTagFilter) Get() *TagFilter {
	return v.value
}

func (v *NullableTagFilter) Set(val *TagFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTagFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTagFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagFilter(val *TagFilter) *NullableTagFilter {
	return &NullableTagFilter{value: val, isSet: true}
}

func (v NullableTagFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


