/*
Opal API

Testing ResourcesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package opal

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/opalsecurity/opal-go"
)

func Test_opal_ResourcesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ResourcesApiService AddResourceUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string
		var userId string

		resp, httpRes, err := apiClient.ResourcesApi.AddResourceUser(context.Background(), resourceId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService CreateResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourcesApi.CreateResource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService DeleteResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		httpRes, err := apiClient.ResourcesApi.DeleteResource(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService DeleteResourceUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string
		var userId string

		httpRes, err := apiClient.ResourcesApi.DeleteResourceUser(context.Background(), resourceId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService GetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		resp, httpRes, err := apiClient.ResourcesApi.GetResource(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService GetResourceMessageChannels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		resp, httpRes, err := apiClient.ResourcesApi.GetResourceMessageChannels(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService GetResourceReviewerStages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		resp, httpRes, err := apiClient.ResourcesApi.GetResourceReviewerStages(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService GetResourceReviewers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		resp, httpRes, err := apiClient.ResourcesApi.GetResourceReviewers(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService GetResourceTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		resp, httpRes, err := apiClient.ResourcesApi.GetResourceTags(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService GetResourceUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		resp, httpRes, err := apiClient.ResourcesApi.GetResourceUsers(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService GetResourceVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		resp, httpRes, err := apiClient.ResourcesApi.GetResourceVisibility(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService GetResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourcesApi.GetResources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService ResourceUserAccessStatusRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string
		var userId string

		resp, httpRes, err := apiClient.ResourcesApi.ResourceUserAccessStatusRetrieve(context.Background(), resourceId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService SetResourceMessageChannels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		resp, httpRes, err := apiClient.ResourcesApi.SetResourceMessageChannels(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService SetResourceReviewerStages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		resp, httpRes, err := apiClient.ResourcesApi.SetResourceReviewerStages(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService SetResourceReviewers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		resp, httpRes, err := apiClient.ResourcesApi.SetResourceReviewers(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService SetResourceVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		resp, httpRes, err := apiClient.ResourcesApi.SetResourceVisibility(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesApiService UpdateResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourcesApi.UpdateResources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
