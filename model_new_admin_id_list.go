/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// NewAdminIDList struct for NewAdminIDList
type NewAdminIDList struct {
	// The IDs of admins to set for the group if converting to a team. Required when converting from Group to Team.
	AdminIds []string `json:"admin_ids,omitempty"`
}

// NewNewAdminIDList instantiates a new NewAdminIDList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewAdminIDList() *NewAdminIDList {
	this := NewAdminIDList{}
	return &this
}

// NewNewAdminIDListWithDefaults instantiates a new NewAdminIDList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewAdminIDListWithDefaults() *NewAdminIDList {
	this := NewAdminIDList{}
	return &this
}

// GetAdminIds returns the AdminIds field value if set, zero value otherwise.
func (o *NewAdminIDList) GetAdminIds() []string {
	if o == nil || o.AdminIds == nil {
		var ret []string
		return ret
	}
	return o.AdminIds
}

// GetAdminIdsOk returns a tuple with the AdminIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewAdminIDList) GetAdminIdsOk() ([]string, bool) {
	if o == nil || o.AdminIds == nil {
		return nil, false
	}
	return o.AdminIds, true
}

// HasAdminIds returns a boolean if a field has been set.
func (o *NewAdminIDList) HasAdminIds() bool {
	if o != nil && o.AdminIds != nil {
		return true
	}

	return false
}

// SetAdminIds gets a reference to the given []string and assigns it to the AdminIds field.
func (o *NewAdminIDList) SetAdminIds(v []string) {
	o.AdminIds = v
}

func (o NewAdminIDList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdminIds != nil {
		toSerialize["admin_ids"] = o.AdminIds
	}
	return json.Marshal(toSerialize)
}

type NullableNewAdminIDList struct {
	value *NewAdminIDList
	isSet bool
}

func (v NullableNewAdminIDList) Get() *NewAdminIDList {
	return v.value
}

func (v *NullableNewAdminIDList) Set(val *NewAdminIDList) {
	v.value = val
	v.isSet = true
}

func (v NullableNewAdminIDList) IsSet() bool {
	return v.isSet
}

func (v *NullableNewAdminIDList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewAdminIDList(val *NewAdminIDList) *NullableNewAdminIDList {
	return &NullableNewAdminIDList{value: val, isSet: true}
}

func (v NullableNewAdminIDList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewAdminIDList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


