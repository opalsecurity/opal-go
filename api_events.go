/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// EventsApiService EventsApi service
type EventsApiService service

type ApiEventsRequest struct {
	ctx context.Context
	ApiService *EventsApiService
	startDateFilter *string
	endDateFilter *string
	actorFilter *string
	objectFilter *string
	eventTypeFilter *string
	cursor *string
	pageSize *int32
}

// A start date filter for the events.
func (r ApiEventsRequest) StartDateFilter(startDateFilter string) ApiEventsRequest {
	r.startDateFilter = &startDateFilter
	return r
}

// An end date filter for the events.
func (r ApiEventsRequest) EndDateFilter(endDateFilter string) ApiEventsRequest {
	r.endDateFilter = &endDateFilter
	return r
}

// An actor filter for the events. Supply the ID of the actor.
func (r ApiEventsRequest) ActorFilter(actorFilter string) ApiEventsRequest {
	r.actorFilter = &actorFilter
	return r
}

// An object filter for the events. Supply the ID of the object.
func (r ApiEventsRequest) ObjectFilter(objectFilter string) ApiEventsRequest {
	r.objectFilter = &objectFilter
	return r
}

// An event type filter for the events.
func (r ApiEventsRequest) EventTypeFilter(eventTypeFilter string) ApiEventsRequest {
	r.eventTypeFilter = &eventTypeFilter
	return r
}

// The pagination cursor value.
func (r ApiEventsRequest) Cursor(cursor string) ApiEventsRequest {
	r.cursor = &cursor
	return r
}

// Number of results to return per page. Default is 200.
func (r ApiEventsRequest) PageSize(pageSize int32) ApiEventsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiEventsRequest) Execute() (*PaginatedEventList, *http.Response, error) {
	return r.ApiService.EventsExecute(r)
}

/*
Events Method for Events

Returns a list of `Event` objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEventsRequest
*/
func (a *EventsApiService) Events(ctx context.Context) ApiEventsRequest {
	return ApiEventsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedEventList
func (a *EventsApiService) EventsExecute(r ApiEventsRequest) (*PaginatedEventList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedEventList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsApiService.Events")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startDateFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date_filter", r.startDateFilter, "")
	}
	if r.endDateFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date_filter", r.endDateFilter, "")
	}
	if r.actorFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "actor_filter", r.actorFilter, "")
	}
	if r.objectFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_filter", r.objectFilter, "")
	}
	if r.eventTypeFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "event_type_filter", r.eventTypeFilter, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
