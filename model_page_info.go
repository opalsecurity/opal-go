/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PageInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PageInfo{}

// PageInfo struct for PageInfo
type PageInfo struct {
	// Whether there are more items after the end cursor
	HasNextPage bool `json:"hasNextPage"`
	// The cursor to continue pagination forwards
	EndCursor string `json:"endCursor"`
	// Whether there are more items before the start cursor
	HasPreviousPage bool `json:"hasPreviousPage"`
	// The cursor to continue pagination backwards
	StartCursor string `json:"startCursor"`
}

type _PageInfo PageInfo

// NewPageInfo instantiates a new PageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageInfo(hasNextPage bool, endCursor string, hasPreviousPage bool, startCursor string) *PageInfo {
	this := PageInfo{}
	this.HasNextPage = hasNextPage
	this.EndCursor = endCursor
	this.HasPreviousPage = hasPreviousPage
	this.StartCursor = startCursor
	return &this
}

// NewPageInfoWithDefaults instantiates a new PageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageInfoWithDefaults() *PageInfo {
	this := PageInfo{}
	return &this
}

// GetHasNextPage returns the HasNextPage field value
func (o *PageInfo) GetHasNextPage() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasNextPage
}

// GetHasNextPageOk returns a tuple with the HasNextPage field value
// and a boolean to check if the value has been set.
func (o *PageInfo) GetHasNextPageOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasNextPage, true
}

// SetHasNextPage sets field value
func (o *PageInfo) SetHasNextPage(v bool) {
	o.HasNextPage = v
}

// GetEndCursor returns the EndCursor field value
func (o *PageInfo) GetEndCursor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndCursor
}

// GetEndCursorOk returns a tuple with the EndCursor field value
// and a boolean to check if the value has been set.
func (o *PageInfo) GetEndCursorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndCursor, true
}

// SetEndCursor sets field value
func (o *PageInfo) SetEndCursor(v string) {
	o.EndCursor = v
}

// GetHasPreviousPage returns the HasPreviousPage field value
func (o *PageInfo) GetHasPreviousPage() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasPreviousPage
}

// GetHasPreviousPageOk returns a tuple with the HasPreviousPage field value
// and a boolean to check if the value has been set.
func (o *PageInfo) GetHasPreviousPageOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasPreviousPage, true
}

// SetHasPreviousPage sets field value
func (o *PageInfo) SetHasPreviousPage(v bool) {
	o.HasPreviousPage = v
}

// GetStartCursor returns the StartCursor field value
func (o *PageInfo) GetStartCursor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartCursor
}

// GetStartCursorOk returns a tuple with the StartCursor field value
// and a boolean to check if the value has been set.
func (o *PageInfo) GetStartCursorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartCursor, true
}

// SetStartCursor sets field value
func (o *PageInfo) SetStartCursor(v string) {
	o.StartCursor = v
}

func (o PageInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PageInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hasNextPage"] = o.HasNextPage
	toSerialize["endCursor"] = o.EndCursor
	toSerialize["hasPreviousPage"] = o.HasPreviousPage
	toSerialize["startCursor"] = o.StartCursor
	return toSerialize, nil
}

func (o *PageInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hasNextPage",
		"endCursor",
		"hasPreviousPage",
		"startCursor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPageInfo := _PageInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPageInfo)

	if err != nil {
		return err
	}

	*o = PageInfo(varPageInfo)

	return err
}

type NullablePageInfo struct {
	value *PageInfo
	isSet bool
}

func (v NullablePageInfo) Get() *PageInfo {
	return v.value
}

func (v *NullablePageInfo) Set(val *PageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageInfo(val *PageInfo) *NullablePageInfo {
	return &NullablePageInfo{value: val, isSet: true}
}

func (v NullablePageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


