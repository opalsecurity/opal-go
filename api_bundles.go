/*
Opal API

The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BundlesAPIService BundlesAPI service
type BundlesAPIService service

type ApiAddBundleGroupRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleId string
	addBundleGroupRequest *AddBundleGroupRequest
}

func (r ApiAddBundleGroupRequest) AddBundleGroupRequest(addBundleGroupRequest AddBundleGroupRequest) ApiAddBundleGroupRequest {
	r.addBundleGroupRequest = &addBundleGroupRequest
	return r
}

func (r ApiAddBundleGroupRequest) Execute() (*BundleGroup, *http.Response, error) {
	return r.ApiService.AddBundleGroupExecute(r)
}

/*
AddBundleGroup Method for AddBundleGroup

Adds a group to a bundle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bundleId The ID of the bundle.
 @return ApiAddBundleGroupRequest
*/
func (a *BundlesAPIService) AddBundleGroup(ctx context.Context, bundleId string) ApiAddBundleGroupRequest {
	return ApiAddBundleGroupRequest{
		ApiService: a,
		ctx: ctx,
		bundleId: bundleId,
	}
}

// Execute executes the request
//  @return BundleGroup
func (a *BundlesAPIService) AddBundleGroupExecute(r ApiAddBundleGroupRequest) (*BundleGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BundleGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.AddBundleGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundles/{bundle_id}/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"bundle_id"+"}", url.PathEscape(parameterValueToString(r.bundleId, "bundleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addBundleGroupRequest == nil {
		return localVarReturnValue, nil, reportError("addBundleGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addBundleGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAddBundleResourceRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleId string
	addBundleResourceRequest *AddBundleResourceRequest
}

func (r ApiAddBundleResourceRequest) AddBundleResourceRequest(addBundleResourceRequest AddBundleResourceRequest) ApiAddBundleResourceRequest {
	r.addBundleResourceRequest = &addBundleResourceRequest
	return r
}

func (r ApiAddBundleResourceRequest) Execute() (*BundleResource, *http.Response, error) {
	return r.ApiService.AddBundleResourceExecute(r)
}

/*
AddBundleResource Method for AddBundleResource

Adds a resource to a bundle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bundleId The ID of the bundle.
 @return ApiAddBundleResourceRequest
*/
func (a *BundlesAPIService) AddBundleResource(ctx context.Context, bundleId string) ApiAddBundleResourceRequest {
	return ApiAddBundleResourceRequest{
		ApiService: a,
		ctx: ctx,
		bundleId: bundleId,
	}
}

// Execute executes the request
//  @return BundleResource
func (a *BundlesAPIService) AddBundleResourceExecute(r ApiAddBundleResourceRequest) (*BundleResource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BundleResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.AddBundleResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundles/{bundle_id}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"bundle_id"+"}", url.PathEscape(parameterValueToString(r.bundleId, "bundleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addBundleResourceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateBundleRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	createBundleInfo *CreateBundleInfo
}

func (r ApiCreateBundleRequest) CreateBundleInfo(createBundleInfo CreateBundleInfo) ApiCreateBundleRequest {
	r.createBundleInfo = &createBundleInfo
	return r
}

func (r ApiCreateBundleRequest) Execute() (*Bundle, *http.Response, error) {
	return r.ApiService.CreateBundleExecute(r)
}

/*
CreateBundle Method for CreateBundle

Creates a bundle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateBundleRequest
*/
func (a *BundlesAPIService) CreateBundle(ctx context.Context) ApiCreateBundleRequest {
	return ApiCreateBundleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Bundle
func (a *BundlesAPIService) CreateBundleExecute(r ApiCreateBundleRequest) (*Bundle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Bundle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.CreateBundle")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createBundleInfo == nil {
		return localVarReturnValue, nil, reportError("createBundleInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createBundleInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteBundleRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleId string
}

func (r ApiDeleteBundleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBundleExecute(r)
}

/*
DeleteBundle Method for DeleteBundle

Deletes a bundle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bundleId The ID of the bundle.
 @return ApiDeleteBundleRequest
*/
func (a *BundlesAPIService) DeleteBundle(ctx context.Context, bundleId string) ApiDeleteBundleRequest {
	return ApiDeleteBundleRequest{
		ApiService: a,
		ctx: ctx,
		bundleId: bundleId,
	}
}

// Execute executes the request
func (a *BundlesAPIService) DeleteBundleExecute(r ApiDeleteBundleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.DeleteBundle")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundles/{bundle_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"bundle_id"+"}", url.PathEscape(parameterValueToString(r.bundleId, "bundleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetBundleRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleId string
}

func (r ApiGetBundleRequest) Execute() (*Bundle, *http.Response, error) {
	return r.ApiService.GetBundleExecute(r)
}

/*
GetBundle Get bundle by ID

Returns a `Bundle` object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bundleId The ID of the bundle.
 @return ApiGetBundleRequest
*/
func (a *BundlesAPIService) GetBundle(ctx context.Context, bundleId string) ApiGetBundleRequest {
	return ApiGetBundleRequest{
		ApiService: a,
		ctx: ctx,
		bundleId: bundleId,
	}
}

// Execute executes the request
//  @return Bundle
func (a *BundlesAPIService) GetBundleExecute(r ApiGetBundleRequest) (*Bundle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Bundle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.GetBundle")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundles/{bundle_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"bundle_id"+"}", url.PathEscape(parameterValueToString(r.bundleId, "bundleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBundleGroupsRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleId string
	pageSize *int32
	cursor *string
}

// The maximum number of groups to return from the beginning of the list. Default is 200, max is 1000.
func (r ApiGetBundleGroupsRequest) PageSize(pageSize int32) ApiGetBundleGroupsRequest {
	r.pageSize = &pageSize
	return r
}

// A cursor indicating where to start fetching items after a specific point.
func (r ApiGetBundleGroupsRequest) Cursor(cursor string) ApiGetBundleGroupsRequest {
	r.cursor = &cursor
	return r
}

func (r ApiGetBundleGroupsRequest) Execute() (*PaginatedBundleGroupList, *http.Response, error) {
	return r.ApiService.GetBundleGroupsExecute(r)
}

/*
GetBundleGroups Method for GetBundleGroups

Returns a list of `Group` objects in a given bundle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bundleId The ID of the bundle.
 @return ApiGetBundleGroupsRequest
*/
func (a *BundlesAPIService) GetBundleGroups(ctx context.Context, bundleId string) ApiGetBundleGroupsRequest {
	return ApiGetBundleGroupsRequest{
		ApiService: a,
		ctx: ctx,
		bundleId: bundleId,
	}
}

// Execute executes the request
//  @return PaginatedBundleGroupList
func (a *BundlesAPIService) GetBundleGroupsExecute(r ApiGetBundleGroupsRequest) (*PaginatedBundleGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedBundleGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.GetBundleGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundles/{bundle_id}/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"bundle_id"+"}", url.PathEscape(parameterValueToString(r.bundleId, "bundleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBundleResourcesRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleId string
	pageSize *int32
	cursor *string
}

// The maximum number of resources to return from the beginning of the list. Default is 200, max is 1000.
func (r ApiGetBundleResourcesRequest) PageSize(pageSize int32) ApiGetBundleResourcesRequest {
	r.pageSize = &pageSize
	return r
}

// A cursor indicating where to start fetching items after a specific point.
func (r ApiGetBundleResourcesRequest) Cursor(cursor string) ApiGetBundleResourcesRequest {
	r.cursor = &cursor
	return r
}

func (r ApiGetBundleResourcesRequest) Execute() (*PaginatedBundleResourceList, *http.Response, error) {
	return r.ApiService.GetBundleResourcesExecute(r)
}

/*
GetBundleResources Method for GetBundleResources

Returns a list of `Resource` objects in a given bundle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bundleId The ID of the bundle.
 @return ApiGetBundleResourcesRequest
*/
func (a *BundlesAPIService) GetBundleResources(ctx context.Context, bundleId string) ApiGetBundleResourcesRequest {
	return ApiGetBundleResourcesRequest{
		ApiService: a,
		ctx: ctx,
		bundleId: bundleId,
	}
}

// Execute executes the request
//  @return PaginatedBundleResourceList
func (a *BundlesAPIService) GetBundleResourcesExecute(r ApiGetBundleResourcesRequest) (*PaginatedBundleResourceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedBundleResourceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.GetBundleResources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundles/{bundle_id}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"bundle_id"+"}", url.PathEscape(parameterValueToString(r.bundleId, "bundleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBundleVisibilityRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleId string
}

func (r ApiGetBundleVisibilityRequest) Execute() (*VisibilityInfo, *http.Response, error) {
	return r.ApiService.GetBundleVisibilityExecute(r)
}

/*
GetBundleVisibility Method for GetBundleVisibility

Gets the visibility of the bundle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bundleId The ID of the bundle.
 @return ApiGetBundleVisibilityRequest
*/
func (a *BundlesAPIService) GetBundleVisibility(ctx context.Context, bundleId string) ApiGetBundleVisibilityRequest {
	return ApiGetBundleVisibilityRequest{
		ApiService: a,
		ctx: ctx,
		bundleId: bundleId,
	}
}

// Execute executes the request
//  @return VisibilityInfo
func (a *BundlesAPIService) GetBundleVisibilityExecute(r ApiGetBundleVisibilityRequest) (*VisibilityInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VisibilityInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.GetBundleVisibility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundles/{bundle_id}/visibility"
	localVarPath = strings.Replace(localVarPath, "{"+"bundle_id"+"}", url.PathEscape(parameterValueToString(r.bundleId, "bundleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBundlesRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	pageSize *int32
	cursor *string
	contains *string
}

// The maximum number of bundles to return from the beginning of the list. Default is 200, max is 1000.
func (r ApiGetBundlesRequest) PageSize(pageSize int32) ApiGetBundlesRequest {
	r.pageSize = &pageSize
	return r
}

// A cursor indicating where to start fetching items after a specific point.
func (r ApiGetBundlesRequest) Cursor(cursor string) ApiGetBundlesRequest {
	r.cursor = &cursor
	return r
}

// A filter for the bundle name.
func (r ApiGetBundlesRequest) Contains(contains string) ApiGetBundlesRequest {
	r.contains = &contains
	return r
}

func (r ApiGetBundlesRequest) Execute() (*PaginatedBundleList, *http.Response, error) {
	return r.ApiService.GetBundlesExecute(r)
}

/*
GetBundles Get bundles

Returns a list of `Bundle` objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBundlesRequest
*/
func (a *BundlesAPIService) GetBundles(ctx context.Context) ApiGetBundlesRequest {
	return ApiGetBundlesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedBundleList
func (a *BundlesAPIService) GetBundlesExecute(r ApiGetBundlesRequest) (*PaginatedBundleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedBundleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.GetBundles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	if r.contains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contains", r.contains, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveBundleGroupRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleId string
	groupId string
	accessLevelRemoteId *string
}

// The remote ID of the access level to remove.
func (r ApiRemoveBundleGroupRequest) AccessLevelRemoteId(accessLevelRemoteId string) ApiRemoveBundleGroupRequest {
	r.accessLevelRemoteId = &accessLevelRemoteId
	return r
}

func (r ApiRemoveBundleGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveBundleGroupExecute(r)
}

/*
RemoveBundleGroup Method for RemoveBundleGroup

Removes a group from a bundle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bundleId The ID of the bundle.
 @param groupId The ID of the group to remove.
 @return ApiRemoveBundleGroupRequest
*/
func (a *BundlesAPIService) RemoveBundleGroup(ctx context.Context, bundleId string, groupId string) ApiRemoveBundleGroupRequest {
	return ApiRemoveBundleGroupRequest{
		ApiService: a,
		ctx: ctx,
		bundleId: bundleId,
		groupId: groupId,
	}
}

// Execute executes the request
func (a *BundlesAPIService) RemoveBundleGroupExecute(r ApiRemoveBundleGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.RemoveBundleGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundles/{bundle_id}/groups/{group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"bundle_id"+"}", url.PathEscape(parameterValueToString(r.bundleId, "bundleId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accessLevelRemoteId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "access_level_remote_id", r.accessLevelRemoteId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveBundleResourceRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleId string
	resourceId string
	accessLevelRemoteId *string
}

// The remote ID of the access level to grant. If omitted, the default access level remote ID value (empty string) is used.
func (r ApiRemoveBundleResourceRequest) AccessLevelRemoteId(accessLevelRemoteId string) ApiRemoveBundleResourceRequest {
	r.accessLevelRemoteId = &accessLevelRemoteId
	return r
}

func (r ApiRemoveBundleResourceRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveBundleResourceExecute(r)
}

/*
RemoveBundleResource Method for RemoveBundleResource

Removes a resource from a bundle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bundleId The ID of the bundle.
 @param resourceId The ID of the resource to remove.
 @return ApiRemoveBundleResourceRequest
*/
func (a *BundlesAPIService) RemoveBundleResource(ctx context.Context, bundleId string, resourceId string) ApiRemoveBundleResourceRequest {
	return ApiRemoveBundleResourceRequest{
		ApiService: a,
		ctx: ctx,
		bundleId: bundleId,
		resourceId: resourceId,
	}
}

// Execute executes the request
func (a *BundlesAPIService) RemoveBundleResourceExecute(r ApiRemoveBundleResourceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.RemoveBundleResource")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundles/{bundle_id}/resources/{resource_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"bundle_id"+"}", url.PathEscape(parameterValueToString(r.bundleId, "bundleId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accessLevelRemoteId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "access_level_remote_id", r.accessLevelRemoteId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetBundleVisibilityRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleId string
	visibilityInfo *VisibilityInfo
}

func (r ApiSetBundleVisibilityRequest) VisibilityInfo(visibilityInfo VisibilityInfo) ApiSetBundleVisibilityRequest {
	r.visibilityInfo = &visibilityInfo
	return r
}

func (r ApiSetBundleVisibilityRequest) Execute() (*http.Response, error) {
	return r.ApiService.SetBundleVisibilityExecute(r)
}

/*
SetBundleVisibility Method for SetBundleVisibility

Sets the visibility of the bundle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bundleId The ID of the bundle.
 @return ApiSetBundleVisibilityRequest
*/
func (a *BundlesAPIService) SetBundleVisibility(ctx context.Context, bundleId string) ApiSetBundleVisibilityRequest {
	return ApiSetBundleVisibilityRequest{
		ApiService: a,
		ctx: ctx,
		bundleId: bundleId,
	}
}

// Execute executes the request
func (a *BundlesAPIService) SetBundleVisibilityExecute(r ApiSetBundleVisibilityRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.SetBundleVisibility")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundles/{bundle_id}/visibility"
	localVarPath = strings.Replace(localVarPath, "{"+"bundle_id"+"}", url.PathEscape(parameterValueToString(r.bundleId, "bundleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.visibilityInfo == nil {
		return nil, reportError("visibilityInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.visibilityInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateBundleRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleId string
	bundle *Bundle
}

func (r ApiUpdateBundleRequest) Bundle(bundle Bundle) ApiUpdateBundleRequest {
	r.bundle = &bundle
	return r
}

func (r ApiUpdateBundleRequest) Execute() (*Bundle, *http.Response, error) {
	return r.ApiService.UpdateBundleExecute(r)
}

/*
UpdateBundle Method for UpdateBundle

Updates a bundle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bundleId The ID of the bundle to be updated.
 @return ApiUpdateBundleRequest
*/
func (a *BundlesAPIService) UpdateBundle(ctx context.Context, bundleId string) ApiUpdateBundleRequest {
	return ApiUpdateBundleRequest{
		ApiService: a,
		ctx: ctx,
		bundleId: bundleId,
	}
}

// Execute executes the request
//  @return Bundle
func (a *BundlesAPIService) UpdateBundleExecute(r ApiUpdateBundleRequest) (*Bundle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Bundle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.UpdateBundle")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundles/{bundle_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"bundle_id"+"}", url.PathEscape(parameterValueToString(r.bundleId, "bundleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bundle == nil {
		return localVarReturnValue, nil, reportError("bundle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bundle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
