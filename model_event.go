/*
Opal API

Your Home For Developer Resources.

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
	"time"
)

// checks if the Event type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Event{}

// Event # Event Object ### Description The `Event` object is used to represent an event.  ### Usage Example Fetch from the `LIST Events` endpoint.
type Event struct {
	// The ID of the event.
	EventId string `json:"event_id"`
	// The ID of the actor user.
	ActorUserId string `json:"actor_user_id"`
	// The name of the actor user.
	ActorName interface{} `json:"actor_name"`
	// The email of the actor user.
	ActorEmail *string `json:"actor_email,omitempty"`
	// The event type.
	EventType string `json:"event_type"`
	// The day and time the event was created.
	CreatedAt time.Time `json:"created_at"`
	// The IP address of the event actor.
	ActorIpAddress *string `json:"actor_ip_address,omitempty"`
	// The name of the API token used to create the event.
	ApiTokenName *string `json:"api_token_name,omitempty"`
	// The preview of the API token used to create the event.
	ApiTokenPreview *string `json:"api_token_preview,omitempty"`
	SubEvents []SubEvent `json:"sub_events,omitempty"`
}

// NewEvent instantiates a new Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvent(eventId string, actorUserId string, actorName interface{}, eventType string, createdAt time.Time) *Event {
	this := Event{}
	this.EventId = eventId
	this.ActorUserId = actorUserId
	this.ActorName = actorName
	this.EventType = eventType
	this.CreatedAt = createdAt
	return &this
}

// NewEventWithDefaults instantiates a new Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventWithDefaults() *Event {
	this := Event{}
	return &this
}

// GetEventId returns the EventId field value
func (o *Event) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *Event) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *Event) SetEventId(v string) {
	o.EventId = v
}

// GetActorUserId returns the ActorUserId field value
func (o *Event) GetActorUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActorUserId
}

// GetActorUserIdOk returns a tuple with the ActorUserId field value
// and a boolean to check if the value has been set.
func (o *Event) GetActorUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActorUserId, true
}

// SetActorUserId sets field value
func (o *Event) SetActorUserId(v string) {
	o.ActorUserId = v
}

// GetActorName returns the ActorName field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Event) GetActorName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ActorName
}

// GetActorNameOk returns a tuple with the ActorName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetActorNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ActorName) {
		return nil, false
	}
	return &o.ActorName, true
}

// SetActorName sets field value
func (o *Event) SetActorName(v interface{}) {
	o.ActorName = v
}

// GetActorEmail returns the ActorEmail field value if set, zero value otherwise.
func (o *Event) GetActorEmail() string {
	if o == nil || IsNil(o.ActorEmail) {
		var ret string
		return ret
	}
	return *o.ActorEmail
}

// GetActorEmailOk returns a tuple with the ActorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetActorEmailOk() (*string, bool) {
	if o == nil || IsNil(o.ActorEmail) {
		return nil, false
	}
	return o.ActorEmail, true
}

// HasActorEmail returns a boolean if a field has been set.
func (o *Event) HasActorEmail() bool {
	if o != nil && !IsNil(o.ActorEmail) {
		return true
	}

	return false
}

// SetActorEmail gets a reference to the given string and assigns it to the ActorEmail field.
func (o *Event) SetActorEmail(v string) {
	o.ActorEmail = &v
}

// GetEventType returns the EventType field value
func (o *Event) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *Event) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *Event) SetEventType(v string) {
	o.EventType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Event) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Event) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Event) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetActorIpAddress returns the ActorIpAddress field value if set, zero value otherwise.
func (o *Event) GetActorIpAddress() string {
	if o == nil || IsNil(o.ActorIpAddress) {
		var ret string
		return ret
	}
	return *o.ActorIpAddress
}

// GetActorIpAddressOk returns a tuple with the ActorIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetActorIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ActorIpAddress) {
		return nil, false
	}
	return o.ActorIpAddress, true
}

// HasActorIpAddress returns a boolean if a field has been set.
func (o *Event) HasActorIpAddress() bool {
	if o != nil && !IsNil(o.ActorIpAddress) {
		return true
	}

	return false
}

// SetActorIpAddress gets a reference to the given string and assigns it to the ActorIpAddress field.
func (o *Event) SetActorIpAddress(v string) {
	o.ActorIpAddress = &v
}

// GetApiTokenName returns the ApiTokenName field value if set, zero value otherwise.
func (o *Event) GetApiTokenName() string {
	if o == nil || IsNil(o.ApiTokenName) {
		var ret string
		return ret
	}
	return *o.ApiTokenName
}

// GetApiTokenNameOk returns a tuple with the ApiTokenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetApiTokenNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApiTokenName) {
		return nil, false
	}
	return o.ApiTokenName, true
}

// HasApiTokenName returns a boolean if a field has been set.
func (o *Event) HasApiTokenName() bool {
	if o != nil && !IsNil(o.ApiTokenName) {
		return true
	}

	return false
}

// SetApiTokenName gets a reference to the given string and assigns it to the ApiTokenName field.
func (o *Event) SetApiTokenName(v string) {
	o.ApiTokenName = &v
}

// GetApiTokenPreview returns the ApiTokenPreview field value if set, zero value otherwise.
func (o *Event) GetApiTokenPreview() string {
	if o == nil || IsNil(o.ApiTokenPreview) {
		var ret string
		return ret
	}
	return *o.ApiTokenPreview
}

// GetApiTokenPreviewOk returns a tuple with the ApiTokenPreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetApiTokenPreviewOk() (*string, bool) {
	if o == nil || IsNil(o.ApiTokenPreview) {
		return nil, false
	}
	return o.ApiTokenPreview, true
}

// HasApiTokenPreview returns a boolean if a field has been set.
func (o *Event) HasApiTokenPreview() bool {
	if o != nil && !IsNil(o.ApiTokenPreview) {
		return true
	}

	return false
}

// SetApiTokenPreview gets a reference to the given string and assigns it to the ApiTokenPreview field.
func (o *Event) SetApiTokenPreview(v string) {
	o.ApiTokenPreview = &v
}

// GetSubEvents returns the SubEvents field value if set, zero value otherwise.
func (o *Event) GetSubEvents() []SubEvent {
	if o == nil || IsNil(o.SubEvents) {
		var ret []SubEvent
		return ret
	}
	return o.SubEvents
}

// GetSubEventsOk returns a tuple with the SubEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetSubEventsOk() ([]SubEvent, bool) {
	if o == nil || IsNil(o.SubEvents) {
		return nil, false
	}
	return o.SubEvents, true
}

// HasSubEvents returns a boolean if a field has been set.
func (o *Event) HasSubEvents() bool {
	if o != nil && !IsNil(o.SubEvents) {
		return true
	}

	return false
}

// SetSubEvents gets a reference to the given []SubEvent and assigns it to the SubEvents field.
func (o *Event) SetSubEvents(v []SubEvent) {
	o.SubEvents = v
}

func (o Event) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Event) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_id"] = o.EventId
	toSerialize["actor_user_id"] = o.ActorUserId
	if o.ActorName != nil {
		toSerialize["actor_name"] = o.ActorName
	}
	if !IsNil(o.ActorEmail) {
		toSerialize["actor_email"] = o.ActorEmail
	}
	toSerialize["event_type"] = o.EventType
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.ActorIpAddress) {
		toSerialize["actor_ip_address"] = o.ActorIpAddress
	}
	if !IsNil(o.ApiTokenName) {
		toSerialize["api_token_name"] = o.ApiTokenName
	}
	if !IsNil(o.ApiTokenPreview) {
		toSerialize["api_token_preview"] = o.ApiTokenPreview
	}
	if !IsNil(o.SubEvents) {
		toSerialize["sub_events"] = o.SubEvents
	}
	return toSerialize, nil
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


